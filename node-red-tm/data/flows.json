[
    {
        "id": "3dae026ab340962a",
        "type": "tab",
        "label": "init-config",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c71c8f26f5b7b19",
        "type": "tab",
        "label": "capture-radar",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9269520ddb532b00",
        "type": "tab",
        "label": "capture-events",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1fde507a4b80c79",
        "type": "tab",
        "label": "capture-aq",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7932be9acc7391c",
        "type": "tab",
        "label": "thingsboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "05fcb02c571dcfee",
        "type": "tab",
        "label": "system",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28627559bebdc324",
        "type": "tab",
        "label": "ui-monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "239d7b3ba410ad5e",
        "type": "tab",
        "label": "ui-database",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0a6e123f5e53c029",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "event; group summary daily",
        "style": {
            "label": true
        },
        "nodes": [
            "404ac097795a2da0",
            "b65e1877b1e04881",
            "5f3716d2176c3ab4",
            "bdb4b259d648b1f0",
            "ec7a0e0b1c62e91d"
        ],
        "x": 14,
        "y": 559,
        "w": 1172,
        "h": 122
    },
    {
        "id": "5aac1262472b0205",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "event; group frigate api/events/summary",
        "style": {
            "label": true
        },
        "nodes": [
            "08d030ffc3fe6adb",
            "b241a0ef89fd7ce4",
            "91d3f8965f62f4b0",
            "eb140f61419c6a08"
        ],
        "x": 14,
        "y": 419,
        "w": 1092,
        "h": 122
    },
    {
        "id": "5173f4b3ac03407a",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "event; show object counts/speeds last 24-hours",
        "style": {
            "label": true
        },
        "nodes": [
            "3985037239b671c5",
            "02469f2425072f7b",
            "928b71f25ce6e7b6",
            "c03516d1eb65598d",
            "4f84bcb60e4be762"
        ],
        "x": 14,
        "y": 699,
        "w": 1212,
        "h": 122
    },
    {
        "id": "76417db2b472ef4f",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "radar; TimedSpeedCounts (.counts, .speed_average)",
        "style": {
            "label": true
        },
        "nodes": [
            "15797ab24727f84d",
            "0e1614cf2e5f9942",
            "7cc031e5a7d773a4",
            "79900a566af02159",
            "39d895a16ca6f6f1",
            "62be7d38b991716c",
            "cbb3b02ca505a55b",
            "7db4b197df9eb075"
        ],
        "x": 14,
        "y": 839,
        "w": 1372,
        "h": 348
    },
    {
        "id": "1bd1f21fa0390c69",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "event; car event speed stats",
        "style": {
            "label": true
        },
        "nodes": [
            "c90aed37b7a31d9e",
            "5417aae0d14fa661",
            "584504e6c8935eaf",
            "9cf49f0891d25df1",
            "6d81c8e3c89b68f6"
        ],
        "x": 14,
        "y": 1199,
        "w": 1292,
        "h": 122
    },
    {
        "id": "0a5faeac9fbd6d55",
        "type": "group",
        "z": "9269520ddb532b00",
        "name": "frigate event mqtt end",
        "style": {
            "label": true
        },
        "nodes": [
            "2deec9d340d5ed26",
            "76911cc7f28e7da2",
            "f20c74c0ccfd256c",
            "86c86b0d82d13028",
            "8eaa1d06a29a5d2b"
        ],
        "x": 54,
        "y": 99,
        "w": 532,
        "h": 242
    },
    {
        "id": "71c085648c20e329",
        "type": "group",
        "z": "9269520ddb532b00",
        "name": "calc direction, speed on frigate event",
        "style": {
            "label": true
        },
        "nodes": [
            "7992eb250ae9d20f",
            "7f063afdbac396ce",
            "cbef8a3acc3d1495",
            "ad7393ac18c4083b",
            "b39062019fac1a66",
            "7f50d9d83bdb7f14",
            "c123fc5ed5e14e8a",
            "673e45159a2dfccf",
            "2c7c7df250289562",
            "627ba0f672680054",
            "b7398c4e0bc743e5",
            "a8aeffd2e5bc17f2"
        ],
        "x": 54,
        "y": 359,
        "w": 1332,
        "h": 628
    },
    {
        "id": "53e4faf6d3ece28c",
        "type": "group",
        "z": "9269520ddb532b00",
        "name": "create event table",
        "style": {
            "label": true
        },
        "nodes": [
            "510b389597efaf1b",
            "b77bb1c374a198e4",
            "e256d5e89eb39332",
            "d8786159d48401b9",
            "6b08c9332096b857",
            "3731dfc3716b1167"
        ],
        "x": 54,
        "y": 1039,
        "w": 912,
        "h": 122
    },
    {
        "id": "541d31d14bcd8b00",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "comments table",
        "style": {
            "label": true
        },
        "nodes": [
            "6a05187a692bed7c",
            "f27b6d01ae7836d6",
            "8f0bcaf04756da4f",
            "e8b8e45c4bc045d8",
            "840802d34d143ded",
            "8d65b604e8d9e7f9",
            "db1f35650c8d6448",
            "6e2a152aecd929d3",
            "d53997b3fec84e3a"
        ],
        "x": 14,
        "y": 19,
        "w": 1192,
        "h": 222
    },
    {
        "id": "0e3b2be7bcc3d3b8",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "DOWNLOAD tmdb - create JSON Events file from query",
        "style": {
            "label": true
        },
        "nodes": [
            "f43a276d3a899fe8",
            "c25ade7ddaeca697",
            "c45589c369c843a5",
            "f2bd56710ba03238",
            "ecb0810a22dc4a5c",
            "b4e0b45a7bedd728",
            "5124f45846b94ef0",
            "7050ed881890ce4d",
            "82073a9c3e0f504f",
            "44f3b2f2c2ae88fe"
        ],
        "x": 14,
        "y": 619,
        "w": 1272,
        "h": 262
    },
    {
        "id": "81c973dcdca1a4f0",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "database download links",
        "style": {
            "label": true
        },
        "nodes": [
            "f31a598d.9fd2c8",
            "98261154.3006",
            "34dc99e5.495466",
            "38d65d59.1d8aa2",
            "3b8014a.86ad8ec",
            "5b18a8e7.fb8da8",
            "5de7cbb4.fa21a4",
            "67ecfa7f.3f0e24"
        ],
        "x": 14,
        "y": 299,
        "w": 692,
        "h": 262
    },
    {
        "id": "1bfaaf118f38aee0",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "DOWNLOAD tmdb - create JSON Radar file from query",
        "style": {
            "label": true
        },
        "nodes": [
            "38b44ecb9288caf2",
            "55b8ab3b2b7af294",
            "790a89794204c383",
            "314a302b5d86fb5a",
            "b00e6ad2a4612cad",
            "7dba386e57337c72",
            "04df9cb8c0753abb",
            "3557178575375eb6",
            "29583ca6de66fedf",
            "91cae91e61fcea38",
            "68fecdfda8e4e774",
            "8c660460752a27b2",
            "d50d86038fe1af32",
            "b5e099e92ce27bf6",
            "f77b0f12f5047d25",
            "fbf290de9b7b858f",
            "35dd409613d47a60",
            "729b953264ce47aa",
            "23b1ba527419b29b",
            "b519f0927284d44a",
            "2f3cc99c3c41ab90",
            "62e90c91d0238273",
            "c00796fd5642dae0"
        ],
        "x": 14,
        "y": 919,
        "w": 1552,
        "h": 502
    },
    {
        "id": "dc2934def36c6285",
        "type": "group",
        "z": "05fcb02c571dcfee",
        "name": "system client-side attributes",
        "style": {
            "label": true
        },
        "nodes": [
            "4d67617dadcb9ede",
            "5bb734f0283c5112",
            "5235db548e7aaef3",
            "fe2e9d1af38b2ca8",
            "b6bb1e836852dc04",
            "c0a27f9a895a1a94",
            "0dccfc4a6467f7f4",
            "eb3b3c5230e3dd32",
            "611949e637ab7173",
            "bcd4c7df6b6f93d3",
            "60fb5d8b6644ef02",
            "41e6810f869d1552",
            "4af4cb47fdd97610",
            "2f43413dfaba508a",
            "040751d9061fe787",
            "d046a343ebc5fe81",
            "9dc62a7e0c39ac0e",
            "ab89cf1a793d2be5",
            "02470b22b2f6893c",
            "486556a1e7fce8cf",
            "5dcc009cdc781454",
            "8fd2b9ab457b5065",
            "f2885df5fb61fa3f"
        ],
        "x": 14,
        "y": 99,
        "w": 1372,
        "h": 382
    },
    {
        "id": "2f27e270200485b9",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "thingsboard telemetry",
        "style": {
            "label": true
        },
        "nodes": [
            "b334a2375eb8cb42",
            "1819134eccdf2660",
            "55a1af374cc8ecb9",
            "99dfff63ac837bc8",
            "f35d3f484c2f6107",
            "221ddfedf40c108f",
            "8c521232f464d27a"
        ],
        "x": 108,
        "y": 93,
        "w": 1198,
        "h": 794
    },
    {
        "id": "fe1b9f6f9d89d353",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "thingsboard client side attributes",
        "style": {
            "label": true
        },
        "nodes": [
            "fac72767826a76d9",
            "f034ca2ecdf9a2f6",
            "75f7976086cc9838",
            "fdb3962b458f90c2"
        ],
        "x": 108,
        "y": 999,
        "w": 1198,
        "h": 468
    },
    {
        "id": "9e0b1edd49eb4244",
        "type": "group",
        "z": "3dae026ab340962a",
        "name": "mqtt broker",
        "style": {
            "label": true
        },
        "nodes": [
            "22a2431d179ee8db",
            "e0525a29b485694f",
            "9ca3b6ed1a6334c0"
        ],
        "x": 74,
        "y": 79,
        "w": 512,
        "h": 122
    },
    {
        "id": "dea1b8828f8e501f",
        "type": "group",
        "z": "1c71c8f26f5b7b19",
        "name": "@O - TimedSpeedCounts",
        "style": {
            "label": true
        },
        "nodes": [
            "f04e243ae46cc4c3",
            "50dcead7cf35b74f",
            "c44b652eda2b8a8c",
            "a198505b2b0fd7c1",
            "866e0c814ea2b4da",
            "cbe24d38e9f03394",
            "22234193104332f6",
            "4094c101f6b59d95",
            "de7bc8103f7ca3c6",
            "f9a458c786e4bb84",
            "8ccadc734d8ab769"
        ],
        "x": 354,
        "y": 959,
        "w": 1222,
        "h": 242
    },
    {
        "id": "1eebfe6a2eca8ad4",
        "type": "group",
        "z": "1c71c8f26f5b7b19",
        "name": "ON - DetectedObjectVelocity, for single object",
        "style": {
            "label": true
        },
        "nodes": [
            "7139490bca7e56ca",
            "ca182659939320ce",
            "7c9292601a625445",
            "1867db9744bd3c1f",
            "5514c5ab4bed552c",
            "c6fcbfb9341f189b",
            "1acba66197b7b0fa",
            "01307f2f13f465f2",
            "3faf0dcbc24ef11c",
            "1ef2418fe536aad5",
            "1db11b98d771c791"
        ],
        "x": 354,
        "y": 699,
        "w": 1122,
        "h": 242
    },
    {
        "id": "047f05d7650ba3cc",
        "type": "group",
        "z": "1c71c8f26f5b7b19",
        "name": "OS O3 - payload, raw speed+magnitude",
        "style": {
            "label": true
        },
        "nodes": [
            "16572734c7e02e30",
            "a3dddf65b65ca371",
            "9ba47db34d626ef9",
            "74df2509f68a2d6e",
            "9de4885ad8ef8485",
            "81522ee190374834",
            "7e4a607265a272c2",
            "080fd00489701aa1",
            "a489601d43802b82",
            "8d4953609399d75e",
            "2aac5b4f344a86e8"
        ],
        "x": 354,
        "y": 1219,
        "w": 1242,
        "h": 242
    },
    {
        "id": "fcbf8999ca05a371",
        "type": "group",
        "z": "1c71c8f26f5b7b19",
        "name": "OS O1 (equivalent) - payload, raw speed+magnitude",
        "style": {
            "label": true
        },
        "nodes": [
            "a3924864154eaefb",
            "a8dff32b84fbd72a",
            "8773b251c9ee9539",
            "cdc947bb9cd47c63",
            "252e2f5b95aeb8da",
            "83065a55697cc160",
            "95186b0fee06a3f5",
            "07cdbeafa34a565e",
            "303ea9d25d718231",
            "a18940845d6c5a2e"
        ],
        "x": 414,
        "y": 1499,
        "w": 1242,
        "h": 262
    },
    {
        "id": "791a8c44b7f98d1b",
        "type": "group",
        "z": "3dae026ab340962a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4bbb9e24b5507a00",
            "8004ba7ad5a9bd83"
        ],
        "x": 48,
        "y": 233,
        "w": 1050,
        "h": 840
    },
    {
        "id": "672f3b07194c5dd5",
        "type": "group",
        "z": "b1fde507a4b80c79",
        "name": "set up airquality database table",
        "style": {
            "label": true
        },
        "nodes": [
            "35d0362b1f8a5e1a",
            "ad3b1bd4bcdd6731",
            "e063e562cca50f31",
            "9ec2c67401c5aebc",
            "d61da5053d3a100e",
            "e13414feb4f512b8",
            "f1530cb4468b517b",
            "f11bc2c9463f8c85",
            "3ac16ca7857d43a0",
            "88e51d22037ef437"
        ],
        "x": 74,
        "y": 539,
        "w": 1032,
        "h": 202
    },
    {
        "id": "efdb589a1b6e0c2f",
        "type": "group",
        "z": "b1fde507a4b80c79",
        "name": "capture airquality messages, assign properties, format message, save and send",
        "style": {
            "label": true
        },
        "nodes": [
            "8cae4cba37aecc0d",
            "99bfb6c2ced810ec",
            "014464d29b72fa53",
            "24ae834ea737eac6",
            "ef6ffe823574c1d1",
            "4ef1e892a6b1c695"
        ],
        "x": 294,
        "y": 159,
        "w": 952,
        "h": 222
    },
    {
        "id": "694f0242d0985c69",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "send to tb",
        "style": {
            "label": true
        },
        "nodes": [
            "21944450ecc08385",
            "93aa421659d2c20b",
            "9b8c2bcc16a637fd",
            "43087a735f896849"
        ],
        "x": 1374,
        "y": 93,
        "w": 1118,
        "h": 188
    },
    {
        "id": "da1c8c74261a93a4",
        "type": "group",
        "z": "1c71c8f26f5b7b19",
        "name": "OC - payload, object summary+vehicle length",
        "style": {
            "label": true
        },
        "nodes": [
            "ca4ed8761a4ded27",
            "fbde266909bc0ca7",
            "09369d5e4816364f",
            "4ffa919935494b14",
            "45801cdcc5094abc",
            "6e30f911242c5595",
            "edcc237df962c31a",
            "59a9c9a7ba535641",
            "07d558da50af5ae4",
            "1bdec3d0b912f792",
            "14ec91d93285b0fb",
            "9b57af73505cbb61",
            "8e8edd5176fc9a71",
            "46e349af1bed1834"
        ],
        "x": 414,
        "y": 1779,
        "w": 1132,
        "h": 282
    },
    {
        "id": "805c5feafbb3610b",
        "type": "group",
        "z": "1c71c8f26f5b7b19",
        "name": "collect radarInfo, initialize",
        "style": {
            "label": true
        },
        "nodes": [
            "6a21bd2e9204bac0",
            "c113788ccfa879b4",
            "ae11d5c9948bf4e1",
            "c4a024def66c8499",
            "0abd83310c35db9a",
            "59d61701c38da429",
            "9e95f569494a21dc",
            "50c56047654010ea",
            "8c434de19f88fefc",
            "7eb7b4b61d38b789",
            "3e9d121913d7feae"
        ],
        "x": 54,
        "y": 439,
        "w": 2512,
        "h": 162
    },
    {
        "id": "2df66c6bc991dbf4",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "sensor selection",
        "style": {
            "label": true
        },
        "nodes": [
            "bb08a223f0aaef0f",
            "e3b795e05d7650b2",
            "c7f00f59861cd00f",
            "ff783e21c3b96d4b",
            "62c9240d45e9c8d6",
            "59d0c8b142295eee",
            "f50a7968e032532a",
            "af02df2daa211e5b",
            "1feaed96b954867a",
            "946c6bc353743bc4",
            "04c77d4233fbffd3"
        ],
        "x": 14,
        "y": 79,
        "w": 1332,
        "h": 202
    },
    {
        "id": "7c19b3698bb02613",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "airquality_monitor",
        "style": {
            "label": true
        },
        "nodes": [
            "a3672e4c4c84d721",
            "e5ed08571761bd2c",
            "441e03047af79373",
            "9d1978d68c96feb9",
            "2227d1c8d929c91d",
            "f920233df1bbb23f",
            "149757a20cc50973",
            "b8342af470189c50",
            "95871652f30bc9ce",
            "8a82204bdfcdddb9",
            "7d5875326501443c",
            "d16177f416c9a0ef",
            "34361a18f847df07",
            "c1adf5e2bd669713",
            "c13f03809fbd9809"
        ],
        "x": 14,
        "y": 1999,
        "w": 1278,
        "h": 408
    },
    {
        "id": "91096cd6c9c741e2",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "event-based ui",
        "style": {
            "label": true
        },
        "nodes": [
            "c249329109ac17d5",
            "9b9e4fc50b744fc3",
            "453513c49e4b1b60",
            "ca3c18fa88ded42a"
        ],
        "x": 94,
        "y": 1353,
        "w": 1398,
        "h": 634
    },
    {
        "id": "9b9e4fc50b744fc3",
        "type": "group",
        "z": "28627559bebdc324",
        "g": "91096cd6c9c741e2",
        "name": "last N events, radar",
        "style": {
            "label": true
        },
        "nodes": [
            "d66541089b01306e",
            "2e680914d7da5c94",
            "c788d632f5e93a73",
            "e5391514131a2b5a",
            "5ec2d3ba52f944f5",
            "c36c71706e494b5e",
            "82bc0c11adb825f8",
            "736d1e21a49f446b",
            "5b307e65106f3540",
            "4c087723a1d698e9",
            "0f65ceafe3f7c069",
            "f5d2d92d50d18ce2",
            "c2270f3050bf35ab"
        ],
        "x": 194,
        "y": 1379,
        "w": 1252,
        "h": 362
    },
    {
        "id": "453513c49e4b1b60",
        "type": "group",
        "z": "28627559bebdc324",
        "g": "91096cd6c9c741e2",
        "name": "cumulative events today by object",
        "style": {
            "label": true
        },
        "nodes": [
            "6d738ed81fefbedc",
            "d856c68660eb2202",
            "f57e08e6fb9c0d09",
            "d23be15251ed6d73",
            "4760bed60a7f392a",
            "170ddffb726db9e0",
            "befe91e6862c72db",
            "13a061996f9322f3",
            "98571c77b9801a83"
        ],
        "x": 194,
        "y": 1759,
        "w": 1272,
        "h": 202
    },
    {
        "id": "b334a2375eb8cb42",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "2f27e270200485b9",
        "name": "event",
        "style": {
            "label": true,
            "fill": "#e3f3d3"
        },
        "nodes": [
            "ed447e5f8becbfad",
            "4bec488857c0553f"
        ],
        "x": 134,
        "y": 119,
        "w": 332,
        "h": 82
    },
    {
        "id": "1819134eccdf2660",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "2f27e270200485b9",
        "name": "radar",
        "style": {
            "label": true,
            "fill": "#ffbfbf"
        },
        "nodes": [
            "fee85b1886270ac6",
            "087588593911f398",
            "fc5e2cd719fa680a",
            "0124afc74d86b533",
            "e05e91362c933e94",
            "9f5540b6beae8e73",
            "3fb645608f34cc0c",
            "cc21b9e657cba081",
            "ff1719e60656a2e6",
            "d3f14c01ec3c7250",
            "4796b517d7d045a7",
            "9a894f4bd304f5a9",
            "5d3596375bd695c0",
            "f29975eb207b5b8d"
        ],
        "x": 134,
        "y": 219,
        "w": 872,
        "h": 342
    },
    {
        "id": "55a1af374cc8ecb9",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "2f27e270200485b9",
        "name": "deployment",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "8a83d59ee0db1198",
            "c6ff73faf6fa9e98"
        ],
        "x": 134,
        "y": 579,
        "w": 372,
        "h": 82
    },
    {
        "id": "99dfff63ac837bc8",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "2f27e270200485b9",
        "name": "system-metrics",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "521115ddd5741eea",
            "24c1b5f3bff3834c"
        ],
        "x": 134,
        "y": 679,
        "w": 392,
        "h": 82
    },
    {
        "id": "0e1614cf2e5f9942",
        "type": "group",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "show object counts/speeds (5-min) last 60-min in zone_radar",
        "style": {
            "label": true
        },
        "nodes": [
            "11fa2826769befc7",
            "158e6edae533bfdc",
            "eff2193c8246a9d2",
            "57fa6ca2b7d290e3"
        ],
        "x": 334,
        "y": 1039,
        "w": 972,
        "h": 122
    },
    {
        "id": "3a9bb6ed1306eb1c",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "create downloadable links",
        "style": {
            "label": true
        },
        "nodes": [
            "f31a598d.9fd2c8",
            "98261154.3006",
            "34dc99e5.495466",
            "38d65d59.1d8aa2",
            "3b8014a.86ad8ec",
            "5b18a8e7.fb8da8",
            "a8c2985e.d23ad8",
            "5de7cbb4.fa21a4",
            "67ecfa7f.3f0e24",
            "9e38989f2e13e4d7",
            "c30220553ae11805",
            "2b95a63a76f28f09",
            "b43ee265985f0f56"
        ],
        "x": 14,
        "y": 259,
        "w": 1252,
        "h": 342
    },
    {
        "id": "4bbb9e24b5507a00",
        "type": "group",
        "z": "3dae026ab340962a",
        "g": "791a8c44b7f98d1b",
        "name": "read config file",
        "style": {
            "label": true
        },
        "nodes": [
            "a328d3aa7640102a",
            "7e988d24a7912d71",
            "ecc317fcd059b4c3",
            "b0252bd49dc8e61d",
            "94136e5a6f092bb6",
            "5ffb7c9c38b8c5b0",
            "2fa46892748adc43"
        ],
        "x": 74,
        "y": 259,
        "w": 832,
        "h": 162
    },
    {
        "id": "8004ba7ad5a9bd83",
        "type": "group",
        "z": "3dae026ab340962a",
        "g": "791a8c44b7f98d1b",
        "name": "deployment checks and setup",
        "style": {
            "label": true
        },
        "nodes": [
            "f6ecdd18d8e03f91",
            "689b64c16a889e0a",
            "bc398ad5de3bd112",
            "6d2f607b324415b4",
            "24efdc7f1231f7f0",
            "1ba33a74f2d3a680",
            "05c37560dd57ea90",
            "ac8b2de05ec27001",
            "696c3a7b0b83f7b5",
            "a2b2e69319628779",
            "17455485af2d8cfc"
        ],
        "x": 88,
        "y": 439,
        "w": 984,
        "h": 608
    },
    {
        "id": "f35d3f484c2f6107",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "2f27e270200485b9",
        "name": "airquality",
        "style": {
            "label": true,
            "fill": "#bfdbef"
        },
        "nodes": [
            "2be1c8d04ce69a48",
            "87d3892038bb3e5f"
        ],
        "x": 134,
        "y": 779,
        "w": 352,
        "h": 82
    },
    {
        "id": "fac72767826a76d9",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "fe1b9f6f9d89d353",
        "name": "deployment",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "8768b75dbfee3973",
            "9b0f7197fe82bbfa"
        ],
        "x": 134,
        "y": 1359,
        "w": 492,
        "h": 82
    },
    {
        "id": "f034ca2ecdf9a2f6",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "fe1b9f6f9d89d353",
        "name": "system-attributes",
        "style": {
            "label": true,
            "fill": "#bfc7d7"
        },
        "nodes": [
            "d367cb76b239682f",
            "e507fdc9cbf67095",
            "0b62cae60d488c85",
            "4af0d78e8bc39647",
            "66bace5cf805a4fb",
            "22f397ac5c294b6e",
            "c49d311e5668de52",
            "9941048ea93dc79c"
        ],
        "x": 134,
        "y": 1079,
        "w": 472,
        "h": 262
    },
    {
        "id": "b7398c4e0bc743e5",
        "type": "group",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "save and forward event",
        "style": {
            "label": true
        },
        "nodes": [
            "274f87c31437c2d7",
            "61d6a19c99c60e0b",
            "a96d834e3571c549",
            "7f0ef976c7b79245",
            "b08a42e270ab5a4f",
            "674346683479762a"
        ],
        "x": 734,
        "y": 759,
        "w": 572,
        "h": 202
    },
    {
        "id": "43087a735f896849",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "tb http api",
        "style": {
            "label": true
        },
        "nodes": [
            "677a57bbf3619854",
            "df6ac2f42ac6d8c7",
            "9c944328e288b2dc",
            "dd3f9ef16332021c",
            "d739b10ce5fa8f40"
        ],
        "x": 1714,
        "y": 119,
        "w": 752,
        "h": 122
    },
    {
        "id": "d16177f416c9a0ef",
        "type": "group",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "event; object counts/speeds individually last 24-hours",
        "style": {
            "label": true
        },
        "nodes": [
            "12df4fdffa628238",
            "6a292f3905fe5405",
            "76e813b1b7a4b63e",
            "5cf61952cb6823de"
        ],
        "x": 394,
        "y": 2259,
        "w": 872,
        "h": 122
    },
    {
        "id": "f5d2d92d50d18ce2",
        "type": "group",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "frigate event api for thumbnail",
        "style": {
            "label": true
        },
        "nodes": [
            "09f99c931e5535bf",
            "08121a31488784bc",
            "9226865e3385eb56",
            "aa0afb5180297e2b"
        ],
        "x": 594,
        "y": 1419,
        "w": 612,
        "h": 122
    },
    {
        "id": "a2b2e69319628779",
        "type": "group",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "create deployment table",
        "style": {
            "label": true
        },
        "nodes": [
            "8a6d4593a661c3df",
            "ff28acdecfc4ebb1",
            "751ff2049a663e9c",
            "3cdbccf5dbcb1c4e",
            "f9a2f4f97e3ba1cf",
            "ba3b41519066f03a",
            "f111096594207360",
            "c25adb99d55eb890"
        ],
        "x": 114,
        "y": 859,
        "w": 932,
        "h": 162
    },
    {
        "id": "23636f4163fa6e3b",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "backup and restore",
        "style": {
            "label": true
        },
        "nodes": [
            "b781cb3d6df38fed",
            "a38a90c36a0abfc3",
            "0372cefb5e2ec968",
            "cad1724850f8df3d",
            "fb62ca91f138ab87"
        ],
        "x": 114,
        "y": 1599,
        "w": 1398,
        "h": 368
    },
    {
        "id": "b781cb3d6df38fed",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "23636f4163fa6e3b",
        "name": "backup TM configuration to Thingsboard",
        "style": {
            "label": true
        },
        "nodes": [
            "f49c1d345cdfef57",
            "7c96d66a8330a4fc",
            "4d376b9ae709214b"
        ],
        "x": 614,
        "y": 1639,
        "w": 702,
        "h": 82
    },
    {
        "id": "a38a90c36a0abfc3",
        "type": "group",
        "z": "f7932be9acc7391c",
        "g": "23636f4163fa6e3b",
        "name": "restore TM Frigate config from ThingsBoard",
        "style": {
            "label": true
        },
        "nodes": [
            "56cafb11de5348b2",
            "25515211bb8cecb4",
            "64467a90df93e582",
            "7555653f37b1cd50",
            "0d394a2d73d138d6",
            "5b7fe362e2e6b35d"
        ],
        "x": 614,
        "y": 1739,
        "w": 872,
        "h": 202
    },
    {
        "id": "3c299af3b0814ea5",
        "type": "group",
        "z": "05fcb02c571dcfee",
        "name": "system metrics, telemetry",
        "style": {
            "label": true
        },
        "nodes": [
            "9f2c4f1852402eb8",
            "040a9f02853598aa",
            "8c8c487fbf8e11a1",
            "e1d39852db4af08c",
            "65e30edd475cad64",
            "c497cfedf6aed533",
            "ae7325dd07b1f3ba",
            "7b406e86282cd677",
            "674f21d2e645cc18",
            "ab9d774782f92e88",
            "720ee19c705f37d9",
            "398089ca4a10bdc5",
            "882369d2082717a5",
            "b6b8a1a7c08eb0ac",
            "976ec527b724bd3d",
            "6881f1dd8a4805af",
            "6e88f30f09b49d22",
            "6dca925fad91c100",
            "c5891e3e63052f03"
        ],
        "x": 14,
        "y": 539,
        "w": 1312,
        "h": 502
    },
    {
        "id": "05a58d9ee463c696",
        "type": "junction",
        "z": "1c71c8f26f5b7b19",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "998194b1b9bc29ba",
                "6603f07036f13602",
                "99c67a76992c8de8",
                "2ea13e7fb927749d"
            ]
        ]
    },
    {
        "id": "3faf0dcbc24ef11c",
        "type": "junction",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "x": 380,
        "y": 820,
        "wires": [
            [
                "7139490bca7e56ca",
                "1acba66197b7b0fa",
                "01307f2f13f465f2"
            ]
        ]
    },
    {
        "id": "de7bc8103f7ca3c6",
        "type": "junction",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "x": 380,
        "y": 1040,
        "wires": [
            [
                "4094c101f6b59d95",
                "cbe24d38e9f03394",
                "f04e243ae46cc4c3"
            ]
        ]
    },
    {
        "id": "a489601d43802b82",
        "type": "junction",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "x": 380,
        "y": 1300,
        "wires": [
            [
                "080fd00489701aa1",
                "16572734c7e02e30",
                "7e4a607265a272c2",
                "07cdbeafa34a565e"
            ]
        ]
    },
    {
        "id": "05e485cfcada03a3",
        "type": "junction",
        "z": "1c71c8f26f5b7b19",
        "x": 1780,
        "y": 360,
        "wires": [
            [
                "314e74cc3f8d050c",
                "7d83424b6bf3a7a7",
                "0abd83310c35db9a"
            ]
        ]
    },
    {
        "id": "05c37560dd57ea90",
        "type": "junction",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "x": 740,
        "y": 740,
        "wires": [
            [
                "1ba33a74f2d3a680",
                "17455485af2d8cfc"
            ]
        ]
    },
    {
        "id": "8c521232f464d27a",
        "type": "junction",
        "z": "f7932be9acc7391c",
        "g": "2f27e270200485b9",
        "x": 1000,
        "y": 620,
        "wires": [
            [
                "221ddfedf40c108f"
            ]
        ]
    },
    {
        "id": "14ec91d93285b0fb",
        "type": "junction",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "x": 620,
        "y": 1820,
        "wires": [
            [
                "edcc237df962c31a",
                "ca4ed8761a4ded27",
                "59a9c9a7ba535641"
            ]
        ]
    },
    {
        "id": "3e9d121913d7feae",
        "type": "junction",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "c4a024def66c8499",
                "8c434de19f88fefc"
            ]
        ]
    },
    {
        "id": "674346683479762a",
        "type": "junction",
        "z": "9269520ddb532b00",
        "g": "b7398c4e0bc743e5",
        "x": 760,
        "y": 800,
        "wires": [
            [
                "b08a42e270ab5a4f",
                "a96d834e3571c549"
            ]
        ]
    },
    {
        "id": "04c77d4233fbffd3",
        "type": "junction",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "x": 1320,
        "y": 240,
        "wires": [
            [
                "a20d5f859bf5c14d"
            ]
        ]
    },
    {
        "id": "ca3c18fa88ded42a",
        "type": "junction",
        "z": "28627559bebdc324",
        "g": "91096cd6c9c741e2",
        "x": 180,
        "y": 1420,
        "wires": [
            [
                "82bc0c11adb825f8",
                "f57e08e6fb9c0d09",
                "736d1e21a49f446b",
                "5ec2d3ba52f944f5"
            ]
        ]
    },
    {
        "id": "34361a18f847df07",
        "type": "junction",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "x": 360,
        "y": 2040,
        "wires": [
            [
                "12df4fdffa628238",
                "441e03047af79373"
            ]
        ]
    },
    {
        "id": "a20d5f859bf5c14d",
        "type": "junction",
        "z": "28627559bebdc324",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "34361a18f847df07",
                "158e6edae533bfdc",
                "79900a566af02159",
                "928b71f25ce6e7b6",
                "5f3716d2176c3ab4",
                "b241a0ef89fd7ce4",
                "584504e6c8935eaf",
                "f57e08e6fb9c0d09"
            ]
        ]
    },
    {
        "id": "a5d65dd0e3566daa",
        "type": "mqtt-broker",
        "name": "mqtt-broker-local",
        "broker": "${TM_MQTT_BROKER_HOST}",
        "port": "${TM_MQTT_BROKER_PORT}",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "665d947f9a312a33",
        "type": "ui_tab",
        "name": "Monitoring Tab",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "06dde4be9a9a6b27",
        "type": "ui_group",
        "name": "Events aggregates",
        "tab": "665d947f9a312a33",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7866c2aa313ab8b9",
        "type": "ui_group",
        "name": "Live updates",
        "tab": "665d947f9a312a33",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ddb9d86f10b3f6a7",
        "type": "ui_tab",
        "name": "Database Tab",
        "icon": "input",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c0886ba4111fbfae",
        "type": "ui_group",
        "name": "Database Downloads",
        "tab": "ddb9d86f10b3f6a7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f60c1ab30a6fc8f",
        "type": "sqlitedb",
        "db": "${TM_DATABASE_PATH_TMDB}",
        "mode": "RWC"
    },
    {
        "id": "d3f63882e39b03a6",
        "type": "ui_group",
        "name": "Comments Input",
        "tab": "ddb9d86f10b3f6a7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eab37b30ecd3f935",
        "type": "ui_group",
        "name": "Events JSON Generator",
        "tab": "ddb9d86f10b3f6a7",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f0ca9c7dffb5ae3c",
        "type": "ui_group",
        "name": "Radar JSON Generator",
        "tab": "ddb9d86f10b3f6a7",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d6248c5f96ac4b3e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "On-Device Dashboard - Traffic Monitor",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "YYYY-MM-DD",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "0fd9a947334c7d0f",
        "type": "ui_tab",
        "name": "System Settings Tab",
        "icon": "settings",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "55acf8751a68ec74",
        "type": "ui_group",
        "name": "Client-Side Attributes",
        "tab": "0fd9a947334c7d0f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6739e78652771a41",
        "type": "serial-port",
        "name": "",
        "serialport": "${TM_RADAR_SERIAL_PORT_00}",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "500"
    },
    {
        "id": "d4f8fcd8e734b75f",
        "type": "serial-port",
        "name": "",
        "serialport": "${TM_RADAR_SERIAL_PORT_01}",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "500"
    },
    {
        "id": "8fcc984759daf862",
        "type": "serial-port",
        "name": "",
        "serialport": "${TM_RADAR_SERIAL_PORT_02}",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "500"
    },
    {
        "id": "9436149d39191450",
        "type": "serial-port",
        "name": "",
        "serialport": "${TM_RADAR_SERIAL_PORT_03}",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "500"
    },
    {
        "id": "941fb260d6cfb5a2",
        "type": "ui_group",
        "name": "Backup & Restore",
        "tab": "0fd9a947334c7d0f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "202181a361213d6d",
        "type": "ui_group",
        "name": "Sensor Selector",
        "tab": "665d947f9a312a33",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "62cdf198fe42de7e",
        "type": "ui_group",
        "name": "Air Quality",
        "tab": "665d947f9a312a33",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9d0f912cc84546dd",
        "type": "debug",
        "z": "3dae026ab340962a",
        "name": "catch - init error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 40,
        "wires": []
    },
    {
        "id": "63b2b42491150896",
        "type": "catch",
        "z": "3dae026ab340962a",
        "name": "catch - init",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 40,
        "wires": [
            [
                "9d0f912cc84546dd"
            ]
        ]
    },
    {
        "id": "22a2431d179ee8db",
        "type": "debug",
        "z": "3dae026ab340962a",
        "g": "9e0b1edd49eb4244",
        "name": "debug: Broker status events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 120,
        "wires": []
    },
    {
        "id": "e0525a29b485694f",
        "type": "debug",
        "z": "3dae026ab340962a",
        "g": "9e0b1edd49eb4244",
        "name": "debug: broker publish events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 160,
        "wires": []
    },
    {
        "id": "9ca3b6ed1a6334c0",
        "type": "aedes broker",
        "z": "3dae026ab340962a",
        "g": "9e0b1edd49eb4244",
        "name": "mqtt-broker-local",
        "mqtt_port": "${TM_MQTT_BROKER_PORT}",
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "22a2431d179ee8db"
            ],
            [
                "e0525a29b485694f"
            ]
        ]
    },
    {
        "id": "a328d3aa7640102a",
        "type": "yaml",
        "z": "3dae026ab340962a",
        "g": "4bbb9e24b5507a00",
        "property": "payload",
        "name": "",
        "x": 610,
        "y": 300,
        "wires": [
            [
                "94136e5a6f092bb6"
            ]
        ]
    },
    {
        "id": "7e988d24a7912d71",
        "type": "file in",
        "z": "3dae026ab340962a",
        "g": "4bbb9e24b5507a00",
        "name": "",
        "filename": "/config/config.yml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "a328d3aa7640102a"
            ]
        ]
    },
    {
        "id": "ecc317fcd059b4c3",
        "type": "inject",
        "z": "3dae026ab340962a",
        "g": "4bbb9e24b5507a00",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "7e988d24a7912d71"
            ]
        ]
    },
    {
        "id": "b0252bd49dc8e61d",
        "type": "change",
        "z": "3dae026ab340962a",
        "g": "4bbb9e24b5507a00",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 380,
        "wires": [
            [
                "ac8b2de05ec27001"
            ]
        ]
    },
    {
        "id": "94136e5a6f092bb6",
        "type": "function",
        "z": "3dae026ab340962a",
        "g": "4bbb9e24b5507a00",
        "name": "init config defaults",
        "func": "\n//thingsboard\n// default to enabled: false\nif (typeof msg.payload.thingsboard.enabled !== \"undefined\") {\n  msg.payload.thingsboard.enabled = msg.payload.thingsboard.enabled === true ? true : false;\n} else { msg.payload.thingsboard.enabled = false; }\n\nif (msg.payload.thingsboard.enabled === true) {\n  if (typeof msg.payload.thingsboard.host === \"undefined\") {\n    node.error(`Node-RED config.yml key thingsboard.host needs to be populated when thingsboard is enabled. Disabling ThingsBoard.`);\n    // and disable thingsboard\n    msg.payload.thingsboard.enabled = false;\n  }\n  else {\n    //assign TB url (domain, front part)\n    msg.payload.thingsboard.url = `${msg.payload.thingsboard.host}${msg.payload.thingsboard.port ? ':' + msg.payload.thingsboard.port : ''}`\n  }  \n  //check protocol http can be http or https\n  if (typeof msg.payload.thingsboard.protocol !== \"undefined\") {\n    msg.payload.thingsboard.protocol = msg.payload.thingsboard.protocol.includes('https') ? 'http' : msg.payload.thingsboard.protocol;\n    msg.payload.thingsboard.protocol = msg.payload.thingsboard.protocol.includes('mqtts') ? 'mqtt' : msg.payload.thingsboard.protocol;\n  }\n  //warn if no access_token\n  if (typeof msg.payload.thingsboard.access_token === \"undefined\") {\n    node.warn(`Node-RED config.yml key thingsboard.access_token is not populated when thingsboard is enabled. access_token may be required for authentication.`);\n  }\n}\n\n\n//deployment\n//check deployment entries for valid values\nmsg.payload.deployment.lat = typeof msg.payload.deployment.lat === \"undefined\" ? '' : msg.payload.deployment.lat;\nmsg.payload.deployment.lon = typeof msg.payload.deployment.lon === \"undefined\" ? '' : msg.payload.deployment.lon;\nmsg.payload.deployment.bearing = typeof msg.payload.deployment.bearing === \"undefined\" ? '' : msg.payload.deployment.bearing;\n\n//check for numeric (decimal) lon and lat\nif (msg.payload.deployment.lat !== null) {\n  if (typeof msg.payload.deployment.lat !== \"number\") {\n    node.error(`Node-RED config.yml top-level deployment.lat is not a valid type; needs to be numeric`);\n  }\n}\nif (msg.payload.deployment.lon !== null) {\n  if (typeof msg.payload.deployment.lon !== \"number\") {\n    node.error(`Node-RED config.yml top-level deployment.lon is not a valid type; needs to be numeric`);\n  }\n}\nconst bearing_values = ['n', 's', 'e', 'w', 'ne', 'nw', 'se', 'sw'];\n//allow empty/null/undefined values\nif (msg.payload.deployment.bearing !== null) {\n  if (bearing_values.indexOf(msg.payload.deployment.bearing.toLowerCase()) !== -1) {\n    msg.payload.deployment.bearing = msg.payload.deployment.bearing.toLowerCase();\n  }\n  else {\n    node.error(`Node-RED config.yml top-level deployment.bearing is not a valid value; needs to be one of ${bearing_values}`);\n  }\n}\n\n// go through each of the sensors that have no deployment object and copy the top-level deployment object into them\n// do not overwrite any existing sensor deployment properties\nfor (const [sensorType, sensors] of Object.entries(msg.payload.sensors)) {\n  for (const [sensorName, sensor] of Object.entries(sensors)) {\n    if (sensor.hasOwnProperty('enabled') && sensor.enabled === true) {\n      if (sensor.hasOwnProperty('deployment')) {\n        const sensorDeployment = sensor.deployment;\n        const topLevelDeployment = msg.payload.deployment;\n        for (const [prop, value] of Object.entries(topLevelDeployment)) {\n          if (!sensorDeployment.hasOwnProperty(prop)) {\n            sensorDeployment[prop] = value;\n          }\n        }\n        if (sensorDeployment.hasOwnProperty('bearing')) {\n          const bearing = sensorDeployment.bearing.toLowerCase();\n          if (!bearing_values.includes(bearing)) {\n            node.error(`Invalid bearing value '${sensorDeployment.bearing}' for sensor '${sensorType}.${sensorName}'. Using default value ''.`, msg);\n            sensorDeployment.bearing = '';\n          }\n        }\n      } else {\n        msg.payload.sensors[sensorType][sensorName].deployment = { ...msg.payload.deployment };\n      }\n    }\n  }\n}\n\n//time\nmsg.payload.time.npt_set === false ? false : true;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 340,
        "wires": [
            [
                "b0252bd49dc8e61d",
                "2fa46892748adc43"
            ]
        ]
    },
    {
        "id": "5ffb7c9c38b8c5b0",
        "type": "watch",
        "z": "3dae026ab340962a",
        "g": "4bbb9e24b5507a00",
        "name": "",
        "files": "/config/config.yml",
        "recursive": "",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "7e988d24a7912d71"
            ]
        ]
    },
    {
        "id": "8a6d4593a661c3df",
        "type": "sqlite",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "3cdbccf5dbcb1c4e"
            ]
        ]
    },
    {
        "id": "ff28acdecfc4ebb1",
        "type": "inject",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 900,
        "wires": [
            [
                "ba3b41519066f03a"
            ]
        ]
    },
    {
        "id": "751ff2049a663e9c",
        "type": "inject",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 940,
        "wires": [
            [
                "f111096594207360"
            ]
        ]
    },
    {
        "id": "3cdbccf5dbcb1c4e",
        "type": "debug",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "name": "sqlite select last 5 msgs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 940,
        "wires": []
    },
    {
        "id": "f6ecdd18d8e03f91",
        "type": "sqlite",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 380,
        "y": 560,
        "wires": [
            [
                "6d2f607b324415b4"
            ]
        ]
    },
    {
        "id": "f9a2f4f97e3ba1cf",
        "type": "inject",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 240,
        "y": 980,
        "wires": [
            [
                "c25adb99d55eb890"
            ]
        ]
    },
    {
        "id": "689b64c16a889e0a",
        "type": "function",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "capture deployment info, send diff sql queries",
        "func": "// msg.sqlActiveDeployments (sql query results, array of objects)\n// msg.sensors (sensorType.sensorName.properties)\n\nlet newArr = {};\nnewArr.updatedDeployment = [];\nnewArr.currentDeployment = [];\n\nconst sqlresults = msg.sqlActiveDeployments;\n\n//go through each sensor, see if new deployment configs (lat, lon, bearing) are different from previous deployment\nfor (const [sensorType, sensors] of Object.entries(msg.sensors)) {\n    for (const [sensorName, sensor] of Object.entries(sensors)) {\n        if (sensor.hasOwnProperty('enabled') && sensor.enabled === true) {\n            if (sensor.hasOwnProperty('deployment')) {\n                const sensorDeployment = sensor.deployment;\n\n                let newMsg = {};\n                newMsg.payload = {};\n                let updateMsg = {};\n                updateMsg.payload = {};\n                let mergedMsg = {};\n\n                let hasDifference = false;\n                newMsg.sqlSend = false;\n\n                //find matching sqlresult(s)\n                const sqlMatchObj = sqlresults.find(o => o.sensorName === sensorName);\n\n                if (sqlMatchObj) {\n                    //fields to check for differences\n                    [\"lat\", \"lon\", \"bearing\"].forEach(property => {\n                        if (sqlMatchObj[property] !== sensorDeployment[property]) {\n                            hasDifference = true;\n                        }\n                    });\n                }\n\n                //if new deployment, UPDATE old record's entryEndDateTime \n                if (hasDifference) {\n                    updateMsg.payload.id = sqlMatchObj.id;\n                    updateMsg.payload.entryEndDateTime = (new Date()).getTime();\n\n                    //send update query, updateMsg\n                    updateMsg.topic = `UPDATE deployment SET entryEndDateTime = ${updateMsg.payload.entryEndDateTime} WHERE id = '${updateMsg.payload.id}'`;\n                    updateMsg.sqlSend = true;\n                    node.send(updateMsg);\n                    mergedMsg = {...updateMsg.payload, ...sqlMatchObj};\n                    newArr.updatedDeployment.push(mergedMsg);\n                }\n\n                //if new deployment from difference or non-existing, and add new record\n                if (hasDifference || !sqlMatchObj) {\n                    const newDateTime = new Date();\n                    newMsg.payload.id = newDateTime.getTime() + '-' + Math.floor(Math.random() * 0xFFFFFFFF).toString(16).padStart(8, '0') + '-d';\n                    newMsg.payload.entryStartDateTime = newDateTime.getTime();\n                    newMsg.payload.entryEndDateTime = '';\n                    newMsg.payload.lat = sensorDeployment[\"lat\"];\n                    newMsg.payload.lon = sensorDeployment[\"lon\"];\n                    newMsg.payload.bearing = sensorDeployment[\"bearing\"];\n                    newMsg.payload.sensorType = sensorType;\n                    newMsg.payload.sensorName = sensorName;\n                    newMsg.payload.deviceName = global.get(\"deviceAttributes.deviceName\");\n                    //send add record query, newPayload\n                    newMsg.topic = `INSERT INTO deployment (id, entryStartDateTime, lat, lon, bearing, sensorType, sensorName, deviceName) VALUES ('${newMsg.payload.id}', ${newMsg.payload.entryStartDateTime}, ${newMsg.payload.lat}, ${newMsg.payload.lon}, '${newMsg.payload.bearing}', '${newMsg.payload.sensorType}', '${newMsg.payload.sensorName}', '${newMsg.payload.deviceName}')`;\n                    newMsg.sqlSend = true;\n                    node.send(newMsg);\n\n                    //update config with id\n                    global.set(`config.sensors.${sensorType}.${sensorName}.deployment.id`, newMsg.payload.id);\n                }\n                //deployment already exists, no change\n                else {\n                    newMsg.payload = sqlMatchObj;\n                    global.set(`config.sensors.${sensorType}.${sensorName}.deployment.id`, sqlMatchObj.id);\n                }\n                //collect all sensor info for output\n                newArr.currentDeployment.push(newMsg.payload);\n            }\n        }\n    }\n}\n\nmsg = {};\nmsg.payload = newArr;\n\nnode.done();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 640,
        "wires": [
            [
                "24efdc7f1231f7f0"
            ]
        ]
    },
    {
        "id": "bc398ad5de3bd112",
        "type": "sqlite",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 880,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "6d2f607b324415b4",
        "type": "change",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sqlActiveDeployments",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 600,
        "wires": [
            [
                "689b64c16a889e0a"
            ]
        ]
    },
    {
        "id": "24efdc7f1231f7f0",
        "type": "switch",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "submit sql or final payload?",
        "property": "sqlSend",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 680,
        "wires": [
            [
                "bc398ad5de3bd112"
            ],
            [
                "05c37560dd57ea90"
            ]
        ]
    },
    {
        "id": "1ba33a74f2d3a680",
        "type": "link out",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "deployment current info link out",
        "mode": "link",
        "links": [
            "8768b75dbfee3973",
            "8a83d59ee0db1198"
        ],
        "x": 785,
        "y": 740,
        "wires": []
    },
    {
        "id": "ac8b2de05ec27001",
        "type": "change",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sensors",
                "pt": "msg",
                "to": "msg.payload.sensors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 480,
        "wires": [
            [
                "696c3a7b0b83f7b5"
            ]
        ]
    },
    {
        "id": "696c3a7b0b83f7b5",
        "type": "template",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "query latest active deployments",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT id, entryStartDateTime, lat, lon, bearing, sensorType, sensorName, deviceName\nFROM deployment\nWHERE entryStartDateTime IN(\n  SELECT MAX(entryStartDateTime)\n  FROM deployment\n  WHERE entryEndDateTime IS NULL\n  GROUP BY sensorName, deviceName\n)\nORDER BY sensorName, deviceName;\n",
        "output": "str",
        "x": 290,
        "y": 520,
        "wires": [
            [
                "f6ecdd18d8e03f91"
            ]
        ]
    },
    {
        "id": "ba3b41519066f03a",
        "type": "template",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "name": "create table deployment",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS deployment (\n    id TEXT PRIMARY KEY, \n    entryStartDateTime REAL, \n    entryEndDateTime REAL, \n    lat REAL, \n    lon REAL, \n    bearing TEXT, \n    sensorType TEXT, \n    sensorName TEXT, \n    deviceName TEXT\n    );",
        "output": "str",
        "x": 530,
        "y": 900,
        "wires": [
            [
                "8a6d4593a661c3df"
            ]
        ]
    },
    {
        "id": "f111096594207360",
        "type": "template",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "name": "select latest 5 rows from deployment",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM deployment \nORDER BY entryStartDateTime DESC \nLIMIT 5;",
        "output": "str",
        "x": 490,
        "y": 940,
        "wires": [
            [
                "8a6d4593a661c3df"
            ]
        ]
    },
    {
        "id": "c25adb99d55eb890",
        "type": "template",
        "z": "3dae026ab340962a",
        "g": "a2b2e69319628779",
        "name": "select latest active deployments",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT id, entryStartDateTime, lat, lon, bearing, sensorType, sensorName, deviceName\nFROM deployment\nWHERE entryStartDateTime IN(\n  SELECT MAX(entryStartDateTime)\n  FROM deployment\n  WHERE entryEndDateTime IS NULL\n  GROUP BY sensorName, deviceName\n)\nORDER BY sensorName, deviceName;\n",
        "output": "str",
        "x": 510,
        "y": 980,
        "wires": [
            [
                "8a6d4593a661c3df"
            ]
        ]
    },
    {
        "id": "2fa46892748adc43",
        "type": "link out",
        "z": "3dae026ab340962a",
        "g": "4bbb9e24b5507a00",
        "name": "init-config link out",
        "mode": "link",
        "links": [
            "c49d311e5668de52"
        ],
        "x": 865,
        "y": 340,
        "wires": []
    },
    {
        "id": "17455485af2d8cfc",
        "type": "debug",
        "z": "3dae026ab340962a",
        "g": "8004ba7ad5a9bd83",
        "name": "latest deployment info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 780,
        "wires": []
    },
    {
        "id": "0612ca7936dee14a",
        "type": "comment",
        "z": "1c71c8f26f5b7b19",
        "name": "AN-10 API Interface",
        "info": "https://omnipresense.com/wp-content/uploads/2023/11/AN-010-Z_API_Interface.pdf",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "31581da0d3b6358a",
        "type": "json",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1390,
        "y": 120,
        "wires": [
            [
                "fbf61ec935e282ae"
            ]
        ]
    },
    {
        "id": "7d83424b6bf3a7a7",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "name": "debug-radar-all-output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 360,
        "wires": []
    },
    {
        "id": "f04e243ae46cc4c3",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "debug-write-radar-key-valid-TimedSpeedCounts",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1040,
        "wires": []
    },
    {
        "id": "926ac6db07adc540",
        "type": "serial in",
        "z": "1c71c8f26f5b7b19",
        "name": "receive RADAR_00",
        "serial": "6739e78652771a41",
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "c744236bdcd86cf3"
            ]
        ]
    },
    {
        "id": "7c7577ee1b447bf6",
        "type": "serial out",
        "z": "1c71c8f26f5b7b19",
        "name": "send to RADAR_00",
        "serial": "6739e78652771a41",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "7139490bca7e56ca",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "debug-radar-write-DetectObjectVelocity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 780,
        "wires": []
    },
    {
        "id": "73557c788f221c0c",
        "type": "catch",
        "z": "1c71c8f26f5b7b19",
        "name": "catch - flow-radar",
        "scope": null,
        "uncaught": false,
        "x": 380,
        "y": 40,
        "wires": [
            [
                "b4a2dfa4fb680a57"
            ]
        ]
    },
    {
        "id": "b4a2dfa4fb680a57",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "name": "catch - flow-radar",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 40,
        "wires": []
    },
    {
        "id": "6a21bd2e9204bac0",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "query all settings, manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "4",
        "topic": "",
        "x": 210,
        "y": 480,
        "wires": [
            [
                "3e9d121913d7feae"
            ]
        ]
    },
    {
        "id": "0cdaafdd0b8921be",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "name": "init: set radar time (in seconds), repeat 60-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "payload": "\"C=\" & $ceil($millis()/1000) & \"\\n\"",
        "payloadType": "jsonata",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "05a58d9ee463c696"
            ]
        ]
    },
    {
        "id": "561dcf614bf5d56a",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "name": "init: PI, idle power mode, manual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"PI\"",
        "payloadType": "jsonata",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "05a58d9ee463c696"
            ]
        ]
    },
    {
        "id": "314e74cc3f8d050c",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "radar payload key type",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "DetectedObjectVelocity",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "TimedSpeedCounts",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "speed",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "dir",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "classifier",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 180,
        "y": 780,
        "wires": [
            [
                "3faf0dcbc24ef11c"
            ],
            [
                "de7bc8103f7ca3c6"
            ],
            [
                "a489601d43802b82"
            ],
            [
                "9b57af73505cbb61"
            ],
            [
                "8e8edd5176fc9a71"
            ]
        ]
    },
    {
        "id": "16572734c7e02e30",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "debug-radar-raws-speeds-write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ca182659939320ce",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1280,
        "y": 860,
        "wires": [
            [
                "5514c5ab4bed552c"
            ]
        ]
    },
    {
        "id": "7c9292601a625445",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 860,
        "wires": [
            [
                "1ef2418fe536aad5"
            ]
        ]
    },
    {
        "id": "1867db9744bd3c1f",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 900,
        "wires": [
            [
                "1db11b98d771c791"
            ]
        ]
    },
    {
        "id": "5514c5ab4bed552c",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "debug: last 5 rows radar_dov",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 900,
        "wires": []
    },
    {
        "id": "c6fcbfb9341f189b",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_dov (time, unit, direction, velocity, radarName, deployment_id) \nVALUES ($time, $unit, $direction, $velocity, $radarName, $deployment_id);\n",
        "name": "",
        "x": 1280,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "1acba66197b7b0fa",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "write params for radar_dov insert",
        "func": "//convert DetectedObjectVelocity to velocity for insertion\nmsg.payload.velocity = msg.payload.DetectedObjectVelocity;\ndelete msg.payload.DetectedObjectVelocity;\n\n//add deployment_id, no, change in previous node\n//msg.payload.deployment_id = global.get(`config.radars.${msg.payload.radarName}.deployment.id`, \"config\");\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 740,
        "wires": [
            [
                "c6fcbfb9341f189b"
            ]
        ]
    },
    {
        "id": "50dcead7cf35b74f",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1280,
        "y": 1120,
        "wires": [
            [
                "866e0c814ea2b4da"
            ]
        ]
    },
    {
        "id": "c44b652eda2b8a8c",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 1120,
        "wires": [
            [
                "f9a458c786e4bb84"
            ]
        ]
    },
    {
        "id": "a198505b2b0fd7c1",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 1160,
        "wires": [
            [
                "8ccadc734d8ab769"
            ]
        ]
    },
    {
        "id": "866e0c814ea2b4da",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "debug: last 5 rows radar_timedspeedcounts",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1160,
        "wires": []
    },
    {
        "id": "cbe24d38e9f03394",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "write params for radar_timedspeedcounts insert",
        "func": "const newPayload = {\n    time: msg.payload.TimedSpeedCounts.time,\n    direction: msg.payload.TimedSpeedCounts.direction,\n    units: msg.payload.TimedSpeedCounts.units,\n    count: msg.payload.TimedSpeedCounts.count,\n    average: msg.payload.TimedSpeedCounts.average,\n    radarName: msg.payload.radarName,\n    deployment_id: msg.payload.deployment_id\n}\n\nmsg.payload = newPayload;\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1000,
        "wires": [
            [
                "22234193104332f6"
            ]
        ]
    },
    {
        "id": "22234193104332f6",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_timed_speed_counts (time, direction, units, count, average, radarName, deployment_id)\nVALUES ($time, $direction, $units, $count, $average, $radarName, $deployment_id);\n",
        "name": "",
        "x": 1280,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "a3dddf65b65ca371",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1280,
        "y": 1380,
        "wires": [
            [
                "9de4885ad8ef8485"
            ]
        ]
    },
    {
        "id": "9ba47db34d626ef9",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 1380,
        "wires": [
            [
                "8d4953609399d75e"
            ]
        ]
    },
    {
        "id": "74df2509f68a2d6e",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 1420,
        "wires": [
            [
                "2aac5b4f344a86e8"
            ]
        ]
    },
    {
        "id": "9de4885ad8ef8485",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "debug: last 5 rows radar_raw_speed_magnitude",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1420,
        "wires": []
    },
    {
        "id": "81522ee190374834",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_raw_speed_magnitude (time, unit, magnitude, speed, radarName, deployment_id) \nVALUES ($time, $unit, $magnitude, $speed, $radarName, $deployment_id);",
        "name": "",
        "x": 1280,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "7e4a607265a272c2",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "write params for radar_raw_speed_magnitude insert",
        "func": "\nmsg.payload.magnitude = `${JSON.stringify(msg.payload.magnitude)}`; //array, wrap in single quote for sqlite insert as text\nmsg.payload.speed = `${JSON.stringify(msg.payload.speed)}`; //array, wrap in single quote for sqlite insert as text\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1260,
        "wires": [
            [
                "81522ee190374834"
            ]
        ]
    },
    {
        "id": "a3924864154eaefb",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1280,
        "y": 1680,
        "wires": [
            [
                "cdc947bb9cd47c63"
            ]
        ]
    },
    {
        "id": "a8dff32b84fbd72a",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 1680,
        "wires": [
            [
                "a18940845d6c5a2e"
            ]
        ]
    },
    {
        "id": "8773b251c9ee9539",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 1720,
        "wires": [
            [
                "303ea9d25d718231"
            ]
        ]
    },
    {
        "id": "cdc947bb9cd47c63",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "debug: last 5 rows radar_raw_speed_magnitude_single",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 1720,
        "wires": []
    },
    {
        "id": "252e2f5b95aeb8da",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_raw_speed_magnitude_single (time, unit, magnitude, speed, radarName, deployment_id) \nVALUES ($time, $unit, $magnitude, $speed, $radarName, $deployment_id);",
        "name": "",
        "x": 1280,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "83065a55697cc160",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "write params for radar_raw_speed_magnitude_single insert",
        "func": "\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1580,
        "wires": [
            [
                "252e2f5b95aeb8da"
            ]
        ]
    },
    {
        "id": "fb779ea25c6cdfb5",
        "type": "link in",
        "z": "1c71c8f26f5b7b19",
        "name": "query OPS",
        "links": [],
        "x": 335,
        "y": 80,
        "wires": [
            [
                "998194b1b9bc29ba"
            ]
        ]
    },
    {
        "id": "01307f2f13f465f2",
        "type": "link out",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "radar_dov link out",
        "mode": "link",
        "links": [
            "fee85b1886270ac6"
        ],
        "x": 475,
        "y": 820,
        "wires": []
    },
    {
        "id": "95186b0fee06a3f5",
        "type": "link out",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "radar_raw_speed_magnitude_single link out",
        "mode": "link",
        "links": [
            "0124afc74d86b533"
        ],
        "x": 535,
        "y": 1640,
        "wires": []
    },
    {
        "id": "080fd00489701aa1",
        "type": "link out",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "radar_raw_speed_magnitude link out",
        "mode": "link",
        "links": [
            "fc5e2cd719fa680a"
        ],
        "x": 475,
        "y": 1340,
        "wires": []
    },
    {
        "id": "4094c101f6b59d95",
        "type": "link out",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "radar_timedspeedcounts link out",
        "mode": "link",
        "links": [
            "087588593911f398"
        ],
        "x": 475,
        "y": 1080,
        "wires": []
    },
    {
        "id": "07cdbeafa34a565e",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "manually take top 1 speed, magnitude (effectively O1)",
        "func": "\nmsg.payload.magnitude = msg.payload.magnitude[0]; //array, wrap in single quote for sqlite insert as text\nmsg.payload.speed = msg.payload.speed[0]; //array, wrap in single quote for sqlite insert as text\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1540,
        "wires": [
            [
                "83065a55697cc160",
                "95186b0fee06a3f5"
            ]
        ]
    },
    {
        "id": "fbf61ec935e282ae",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.radarName",
                "pt": "msg",
                "to": "TM_RADAR_SERIAL_PORT_00",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.deployment_id",
                "pt": "msg",
                "to": "config.sensors.radars.TM_RADAR_SERIAL_PORT_00.deployment.id",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 120,
        "wires": [
            [
                "05e485cfcada03a3"
            ]
        ]
    },
    {
        "id": "97c84e89eb5bd113",
        "type": "serial out",
        "z": "1c71c8f26f5b7b19",
        "name": "send to RADAR_01",
        "serial": "d4f8fcd8e734b75f",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "3b4f896b6f34c759",
        "type": "serial out",
        "z": "1c71c8f26f5b7b19",
        "name": "send to RADAR_02",
        "serial": "8fcc984759daf862",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "1ad62db35274c50d",
        "type": "serial out",
        "z": "1c71c8f26f5b7b19",
        "name": "send to RADAR_03",
        "serial": "9436149d39191450",
        "x": 890,
        "y": 360,
        "wires": []
    },
    {
        "id": "917b8f4b46895cee",
        "type": "serial in",
        "z": "1c71c8f26f5b7b19",
        "name": "receive RADAR_01",
        "serial": "d4f8fcd8e734b75f",
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "b9d0ad874b671281"
            ]
        ]
    },
    {
        "id": "0d53bc6696f96c48",
        "type": "json",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1390,
        "y": 200,
        "wires": [
            [
                "5ca9d7d0dac757f4"
            ]
        ]
    },
    {
        "id": "5ca9d7d0dac757f4",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.radarName",
                "pt": "msg",
                "to": "TM_RADAR_SERIAL_PORT_01",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.deployment_id",
                "pt": "msg",
                "to": "config.sensors.radars.TM_RADAR_SERIAL_PORT_01.deployment.id",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 200,
        "wires": [
            [
                "05e485cfcada03a3"
            ]
        ]
    },
    {
        "id": "9353b933e36e8b9e",
        "type": "serial in",
        "z": "1c71c8f26f5b7b19",
        "name": "receive RADAR_02",
        "serial": "8fcc984759daf862",
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "c733b3b6871f335b"
            ]
        ]
    },
    {
        "id": "9e504ae365417be4",
        "type": "json",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1390,
        "y": 280,
        "wires": [
            [
                "787b21d91c5a25b1"
            ]
        ]
    },
    {
        "id": "787b21d91c5a25b1",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.radarName",
                "pt": "msg",
                "to": "TM_RADAR_SERIAL_PORT_02",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.deployment_id",
                "pt": "msg",
                "to": "config.sensors.radars.TM_RADAR_SERIAL_PORT_02.deployment.id",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 280,
        "wires": [
            [
                "05e485cfcada03a3"
            ]
        ]
    },
    {
        "id": "e221212a505a78ac",
        "type": "serial in",
        "z": "1c71c8f26f5b7b19",
        "name": "receive RADAR_03",
        "serial": "9436149d39191450",
        "x": 1090,
        "y": 360,
        "wires": [
            [
                "be612a06e6fce8b1"
            ]
        ]
    },
    {
        "id": "1d905e0c54b723b5",
        "type": "json",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1390,
        "y": 360,
        "wires": [
            [
                "9c5feff0083f6fef"
            ]
        ]
    },
    {
        "id": "9c5feff0083f6fef",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.radarName",
                "pt": "msg",
                "to": "TM_RADAR_SERIAL_PORT_03",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.deployment_id",
                "pt": "msg",
                "to": "config.sensors.radars.TM_RADAR_SERIAL_PORT_03.deployment.id",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 360,
        "wires": [
            [
                "05e485cfcada03a3"
            ]
        ]
    },
    {
        "id": "c744236bdcd86cf3",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "#:(config)::config.sensors.radars.TM_RADAR_SERIAL_PORT_00.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1260,
        "y": 120,
        "wires": [
            [
                "31581da0d3b6358a"
            ]
        ]
    },
    {
        "id": "b9d0ad874b671281",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "#:(config)::config.sensors.radars.TM_RADAR_SERIAL_PORT_01.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1260,
        "y": 200,
        "wires": [
            [
                "0d53bc6696f96c48"
            ]
        ]
    },
    {
        "id": "c733b3b6871f335b",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "#:(config)::config.sensors.radars.TM_RADAR_SERIAL_PORT_02.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1260,
        "y": 280,
        "wires": [
            [
                "9e504ae365417be4"
            ]
        ]
    },
    {
        "id": "be612a06e6fce8b1",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "#:(config)::config.sensors.radars.TM_RADAR_SERIAL_PORT_03.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1260,
        "y": 360,
        "wires": [
            [
                "1d905e0c54b723b5"
            ]
        ]
    },
    {
        "id": "998194b1b9bc29ba",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "config.sensors.radars.TM_RADAR_SERIAL_PORT_00.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 120,
        "wires": [
            [
                "7c7577ee1b447bf6"
            ],
            [
                "17f2bd782fa7cc56"
            ]
        ]
    },
    {
        "id": "6603f07036f13602",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "config.sensors.radars.TM_RADAR_SERIAL_PORT_01.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "97c84e89eb5bd113"
            ],
            [
                "066f88dde7da13c1"
            ]
        ]
    },
    {
        "id": "99c67a76992c8de8",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "config.sensors.radars.TM_RADAR_SERIAL_PORT_02.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 280,
        "wires": [
            [
                "3b4f896b6f34c759"
            ],
            [
                "1541dc8a3c363ce5"
            ]
        ]
    },
    {
        "id": "2ea13e7fb927749d",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "enabled?",
        "property": "config.sensors.radars.TM_RADAR_SERIAL_PORT_03.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 360,
        "wires": [
            [
                "1ad62db35274c50d"
            ],
            [
                "975c56420517a092"
            ]
        ]
    },
    {
        "id": "17f2bd782fa7cc56",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "set PI mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"PI\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "7c7577ee1b447bf6"
            ]
        ]
    },
    {
        "id": "066f88dde7da13c1",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "set PI mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"PI\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 240,
        "wires": [
            [
                "97c84e89eb5bd113"
            ]
        ]
    },
    {
        "id": "1541dc8a3c363ce5",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "set PI mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"PI\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 320,
        "wires": [
            [
                "3b4f896b6f34c759"
            ]
        ]
    },
    {
        "id": "975c56420517a092",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "name": "set PI mode",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"PI\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 400,
        "wires": [
            [
                "1ad62db35274c50d"
            ]
        ]
    },
    {
        "id": "1ef2418fe536aad5",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "create radar_dov table",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS radar_dov (\n    time REAL, \n    unit TEXT, \n    direction TEXT, \n    velocity REAL, \n    radarName TEXT, \n    deployment_id TEXT\n    );",
        "output": "str",
        "x": 940,
        "y": 860,
        "wires": [
            [
                "ca182659939320ce"
            ]
        ]
    },
    {
        "id": "1db11b98d771c791",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "1eebfe6a2eca8ad4",
        "name": "select latest 5 rows from radar_dov",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM radar_dov \nORDER BY time DESC \nLIMIT 5;",
        "output": "str",
        "x": 900,
        "y": 900,
        "wires": [
            [
                "ca182659939320ce"
            ]
        ]
    },
    {
        "id": "f9a458c786e4bb84",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "create radar_timedspeedcounts table",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS radar_timed_speed_counts (\n    time REAL, \n    direction TEXT, \n    units TEXT, \n    count INTEGER, \n    average REAL, \n    radarName TEXT, \n    deployment_id TEXT\n);",
        "output": "str",
        "x": 890,
        "y": 1120,
        "wires": [
            [
                "50dcead7cf35b74f"
            ]
        ]
    },
    {
        "id": "8ccadc734d8ab769",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "dea1b8828f8e501f",
        "name": "select latest 5 rows from radar_timedspeedcounts",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM radar_timed_speed_counts \nORDER BY time DESC \nLIMIT 5;",
        "output": "str",
        "x": 850,
        "y": 1160,
        "wires": [
            [
                "50dcead7cf35b74f"
            ]
        ]
    },
    {
        "id": "8d4953609399d75e",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "create radar_raw_speed_magnitude table",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS radar_raw_speed_magnitude (\n    time REAL, \n    unit TEXT, \n    magnitude TEXT, \n    speed TEXT, \n    radarName TEXT, \n    deployment_id TEXT\n    );",
        "output": "str",
        "x": 880,
        "y": 1380,
        "wires": [
            [
                "a3dddf65b65ca371"
            ]
        ]
    },
    {
        "id": "2aac5b4f344a86e8",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "047f05d7650ba3cc",
        "name": "select latest 5 rows from radar_raw_speed_magnitude",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM radar_raw_speed_magnitude \nORDER BY time DESC \nLIMIT 5;",
        "output": "str",
        "x": 840,
        "y": 1420,
        "wires": [
            [
                "a3dddf65b65ca371"
            ]
        ]
    },
    {
        "id": "303ea9d25d718231",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "select latest 5 rows from radar_raw_speed_magnitude_single",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM radar_raw_speed_magnitude_single \nORDER BY time DESC \nLIMIT 5;",
        "output": "str",
        "x": 860,
        "y": 1720,
        "wires": [
            [
                "a3924864154eaefb"
            ]
        ]
    },
    {
        "id": "a18940845d6c5a2e",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "fcbf8999ca05a371",
        "name": "create radar_raw_speed_magnitude_single table",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS radar_raw_speed_magnitude_single (\n    time REAL, \n    unit TEXT, \n    magnitude REAL, \n    speed REAL, \n    radarName TEXT, \n    deployment_id TEXT\n    );",
        "output": "str",
        "x": 890,
        "y": 1680,
        "wires": [
            [
                "a3924864154eaefb"
            ]
        ]
    },
    {
        "id": "ca4ed8761a4ded27",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "radar_oc_payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1860,
        "wires": []
    },
    {
        "id": "fbde266909bc0ca7",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 1980,
        "wires": [
            [
                "1bdec3d0b912f792"
            ]
        ]
    },
    {
        "id": "09369d5e4816364f",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO radar_oc_payload (end_time, start_time, delta_time_msec, dir, frames, max_mph, min_mph, max_mag, avg_mag, frames_per_mph, length_ft)\nVALUES ($end_time, $start_time, $delta_time_msec, $dir, $frames, $max_mph, $min_mph, $max_mag, $avg_mag, $frames_per_mph, $length_ft);",
        "name": "",
        "x": 1280,
        "y": 1980,
        "wires": [
            [
                "45801cdcc5094abc"
            ]
        ]
    },
    {
        "id": "4ffa919935494b14",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 2020,
        "wires": [
            [
                "07d558da50af5ae4"
            ]
        ]
    },
    {
        "id": "45801cdcc5094abc",
        "type": "debug",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "debug: last 5 rows radar_oc_payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 2020,
        "wires": []
    },
    {
        "id": "6e30f911242c5595",
        "type": "sqlite",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_oc_payload (start_time, end_time, delta_time_msec, direction, frames_count, velocity_max, velocity_min, magnitude_max, magnitude_mean, velocity_change, frames_per_velocity, object_length, units, object_label, radarName, deployment_id)\nVALUES ($start_time, $end_time, $delta_time_msec, $direction, $frames_count, $velocity_max, $velocity_min, $magnitude_max, $magnitude_mean, $velocity_change, $frames_per_velocity, $object_length, $units, $object_label, $radarName, $deployment_id);",
        "name": "",
        "x": 1280,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "edcc237df962c31a",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "write params for radar_oc_payload insert",
        "func": "\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1820,
        "wires": [
            [
                "6e30f911242c5595"
            ]
        ]
    },
    {
        "id": "59a9c9a7ba535641",
        "type": "link out",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "radar_oc_payload link out",
        "mode": "link",
        "links": [
            "e05e91362c933e94"
        ],
        "x": 735,
        "y": 1900,
        "wires": []
    },
    {
        "id": "07d558da50af5ae4",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "select latest 5 rows from radar_oc_payload",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM radar_oc_payload \nORDER BY end_time DESC \nLIMIT 5;",
        "output": "str",
        "x": 870,
        "y": 2020,
        "wires": [
            [
                "09369d5e4816364f"
            ]
        ]
    },
    {
        "id": "1bdec3d0b912f792",
        "type": "template",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "create radar_oc_payload table",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS radar_oc_payload (\n    start_time REAL,\n    end_time REAL,\n    delta_time_msec REAL,\n    direction TEXT,\n    frames_count REAL,\n    velocity_max REAL,\n    velocity_min REAL,\n    magnitude_max REAL,\n    magnitude_mean REAL,\n    velocity_change REAL,\n    frames_per_velocity REAL,\n    object_length REAL,\n    units TEXT,\n    object_label TEXT,\n    radarName TEXT,\n    deployment_id TEXT\n);",
        "output": "str",
        "x": 910,
        "y": 1980,
        "wires": [
            [
                "09369d5e4816364f"
            ]
        ]
    },
    {
        "id": "9b57af73505cbb61",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "dir",
        "func": "const newPayload = {\n    start_time: msg.payload.start_time,\n    end_time: msg.payload.end_time,\n    delta_time_msec: msg.payload.delta_time_msec,\n    direction: msg.payload.dir == \"OUT\" ? \"outbound\" : msg.payload.dir == \"IN\" ? \"inbound\" : null,\n    frames_count: msg.payload.frames,\n    velocity_max: msg.payload.max_mps !== undefined ? msg.payload.max_mps : msg.payload.max_mph !== undefined ? msg.payload.max_mph : null,\n    velocity_min: msg.payload.min_mps !== undefined ? msg.payload.min_mps : msg.payload.min_mph !== undefined ? msg.payload.min_mph : null,\n    magnitude_max: msg.payload.max_mag,\n    magnitude_mean: msg.payload.avg_mag,\n    velocity_change: null,\n    frames_per_velocity: msg.payload.frames_per_mps !== undefined ? msg.payload.frames_per_mps : msg.payload.frames_per_mph !== undefined ? msg.payload.frames_per_mph : null,\n    object_length: msg.payload.length_m !== undefined ? msg.payload.length_m : msg.payload.length_ft !== undefined ? msg.payload.length_ft : null,\n    units: msg.payload.max_mps !== undefined ? \"metric\" : msg.payload.max_mph !== undefined ? \"imperial\" : null,\n    object_label: null,\n    radarName: msg.payload.radarName,\n    deployment_id: msg.payload.deployment_id\n};\n\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1820,
        "wires": [
            [
                "14ec91d93285b0fb"
            ]
        ]
    },
    {
        "id": "8e8edd5176fc9a71",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "classifier",
        "func": "const newPayload = {\n    start_time: msg.payload.start_time,\n    end_time: msg.payload.end_time,\n    delta_time_msec: msg.payload.delta_time_msec,\n    direction: msg.payload.classifier == \"object_outbound\" ? \"outbound\" : msg.payload.classifier == \"object_inbound\" ? \"inbound\" : null,\n    frames_count: msg.payload.total_frames,\n    velocity_max: msg.payload.max_speed_mps !== undefined ? msg.payload.max_speed_mps : msg.payload.max_speed_mph !== undefined ? msg.payload.max_speed_mph : null,\n    velocity_min: msg.payload.min_speed_mps !== undefined ? msg.payload.min_speed_mps : msg.payload.min_speed_mph !== undefined ? msg.payload.min_speed_mph : null,\n    magnitude_max: msg.payload.max_magnitude,\n    magnitude_mean: msg.payload.avg_magnitude,\n    velocity_change: msg.payload.speed_change,\n    frames_per_velocity: msg.payload.frames_per_mps !== undefined ? msg.payload.frames_per_mps : msg.payload.frames_per_mph !== undefined ? msg.payload.frames_per_mph : null,\n    object_length: msg.payload.length_m !== undefined ? msg.payload.length_m : msg.payload.length_ft !== undefined ? msg.payload.length_ft : null,\n    units: msg.payload.max_speed_mps !== undefined ? \"metric\" : msg.payload.max_speed_mph !== undefined ? \"imperial\" : null,\n    object_label: null,\n    radarName: msg.payload.radarName,\n    deployment_id: msg.payload.deployment_id\n};\n\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1860,
        "wires": [
            [
                "14ec91d93285b0fb"
            ]
        ]
    },
    {
        "id": "c113788ccfa879b4",
        "type": "join",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload.radarName",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1930,
        "y": 520,
        "wires": [
            [
                "59d61701c38da429"
            ]
        ]
    },
    {
        "id": "ae11d5c9948bf4e1",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "set flow.radarCollectInfo = false, complete",
        "rules": [
            {
                "t": "set",
                "p": "radarCollectInfo",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 520,
        "wires": [
            [
                "c113788ccfa879b4"
            ]
        ]
    },
    {
        "id": "c4a024def66c8499",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "set flow.radarCollectInfo = true, reset",
        "rules": [
            {
                "t": "set",
                "p": "radarCollectInfo",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 520,
        "wires": [
            [
                "05a58d9ee463c696",
                "c113788ccfa879b4"
            ]
        ]
    },
    {
        "id": "0abd83310c35db9a",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "radarCollectInfo?",
        "property": "radarCollectInfo",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1870,
        "y": 480,
        "wires": [
            [
                "c113788ccfa879b4"
            ]
        ]
    },
    {
        "id": "59d61701c38da429",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "create radarInfo payload",
        "func": "//iterate through array\n// top-level key radarName, list of key:values\n\nconst result = msg.payload.reduce((acc, current) => {\n    const radarName = current.radarName;\n    delete current.radarName;\n    if (!acc[radarName]) {\n        acc[radarName] = current;\n    }\n    Object.assign(acc[radarName], current);\n    return acc;\n}, {});\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 520,
        "wires": [
            [
                "9e95f569494a21dc",
                "50c56047654010ea"
            ]
        ]
    },
    {
        "id": "9e95f569494a21dc",
        "type": "change",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "deviceAttributes.radarInfo",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2400,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "50c56047654010ea",
        "type": "link out",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "radarInfo link out",
        "mode": "link",
        "links": [
            "66bace5cf805a4fb"
        ],
        "x": 2275,
        "y": 520,
        "wires": []
    },
    {
        "id": "8c434de19f88fefc",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "init: query each setting, and clear buffer, takes ~9.0-sec",
        "func": "//send parameters to query, start with PI (idle) and end with PA (active)\n// required as a long string of these commands will sometimes not report back\n// clear buffer between each command with ctr+c (hex \\x03)\n\nmsg.complete = false;\n\nconst attribute_array = [\"PI\", \"?P\", \"?N\", \"?D\", \"?V\", \"?B\", \"??\", \"U?\", \"u?\", \"F?\", \"O?\", \"?F\", \"t?\", \"s?\", \"PA\"]\n\n// send each, clear it with ctr+c which is hex code 0x03\nconst hexCode = '\\x03'; // 0x03 hex code\nconst delay = 500; // 500 ms delay\nconst delay_short = 100;\n//500+100 = 600 ms per attribute\n\nnode.send({payload:hexCode});\nawait new Promise(resolve => setTimeout(resolve, delay_short));\n\nfor (let i = 0; i < attribute_array.length; i++) {\n    node.send({payload:attribute_array[i]});\n    await new Promise(resolve => setTimeout(resolve, delay));\n    node.send({payload:hexCode});\n    await new Promise(resolve => setTimeout(resolve, delay_short));\n}\n\nmsg.complete = true;\nnode.done();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 560,
        "wires": [
            [
                "05a58d9ee463c696",
                "7eb7b4b61d38b789"
            ]
        ]
    },
    {
        "id": "7eb7b4b61d38b789",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "g": "805c5feafbb3610b",
        "name": "complete?",
        "property": "complete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 560,
        "wires": [
            [
                "ae11d5c9948bf4e1"
            ]
        ]
    },
    {
        "id": "46e349af1bed1834",
        "type": "comment",
        "z": "1c71c8f26f5b7b19",
        "g": "da1c8c74261a93a4",
        "name": "payload varies by firmware version/build",
        "info": "",
        "x": 590,
        "y": 1940,
        "wires": []
    },
    {
        "id": "a0b880e68f9b7198",
        "type": "function",
        "z": "1c71c8f26f5b7b19",
        "name": "init: set initial settings, takes ~6.9-sec",
        "func": "//send parameters to query, start with PI (idle) and end with PA (active)\n// required as a long string of these commands will sometimes not report back\n// clear buffer between each command with ctr+c (hex \\x03)\n\nmsg.complete = false;\n\n// construct time zone elements\nconst date = new Date()\nconst offsetInMinutes = date.getTimezoneOffset()\nconst hours = Math.abs(Math.floor(offsetInMinutes / 60))\nconst minutes = Math.abs(offsetInMinutes % 60)\nconst offsetString = (offsetInMinutes >= 0 ? \"-\" : \"+\") +\n    hours.toString().padStart(2, '0') +\n    minutes.toString().padStart(2, '0')\n\nconst attribute_array = [\"PI\", \"OJ\", \"US\", \"F2\", \"S2\", \"K+\", \"IG\", \"ON\",\n    \"OU\", \"OT\", \"Oh\", \"Oc\",\n    \"@O\", \"@|300\\n\",\n    \"C=\" + Math.ceil(date.getTime()/1000) + \"\\n\",\n    \"CZ\" + \"GMT\" + offsetString + \"\\n\",\n    \"OM\", \"M>20\\n\", \"OS\", \"R>5\\n\", \"O3\",\n    \"PA\", \"A!\"\n]\n\n// send each, clear it with ctr+c which is hex code 0x03\nconst hexCode = '\\x03'; // 0x03 hex code\nconst delay = 200; // ms delay\nconst delay_short = 100;  //300 ms per attribute\n\nnode.send({ payload: hexCode });\nawait new Promise(resolve => setTimeout(resolve, delay_short));\n\nfor (let i = 0; i < attribute_array.length; i++) {\n    node.send({ payload: attribute_array[i] });\n    await new Promise(resolve => setTimeout(resolve, delay));\n    node.send({ payload: hexCode });\n    await new Promise(resolve => setTimeout(resolve, delay_short));\n}\n\nmsg.complete = true;\nnode.done();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            [
                "05a58d9ee463c696",
                "09952039b0ab86aa"
            ]
        ]
    },
    {
        "id": "7c8d64d25c65f351",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "name": "init: PA, active power mode, manual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "20",
        "topic": "",
        "payload": "\"PA\"",
        "payloadType": "jsonata",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "05a58d9ee463c696"
            ]
        ]
    },
    {
        "id": "cca525a755c918da",
        "type": "inject",
        "z": "1c71c8f26f5b7b19",
        "name": "init: set initial radar settings",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "a0b880e68f9b7198"
            ]
        ]
    },
    {
        "id": "09952039b0ab86aa",
        "type": "switch",
        "z": "1c71c8f26f5b7b19",
        "name": "complete?",
        "property": "complete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 280,
        "wires": [
            [
                "3e9d121913d7feae"
            ]
        ]
    },
    {
        "id": "f20c74c0ccfd256c",
        "type": "mqtt in",
        "z": "9269520ddb532b00",
        "g": "0a5faeac9fbd6d55",
        "name": "",
        "topic": "frigate/events",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a5d65dd0e3566daa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "86c86b0d82d13028",
                "2deec9d340d5ed26"
            ]
        ]
    },
    {
        "id": "86c86b0d82d13028",
        "type": "debug",
        "z": "9269520ddb532b00",
        "g": "0a5faeac9fbd6d55",
        "name": "debug: published frigate messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 140,
        "wires": []
    },
    {
        "id": "056bd6503d1c42c6",
        "type": "catch",
        "z": "9269520ddb532b00",
        "name": "catch - flow-mqtt",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "9fa6890312a00114"
            ]
        ]
    },
    {
        "id": "9fa6890312a00114",
        "type": "debug",
        "z": "9269520ddb532b00",
        "name": "catch - flow-mqtt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "2deec9d340d5ed26",
        "type": "switch",
        "z": "9269520ddb532b00",
        "g": "0a5faeac9fbd6d55",
        "name": "payload.type == \"end\"",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 240,
        "y": 200,
        "wires": [
            [
                "76911cc7f28e7da2"
            ]
        ]
    },
    {
        "id": "274f87c31437c2d7",
        "type": "link out",
        "z": "9269520ddb532b00",
        "g": "b7398c4e0bc743e5",
        "name": "event payload",
        "mode": "link",
        "links": [
            "c249329109ac17d5",
            "ed447e5f8becbfad"
        ],
        "x": 995,
        "y": 800,
        "wires": []
    },
    {
        "id": "76911cc7f28e7da2",
        "type": "change",
        "z": "9269520ddb532b00",
        "g": "0a5faeac9fbd6d55",
        "name": "set frigate_event from payload.after",
        "rules": [
            {
                "t": "set",
                "p": "frigate_event",
                "pt": "msg",
                "to": "payload.after",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 240,
        "wires": [
            [
                "8eaa1d06a29a5d2b"
            ]
        ]
    },
    {
        "id": "7992eb250ae9d20f",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "calculate direction based on frigate event zones",
        "func": "//pass all fields required for speed match to event\n\nconst myZoneNearIndex = msg.frigate_event.entered_zones.indexOf(\"zone_near\");\nconst myZoneFarIndex = msg.frigate_event.entered_zones.indexOf(\"zone_far\");\n\nmsg.frigate_event.calc_zone_direction = (myZoneNearIndex >= 0 && myZoneFarIndex >= 0) ? (myZoneFarIndex < myZoneNearIndex ? \"inbound\" : \"outbound\") : undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 440,
        "wires": [
            [
                "2c7c7df250289562"
            ]
        ]
    },
    {
        "id": "7f063afdbac396ce",
        "type": "switch",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "check if object entered ANY zone for radar",
        "property": "frigate_event.entered_zones",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "7992eb250ae9d20f"
            ],
            [
                "ad7393ac18c4083b"
            ]
        ]
    },
    {
        "id": "cbef8a3acc3d1495",
        "type": "change",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "set event_direction_speed",
        "rules": [
            {
                "t": "set",
                "p": "event_direction_speed",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "a8aeffd2e5bc17f2"
            ]
        ]
    },
    {
        "id": "ad7393ac18c4083b",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "skip camera direction calc AND radar lookup",
        "func": "//no speed\nconst newMsg = {};\n\nnewMsg.status_match_event_radar_direction = \"direction_speed_no_zones\"; \nnewMsg.status_radarMatch = false;\nnewMsg.calc_event_direction = undefined;\nnewMsg.calc_event_speed = undefined;\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 660,
        "wires": [
            [
                "cbef8a3acc3d1495"
            ]
        ]
    },
    {
        "id": "510b389597efaf1b",
        "type": "sqlite",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "d8786159d48401b9"
            ]
        ]
    },
    {
        "id": "b77bb1c374a198e4",
        "type": "inject",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "6b08c9332096b857"
            ]
        ]
    },
    {
        "id": "61d6a19c99c60e0b",
        "type": "sqlite",
        "z": "9269520ddb532b00",
        "g": "b7398c4e0bc743e5",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO events (id, camera, label, sub_label, top_score, frame_time, start_time, end_time, entered_zones, score, area, ratio, motionless_count, position_changes, attributes, direction_calc, speed_calc, provenance, deployment_id, radarName) \nVALUES ($id, $camera, $label, $sub_label, $top_score, $frame_time, $start_time, $end_time, json($entered_zones), $score, $area, $ratio, $motionless_count, $position_changes, json($attributes), $direction_calc, $speed_calc, $provenance, $deployment_id, $radarName);",
        "name": "tmdb.events, Prepared Statement",
        "x": 960,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "a96d834e3571c549",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "b7398c4e0bc743e5",
        "name": "write params for events insert",
        "func": "//JSON objects need to be text for SQLite\n\nmsg.payload.entered_zones = `${JSON.stringify(msg.payload.entered_zones)}`;\nmsg.payload.attributes = `${JSON.stringify(msg.payload.attributes)}`;\nmsg.payload.provenance = `${JSON.stringify(msg.payload.provenance)}`;\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 880,
        "wires": [
            [
                "61d6a19c99c60e0b"
            ]
        ]
    },
    {
        "id": "e256d5e89eb39332",
        "type": "inject",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "3731dfc3716b1167"
            ]
        ]
    },
    {
        "id": "d8786159d48401b9",
        "type": "debug",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "sqlite select last 5 msgs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7f0ef976c7b79245",
        "type": "debug",
        "z": "9269520ddb532b00",
        "g": "b7398c4e0bc743e5",
        "name": "composed tmdb.events message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 840,
        "wires": []
    },
    {
        "id": "b39062019fac1a66",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "pull speed, direction for event period",
        "func": "let query = `SELECT * \nFROM radar_dov \nWHERE time BETWEEN ${(Math.floor(msg.frigate_event.start_time) - 2)} AND ${(Math.ceil(msg.frigate_event.end_time) + 2)} \nAND radarName=\"${msg.frigate_event.radarName}\"\n;`;\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 480,
        "wires": [
            [
                "7f50d9d83bdb7f14"
            ]
        ]
    },
    {
        "id": "7f50d9d83bdb7f14",
        "type": "sqlite",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "query radar readings around event time",
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "c123fc5ed5e14e8a"
            ]
        ]
    },
    {
        "id": "c123fc5ed5e14e8a",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "calculate median per direction",
        "func": "const medianVelocityPerDirection = {};\n\n// Group the data by direction\nconst groupedData = msg.payload.reduce((acc, curr) => {\n  if (!acc[curr.direction]) {\n    acc[curr.direction] = [];\n  }\n  acc[curr.direction].push(curr);\n  return acc;\n}, {});\n\n// Calculate the median velocity for each direction\nfor (const direction in groupedData) {\n  if (groupedData.hasOwnProperty(direction)) {\n    const sortedVelocities = groupedData[direction].map(entry => entry.velocity).sort((a, b) => a - b);\n    const medianIndex = Math.floor(sortedVelocities.length / 2);\n    const medianVelocity =\n      sortedVelocities.length % 2 === 0\n        ? (sortedVelocities[medianIndex - 1] + sortedVelocities[medianIndex]) / 2\n        : sortedVelocities[medianIndex];\n    medianVelocityPerDirection[direction] = medianVelocity;\n  }\n}\n\nmsg.payload = medianVelocityPerDirection;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 560,
        "wires": [
            [
                "673e45159a2dfccf"
            ]
        ]
    },
    {
        "id": "673e45159a2dfccf",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "match radar speed to event, assign direction",
        "func": "const newMsg = {};\nnewMsg.radar_DetectedObjectVelocity_median = msg.payload;\n\nnewMsg.status_radarMatch = false;\n\n//if only 1 Radar.direction USE THAT\nif (Object.keys(msg.payload).length == 1) {\n    //  check if Event.calc_zone_direction MATCHES Radar.direction THEN good\n    if (msg.payload[msg.frigate_event.calc_zone_direction]) {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_match\";\n        newMsg.status_radarMatch = true;\n        newMsg.calc_event_direction = (msg.frigate_event.calc_zone_direction || undefined);\n        newMsg.calc_event_speed = msg.payload[msg.frigate_event.calc_zone_direction];\n    }\n    //  if Event.calc_zone_direction == undefined THEN use 1 that came through radar \n    else if (msg.frigate_event.calc_zone_direction == undefined) {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_assigned\";\n        newMsg.status_radarMatch = true;\n        newMsg.calc_event_direction = Object.keys(msg.payload)[0];\n        newMsg.calc_event_speed = msg.payload[Object.keys(msg.payload)[0]];\n    }\n}\n//  multiple radar directions, but if Event.calc_zone_direction MATCHES Radar.direction THEN good\nelse if ((Object.keys(msg.payload).length > 1)\n    && (msg.frigate_event.calc_zone_direction != undefined)) {\n\n    //find matching median value to frigate_event\n    if (msg.payload[msg.frigate_event.calc_zone_direction]) {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_match\";\n        newMsg.status_radarMatch = true;\n        newMsg.calc_event_direction = msg.frigate_event.calc_zone_direction;\n        newMsg.calc_event_speed = msg.payload[msg.frigate_event.calc_zone_direction];\n    }\n    else {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_mismatch\";\n        newMsg.status_radarMatch = false;\n        newMsg.calc_event_direction = undefined;\n        newMsg.calc_event_speed = undefined;\n    }\n}\n//      if == 0 Radar.direction DO NOT REPORT\nelse {\n        newMsg.status_match_event_radar_direction = \"no_radar_speed_detected\"; \n        newMsg.status_radarMatch = false;\n        newMsg.calc_event_direction = (msg.frigate_event.calc_zone_direction || undefined);\n        newMsg.calc_event_speed = undefined;\n    }\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "cbef8a3acc3d1495"
            ]
        ]
    },
    {
        "id": "8eaa1d06a29a5d2b",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "0a5faeac9fbd6d55",
        "name": "append config, deployment properties",
        "func": "// attach radarName, deployment_id, if applicable\n\nconst camera = global.get(`config.sensors.cameras.${msg.frigate_event.camera}`);\n\nmsg.radarEnabled = false;\n\nif (camera.hasOwnProperty('camera_radar')) {\n    //get radar settings\n    const radar = global.get(`config.sensors.radars.${camera.camera_radar}`);\n    if (radar.hasOwnProperty('enabled')) {\n        if (radar.enabled === true) {\n            msg.frigate_event.radarName = camera.camera_radar;\n            msg.radarEnabled = true;\n        }\n    }\n}\n\nif (camera.hasOwnProperty('deployment')) {\n    msg.frigate_event.deployment_id = camera.deployment.id;\n}\n//indicate if camera is enabled in TM for capture (may still be on in Frigate)\nif (camera.hasOwnProperty('enabled')) {\n    msg.enabled = camera.enabled;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "627ba0f672680054"
            ]
        ]
    },
    {
        "id": "627ba0f672680054",
        "type": "switch",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "camera enabled?",
        "property": "enabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 400,
        "wires": [
            [
                "7f063afdbac396ce"
            ]
        ]
    },
    {
        "id": "2c7c7df250289562",
        "type": "switch",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "radar enabled?",
        "property": "radarEnabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 480,
        "wires": [
            [
                "b39062019fac1a66"
            ],
            [
                "673e45159a2dfccf"
            ]
        ]
    },
    {
        "id": "6b08c9332096b857",
        "type": "template",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "create table events",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS events (\n    id TEXT PRIMARY KEY,\n    camera TEXT,\n    label TEXT,\n    sub_label TEXT,\n    top_score REAL,\n    frame_time REAL,\n    start_time REAL,\n    end_time REAL,\n    entered_zones TEXT,\n    score REAL,\n    area REAL,\n    ratio REAL,\n    motionless_count REAL,\n    position_changes REAL,\n    attributes TEXT,\n    direction_calc TEXT,\n    speed_calc REAL,\n    provenance TEXT, \n    deployment_id TEXT DEFAULT NULL,\n    radarName TEXT DEFAULT NULL\n    );",
        "output": "str",
        "x": 510,
        "y": 1080,
        "wires": [
            [
                "510b389597efaf1b"
            ]
        ]
    },
    {
        "id": "3731dfc3716b1167",
        "type": "template",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "select latest 5 rows from events",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM events \nORDER BY end_time DESC \nLIMIT 5;",
        "output": "str",
        "x": 470,
        "y": 1120,
        "wires": [
            [
                "510b389597efaf1b"
            ]
        ]
    },
    {
        "id": "a8aeffd2e5bc17f2",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "event finalize output",
        "func": "\n//provenance, frigate first, then radar, if it matched\nvar thisProvenance = [];\nthisProvenance.push(\"frigate\");\nif (msg.payload.status_radarMatch === true) {\n    thisProvenance.push(\"radar\");\n}\n\nconst newPayload = {\n    id:                 msg.frigate_event.id,\n    camera:             msg.frigate_event.camera,\n    label:              msg.frigate_event.label,\n    sub_label:          msg.frigate_event.sub_label,\n    top_score:          msg.frigate_event.top_score,\n    frame_time:         msg.frigate_event.frame_time,\n    start_time:         msg.frigate_event.start_time,\n    end_time:           msg.frigate_event.end_time,\n    entered_zones:      msg.frigate_event.entered_zones,\n    score:              msg.frigate_event.score,\n    area:               msg.frigate_event.area,\n    ratio:              msg.frigate_event.ratio,\n    motionless_count:   msg.frigate_event.motionless_count,\n    position_changes:   msg.frigate_event.position_changes,\n    attributes:         msg.frigate_event.attributes,\n    direction_calc:     (msg.event_direction_speed.calc_event_direction || undefined),\n    speed_calc:         (msg.event_direction_speed.calc_event_speed || undefined),\n    provenance:         thisProvenance,\n    deployment_id:      msg.frigate_event.deployment_id,\n    radarName:          msg.frigate_event.radarName\n}\n\nmsg.payload = newPayload;\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 700,
        "wires": [
            [
                "674346683479762a"
            ]
        ]
    },
    {
        "id": "b08a42e270ab5a4f",
        "type": "change",
        "z": "9269520ddb532b00",
        "g": "b7398c4e0bc743e5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "tm/event",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 800,
        "wires": [
            [
                "274f87c31437c2d7",
                "7f0ef976c7b79245"
            ]
        ]
    },
    {
        "id": "e968e39eb0de5bc1",
        "type": "mqtt in",
        "z": "b1fde507a4b80c79",
        "name": "",
        "topic": "aq/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a5d65dd0e3566daa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 100,
        "wires": [
            [
                "3da49a479e99f3b5",
                "4ef1e892a6b1c695"
            ]
        ]
    },
    {
        "id": "3da49a479e99f3b5",
        "type": "debug",
        "z": "b1fde507a4b80c79",
        "name": "debug: published airquality messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 100,
        "wires": []
    },
    {
        "id": "35d0362b1f8a5e1a",
        "type": "sqlite",
        "z": "b1fde507a4b80c79",
        "g": "672f3b07194c5dd5",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 920,
        "y": 580,
        "wires": [
            [
                "9ec2c67401c5aebc"
            ]
        ]
    },
    {
        "id": "ad3b1bd4bcdd6731",
        "type": "inject",
        "z": "b1fde507a4b80c79",
        "g": "672f3b07194c5dd5",
        "name": "inject after 0.1 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 580,
        "wires": [
            [
                "d61da5053d3a100e"
            ]
        ]
    },
    {
        "id": "e063e562cca50f31",
        "type": "inject",
        "z": "b1fde507a4b80c79",
        "g": "672f3b07194c5dd5",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 620,
        "wires": [
            [
                "e13414feb4f512b8"
            ]
        ]
    },
    {
        "id": "9ec2c67401c5aebc",
        "type": "debug",
        "z": "b1fde507a4b80c79",
        "g": "672f3b07194c5dd5",
        "name": "debug: airquality query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 620,
        "wires": []
    },
    {
        "id": "8cae4cba37aecc0d",
        "type": "sqlite",
        "z": "b1fde507a4b80c79",
        "g": "efdb589a1b6e0c2f",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO airquality (entryDateTime, gas_calibrated, temp, bar, hum, dew, temp_raw, bar_raw, hum_raw, pm01, pm025, pm10, gas_red, gas_oxi, gas_nh3, gas_red_raw, gas_oxi_raw, gas_nh3_raw, lux, lux_raw, proximity, sensorName, deployment_id)\nVALUES ($entryDateTime, $gas_calibrated, $temp, $bar, $hum, $dew, $temp_raw, $bar_raw, $hum_raw, $pm01, $pm025, $pm10, $gas_red, $gas_oxi, $gas_nh3, $gas_red_raw, $gas_oxi_raw, $gas_nh3_raw, $lux, $lux_raw, $proximity, $sensorName, $deployment_id);\n",
        "name": "",
        "x": 1080,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "99bfb6c2ced810ec",
        "type": "function",
        "z": "b1fde507a4b80c79",
        "g": "efdb589a1b6e0c2f",
        "name": "write params for airquality insert",
        "func": "//format for SQLITE Insert Prepared Statement\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 240,
        "wires": [
            [
                "8cae4cba37aecc0d"
            ]
        ]
    },
    {
        "id": "d61da5053d3a100e",
        "type": "template",
        "z": "b1fde507a4b80c79",
        "g": "672f3b07194c5dd5",
        "name": "create airquality table",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "CREATE TABLE IF NOT EXISTS airquality (\n    entryDateTime REAL,\n    gas_calibrated INTEGER,\n    temp REAL,\n    bar REAL,\n    hum REAL,\n    dew REAL,\n    temp_raw REAL,\n    bar_raw REAL,\n    hum_raw REAL,\n    pm01 REAL,\n    pm025 REAL,\n    pm10 REAL,\n    gas_red REAL,\n    gas_oxi REAL,\n    gas_nh3 REAL,\n    gas_red_raw REAL,\n    gas_oxi_raw REAL,\n    gas_nh3_raw REAL,\n    lux REAL,\n    lux_raw REAL,\n    proximity REAL,\n    sensorName TEXT,\n    deployment_id TEXT\n);",
        "output": "str",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "35d0362b1f8a5e1a"
            ]
        ]
    },
    {
        "id": "e13414feb4f512b8",
        "type": "template",
        "z": "b1fde507a4b80c79",
        "g": "672f3b07194c5dd5",
        "name": "select latest 5 rows from airquality",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "SELECT * \nFROM airquality \nORDER BY entryDateTime DESC \nLIMIT 5;",
        "output": "str",
        "x": 560,
        "y": 620,
        "wires": [
            [
                "35d0362b1f8a5e1a"
            ]
        ]
    },
    {
        "id": "014464d29b72fa53",
        "type": "switch",
        "z": "b1fde507a4b80c79",
        "g": "efdb589a1b6e0c2f",
        "name": "enabled?",
        "property": "sensor.enabled",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 240,
        "wires": [
            [
                "24ae834ea737eac6"
            ]
        ]
    },
    {
        "id": "24ae834ea737eac6",
        "type": "template",
        "z": "b1fde507a4b80c79",
        "g": "efdb589a1b6e0c2f",
        "name": "format mqtt for sqlite",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"entryDateTime\": {{payload.current_time}},\n    \"gas_calibrated\": {{#payload.gas_calibrated}}1{{/payload.gas_calibrated}}{{^payload.gas_calibrated}}0{{/payload.gas_calibrated}},\n    \"temp\": {{payload.temp}},\n    \"bar\": {{payload.bar.0}},\n    \"hum\": {{payload.hum.0}},\n    \"dew\": {{payload.dew}},\n    \"temp_raw\": {{payload.temp_raw}},\n    \"bar_raw\": {{payload.bar_raw}},\n    \"hum_raw\": {{payload.hum_raw}},\n    \"pm01\": {{payload.pm01}},\n    \"pm025\": {{payload.pm025}},\n    \"pm10\": {{payload.pm10}},\n    \"gas_red\": {{payload.gas_red}},\n    \"gas_oxi\": {{payload.gas_oxi}},\n    \"gas_nh3\": {{payload.gas_nh3}},\n    \"gas_red_raw\": {{payload.gas_red_raw}},\n    \"gas_oxi_raw\": {{payload.gas_oxi_raw}},\n    \"gas_nh3_raw\": {{payload.gas_nh3_raw}},\n    \"lux\": {{payload.lux}},\n    \"lux_raw\": {{payload.lux_raw}},\n    \"proximity\": {{payload.proximity}},\n    \"sensorName\": \"{{sensor.name}}\",\n    \"deployment_id\": \"{{sensor.deployment.id}}\"\n}",
        "output": "json",
        "x": 740,
        "y": 240,
        "wires": [
            [
                "99bfb6c2ced810ec",
                "ef6ffe823574c1d1"
            ]
        ]
    },
    {
        "id": "ef6ffe823574c1d1",
        "type": "link out",
        "z": "b1fde507a4b80c79",
        "g": "efdb589a1b6e0c2f",
        "name": "airquality link out",
        "mode": "link",
        "links": [
            "2be1c8d04ce69a48"
        ],
        "x": 915,
        "y": 340,
        "wires": []
    },
    {
        "id": "78fe0447b9a69129",
        "type": "catch",
        "z": "b1fde507a4b80c79",
        "name": "catch - airquality flow",
        "scope": null,
        "uncaught": false,
        "x": 160,
        "y": 40,
        "wires": [
            [
                "86c57166ac231b3c"
            ]
        ]
    },
    {
        "id": "86c57166ac231b3c",
        "type": "debug",
        "z": "b1fde507a4b80c79",
        "name": "catch - airquality flow",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "4ef1e892a6b1c695",
        "type": "change",
        "z": "b1fde507a4b80c79",
        "g": "efdb589a1b6e0c2f",
        "name": "set sensor config properties",
        "rules": [
            {
                "t": "set",
                "p": "sensor",
                "pt": "msg",
                "to": "$globalContext(\"config.sensors.airquality_monitors.\" & $split(topic, '/', limit)[1])\t ",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "sensor.name",
                "pt": "msg",
                "to": "$split(topic, '/', limit)[1]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 200,
        "wires": [
            [
                "014464d29b72fa53"
            ]
        ]
    },
    {
        "id": "f1530cb4468b517b",
        "type": "inject",
        "z": "b1fde507a4b80c79",
        "d": true,
        "g": "672f3b07194c5dd5",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 660,
        "wires": [
            [
                "f11bc2c9463f8c85"
            ]
        ]
    },
    {
        "id": "f11bc2c9463f8c85",
        "type": "template",
        "z": "b1fde507a4b80c79",
        "d": true,
        "g": "672f3b07194c5dd5",
        "name": "drop",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "DROP TABLE airquality;",
        "output": "str",
        "x": 470,
        "y": 660,
        "wires": [
            [
                "35d0362b1f8a5e1a"
            ]
        ]
    },
    {
        "id": "3ac16ca7857d43a0",
        "type": "inject",
        "z": "b1fde507a4b80c79",
        "d": true,
        "g": "672f3b07194c5dd5",
        "name": "inject manually",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 700,
        "wires": [
            [
                "88e51d22037ef437"
            ]
        ]
    },
    {
        "id": "88e51d22037ef437",
        "type": "template",
        "z": "b1fde507a4b80c79",
        "d": true,
        "g": "672f3b07194c5dd5",
        "name": "pragma",
        "field": "topic",
        "fieldType": "msg",
        "format": "sql",
        "syntax": "mustache",
        "template": "PRAGMA table_info(airquality);",
        "output": "str",
        "x": 480,
        "y": 700,
        "wires": [
            [
                "35d0362b1f8a5e1a"
            ]
        ]
    },
    {
        "id": "677a57bbf3619854",
        "type": "http request",
        "z": "f7932be9acc7391c",
        "g": "43087a735f896849",
        "name": "tb post http api",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 2240,
        "y": 160,
        "wires": [
            [
                "df6ac2f42ac6d8c7"
            ]
        ]
    },
    {
        "id": "df6ac2f42ac6d8c7",
        "type": "debug",
        "z": "f7932be9acc7391c",
        "g": "43087a735f896849",
        "name": "tb telemetry response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2320,
        "y": 200,
        "wires": []
    },
    {
        "id": "ed447e5f8becbfad",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "b334a2375eb8cb42",
        "name": "event link in",
        "links": [
            "274f87c31437c2d7"
        ],
        "x": 175,
        "y": 160,
        "wires": [
            [
                "4bec488857c0553f"
            ]
        ]
    },
    {
        "id": "695200d405f2d323",
        "type": "catch",
        "z": "f7932be9acc7391c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 200,
        "y": 40,
        "wires": [
            [
                "5fc376fb123914c0"
            ]
        ]
    },
    {
        "id": "5fc376fb123914c0",
        "type": "debug",
        "z": "f7932be9acc7391c",
        "name": "catch - thingsboard error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "fee85b1886270ac6",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_dov link in",
        "links": [
            "01307f2f13f465f2"
        ],
        "x": 175,
        "y": 360,
        "wires": [
            [
                "5d3596375bd695c0"
            ]
        ]
    },
    {
        "id": "087588593911f398",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_timedspeedcounts link in",
        "links": [
            "4094c101f6b59d95"
        ],
        "x": 175,
        "y": 260,
        "wires": [
            [
                "f29975eb207b5b8d"
            ]
        ]
    },
    {
        "id": "fc5e2cd719fa680a",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_raw_speed_magnitude link in",
        "links": [
            "080fd00489701aa1"
        ],
        "x": 175,
        "y": 400,
        "wires": [
            [
                "4796b517d7d045a7"
            ]
        ]
    },
    {
        "id": "0124afc74d86b533",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_raw_speed_magnitude_single link in",
        "links": [
            "95186b0fee06a3f5"
        ],
        "x": 175,
        "y": 440,
        "wires": [
            [
                "9a894f4bd304f5a9"
            ]
        ]
    },
    {
        "id": "e05e91362c933e94",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_oc_payload link in",
        "links": [
            "59a9c9a7ba535641"
        ],
        "x": 175,
        "y": 480,
        "wires": [
            [
                "cc21b9e657cba081"
            ]
        ]
    },
    {
        "id": "9f5540b6beae8e73",
        "type": "comment",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "send radar_timedspeedcounts immediately",
        "info": "",
        "x": 320,
        "y": 300,
        "wires": []
    },
    {
        "id": "3fb645608f34cc0c",
        "type": "comment",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "send radar_oc_payload w others to avoid hundreds of messages per object (oc = radar object detection end)",
        "info": "",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "cc21b9e657cba081",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_oc_payload telemetry",
        "func": "const newPayload = {\n    ts: msg.payload.start_time * 1000,\n    values: {\n        radar: {\n            radar_oc_payload: {\n                start_time: msg.payload.start_time,\n                end_time: msg.payload.end_time,\n                delta_time_msec: msg.payload.delta_time_msec,\n                direction: msg.payload.direction,\n                frames_count: msg.payload.frames_count,\n                velocity_max: msg.payload.velocity_max,\n                velocity_min: msg.payload.velocity_min,\n                magnitude_max: msg.payload.magnitude_max,\n                magnitude_mean: msg.payload.magnitude_mean,\n                velocity_change: msg.payload.velocity_change,\n                frames_per_velocity: msg.payload.frames_per_velocity,\n                object_length: msg.payload.object_length,\n                units: msg.payload.units,\n                object_label: msg.payload.object_label,\n                radarName: msg.payload.radarName,\n                deployment_id: msg.payload.deployment_id\n            }\n        }\n    }\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "d3f14c01ec3c7250"
            ]
        ]
    },
    {
        "id": "21944450ecc08385",
        "type": "delay",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1000",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1530,
        "y": 200,
        "wires": [
            [
                "9b8c2bcc16a637fd"
            ]
        ]
    },
    {
        "id": "ff1719e60656a2e6",
        "type": "join",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "create radar array, wait for msg.complete",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "60",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 820,
        "y": 360,
        "wires": [
            [
                "221ddfedf40c108f"
            ]
        ]
    },
    {
        "id": "d3f14c01ec3c7250",
        "type": "change",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 480,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "4796b517d7d045a7",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_raw_speed_magnitude telemetry",
        "func": "const newPayload = {\n    ts: msg.payload.time * 1000,\n    values: {\n        radar: {\n            radar_raw_speed_magnitude: {\n                time: msg.payload.time,\n                unit: msg.payload.time,\n                magnitude: msg.payload.magnitude,\n                speed: msg.payload.speed,\n                radarName: msg.payload.radarName,\n                deployment_id: msg.payload.deployment_id\n            }\n        }\n    }\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "9a894f4bd304f5a9",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_raw_speed_magnitude_single telemetry",
        "func": "const newPayload = {\n    ts: msg.payload.time * 1000,\n    values: {\n        radar: {\n            radar_raw_speed_magnitude_single: {\n                time: msg.payload.time,\n                unit: msg.payload.unit,\n                magnitude: msg.payload.magnitude,\n                speed: msg.payload.speed,\n                radarName: msg.payload.radarName,\n                deployment_id: msg.payload.deployment_id\n            }\n        }\n    }\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 440,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "8a83d59ee0db1198",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "55a1af374cc8ecb9",
        "name": "deployment telemetry send, link in",
        "links": [
            "1ba33a74f2d3a680"
        ],
        "x": 175,
        "y": 620,
        "wires": [
            [
                "c6ff73faf6fa9e98"
            ]
        ]
    },
    {
        "id": "c6ff73faf6fa9e98",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "55a1af374cc8ecb9",
        "name": "format deployment telemetry",
        "func": "var newMsg = {};\n\n// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nnewMsg.payload = {\n    ts: new Date().getTime(),\n    values: {\n        deployments: values\n    }\n}\n\nreturn newMsg;\n\n/* Sample payload:\n{\n    \"updatedDeployment\": [\n        {\n            \"id\": \"1737518994047-c5a4e582-d\",\n            \"entryStartDateTime\": 1737518994047,\n            \"lat\": 45.52252,\n            \"lon\": -122.6912,\n            \"bearing\": \"e\",\n            \"sensorName\": \"picam_264\",\n            \"deviceName\": \"a06979cfbfcc59da\"\n        }\n    ],\n    \"currentDeployment\": [\n        {\n            \"id\": \"1737519005736-e1c914cc-d\",\n            \"entryStartDateTime\": 1737519005736,\n            \"entryEndDateTime\": \"\",\n            \"lat\": 45.52252,\n            \"lon\": -122.6912,\n            \"bearing\": \"w\",\n            \"sensorName\": \"picam_264\",\n            \"deviceName\": \"a06979cfbfcc59da\"\n        },\n        {\n            \"id\": \"1737518994047-42d3a02b-d\",\n            \"entryStartDateTime\": 1737518994047,\n            \"lat\": 45.52252,\n            \"lon\": -122.6912,\n            \"bearing\": \"s\",\n            \"sensorName\": \"TM_RADAR_SERIAL_PORT_00\",\n            \"deviceName\": \"a06979cfbfcc59da\"\n        }\n    ]\n}\n*/",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 620,
        "wires": [
            [
                "8c521232f464d27a"
            ]
        ]
    },
    {
        "id": "521115ddd5741eea",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "99dfff63ac837bc8",
        "name": "format system metrics payload",
        "func": "const newPayload = {\n    ts: msg.payload.time_ms_utc,\n    values: {\n        system_metrics: msg.payload\n    }\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "8c521232f464d27a"
            ]
        ]
    },
    {
        "id": "24c1b5f3bff3834c",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "99dfff63ac837bc8",
        "name": "connect from other flows to send telemetry",
        "links": [
            "6dca925fad91c100"
        ],
        "x": 175,
        "y": 720,
        "wires": [
            [
                "521115ddd5741eea"
            ]
        ]
    },
    {
        "id": "8768b75dbfee3973",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "fac72767826a76d9",
        "name": "deployment attributes send, link in",
        "links": [
            "1ba33a74f2d3a680"
        ],
        "x": 175,
        "y": 1400,
        "wires": [
            [
                "9b0f7197fe82bbfa"
            ]
        ]
    },
    {
        "id": "d367cb76b239682f",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "tb attributes link in",
        "links": [
            "486556a1e7fce8cf"
        ],
        "x": 175,
        "y": 1120,
        "wires": [
            [
                "e507fdc9cbf67095"
            ]
        ]
    },
    {
        "id": "93aa421659d2c20b",
        "type": "switch",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "thingsboard.enabled",
        "property": "config.thingsboard.enabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1500,
        "y": 160,
        "wires": [
            [
                "21944450ecc08385"
            ]
        ]
    },
    {
        "id": "9b8c2bcc16a637fd",
        "type": "switch",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "tb protocol?",
        "property": "config.thingsboard.protocol",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "http",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mqtt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1590,
        "y": 240,
        "wires": [
            [
                "dd3f9ef16332021c"
            ],
            []
        ],
        "info": "see https://thingsboard.io/docs/reference/protocols/"
    },
    {
        "id": "2be1c8d04ce69a48",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "f35d3f484c2f6107",
        "name": "airquality link in",
        "links": [
            "ef6ffe823574c1d1"
        ],
        "x": 175,
        "y": 820,
        "wires": [
            [
                "87d3892038bb3e5f"
            ]
        ]
    },
    {
        "id": "9c944328e288b2dc",
        "type": "template",
        "z": "f7932be9acc7391c",
        "g": "43087a735f896849",
        "name": "telemetry msg.url",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{global.config.thingsboard.url}}}/api/v1/{{{global.config.thingsboard.access_token}}}/telemetry",
        "output": "str",
        "x": 2010,
        "y": 160,
        "wires": [
            [
                "677a57bbf3619854"
            ]
        ]
    },
    {
        "id": "75f7976086cc9838",
        "type": "change",
        "z": "f7932be9acc7391c",
        "g": "fe1b9f6f9d89d353",
        "name": "msg.type = attributes",
        "rules": [
            {
                "t": "set",
                "p": "type",
                "pt": "msg",
                "to": "attributes",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 1120,
        "wires": [
            [
                "93aa421659d2c20b"
            ]
        ]
    },
    {
        "id": "221ddfedf40c108f",
        "type": "change",
        "z": "f7932be9acc7391c",
        "g": "2f27e270200485b9",
        "name": "msg.type = telemetry",
        "rules": [
            {
                "t": "set",
                "p": "type",
                "pt": "msg",
                "to": "telemetry",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "93aa421659d2c20b"
            ]
        ]
    },
    {
        "id": "dd3f9ef16332021c",
        "type": "switch",
        "z": "f7932be9acc7391c",
        "g": "43087a735f896849",
        "name": "msg.type?",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "telemetry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "attributes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1810,
        "y": 180,
        "wires": [
            [
                "9c944328e288b2dc"
            ],
            [
                "d739b10ce5fa8f40"
            ]
        ]
    },
    {
        "id": "d739b10ce5fa8f40",
        "type": "template",
        "z": "f7932be9acc7391c",
        "g": "43087a735f896849",
        "name": "attributes msg.url",
        "field": "url",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{global.config.thingsboard.url}}}/api/v1/{{{global.config.thingsboard.access_token}}}/attributes",
        "output": "str",
        "x": 2010,
        "y": 200,
        "wires": [
            [
                "677a57bbf3619854"
            ]
        ]
    },
    {
        "id": "4bec488857c0553f",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "b334a2375eb8cb42",
        "name": "format event telemetry",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.frame_time * 1000,\n    values: {\n        event: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "221ddfedf40c108f"
            ]
        ]
    },
    {
        "id": "9b0f7197fe82bbfa",
        "type": "template",
        "z": "f7932be9acc7391c",
        "g": "fac72767826a76d9",
        "name": "set deployment client side attribute payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"deployments\": {\n        {{#payload.currentDeployment}}\n        \"{{sensorName}}\": {\n            \"sensorType\": \"{{sensorType}}\",\n            \"lat\": \"{{lat}}\",\n            \"lon\": \"{{lon}}\",\n            \"bearing\": \"{{bearing}}\",\n            \"id\": \"{{id}}\"\n        },\n        {{/payload.currentDeployment}}\n        \"deploymentTopLevel\": {\n            \"lat\": \"{{global.config.deployment.lat}}\",\n            \"lon\": \"{{global.config.deployment.lon}}\",\n            \"bearing\": \"{{global.config.deployment.bearing}}\"\n        }\n    }\n}",
        "output": "json",
        "x": 430,
        "y": 1400,
        "wires": [
            [
                "75f7976086cc9838"
            ]
        ]
    },
    {
        "id": "5d3596375bd695c0",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_dov telemetry",
        "func": "const newPayload = {\n    ts: msg.payload.time * 1000,\n    values: {\n        radar: {\n            radar_dov: {\n                time: msg.payload.time,\n                unit: msg.payload.unit,\n                direction: msg.payload.direction,\n                velocity: msg.payload.DetectedObjectVelocity,\n                radarName: msg.payload.radarName,\n                deployment_id: msg.payload.deployment_id\n            }\n        }\n    }\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "f29975eb207b5b8d",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_timedspeedcounts telemetry",
        "func": "const newPayload = {\n    ts: msg.payload.TimedSpeedCounts.time * 1000,\n    values: {\n        radar: {\n            radar_timedspeedcounts: {\n                time: msg.payload.TimedSpeedCounts.time,\n                direction: msg.payload.TimedSpeedCounts.direction,\n                units: msg.payload.TimedSpeedCounts.units,\n                count: msg.payload.TimedSpeedCounts.count,\n                average: msg.payload.TimedSpeedCounts.average,\n                radarName: msg.payload.radarName,\n                deployment_id: msg.payload.deployment_id\n            }\n        }\n    }\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 260,
        "wires": [
            [
                "221ddfedf40c108f"
            ]
        ]
    },
    {
        "id": "e507fdc9cbf67095",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "format system info client-side attributes",
        "func": "const newPayload = {\n    sysinfo_tmVersion: msg.payload.tmVersion,\n    sysinfo_osHostname: msg.payload.osHostname,\n    sysinfo_osRelease: msg.payload.osRelease,\n    sysinfo_osTimeZone: msg.payload.osTimeZone,\n    sysinfo_deviceName: msg.payload.deviceName,\n    sysinfo_frigateVersion: msg.payload.frigateVersion,\n    sysinfo_ssid: msg.payload.ssid,\n    sysinfo_ipv4Address: msg.payload.ipv4Address\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1120,
        "wires": [
            [
                "75f7976086cc9838"
            ]
        ]
    },
    {
        "id": "4af0d78e8bc39647",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "backup link in",
        "links": [
            "7c96d66a8330a4fc"
        ],
        "x": 175,
        "y": 1180,
        "wires": [
            [
                "0b62cae60d488c85"
            ]
        ]
    },
    {
        "id": "0b62cae60d488c85",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "format config backup client-side attribute",
        "func": "const newPayload = {\n    backup_config: msg.payload\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1180,
        "wires": [
            [
                "75f7976086cc9838"
            ]
        ]
    },
    {
        "id": "fdb3962b458f90c2",
        "type": "comment",
        "z": "f7932be9acc7391c",
        "g": "fe1b9f6f9d89d353",
        "name": "NOTE: instructions to delete client-side attributes",
        "info": "To delete client-side attributes:\n\n`DELETE` for <TB_URL>/api/plugins/telemetry/{deviceId}/{scope}{?keys}\n\n- {deviceId} = <LONG_DEVICE_HEX_STRING> is from ThingsBoard web portal > Device > Details > Copy device deviceId\n- {scope} = 'CLIENT_SCOPE'\n- keys = comma-separated list of attributes with commas formatted for transmission \n    system_deviceName,system_frigateVersion,system_ipv4Address,system_osHostname,system_osRelease,system_osTimeZone,system_ssid,system_tmVersion\n    becomes system_deviceName%2Csystem_frigateVersion%2Csystem_ipv4Address%2Csystem_osHostname%2Csystem_osRelease%2Csystem_osTimeZone%2Csystem_ssid%2Csystem_tmVersion\n\n\nCan also access it at <TB_URL>/swagger-ui/index.html under 'telemetry-controller' section",
        "x": 320,
        "y": 1040,
        "wires": []
    },
    {
        "id": "66bace5cf805a4fb",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "radarInfo device attributes link in",
        "links": [
            "50c56047654010ea"
        ],
        "x": 175,
        "y": 1240,
        "wires": [
            [
                "22f397ac5c294b6e"
            ]
        ]
    },
    {
        "id": "22f397ac5c294b6e",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "format radar info client-side attributes",
        "func": "const newPayload = {\n    radarinfo: msg.payload,\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "75f7976086cc9838"
            ]
        ]
    },
    {
        "id": "87d3892038bb3e5f",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "f35d3f484c2f6107",
        "name": "format airquality telemetry",
        "func": "const newPayload = {\n    ts: (msg.payload.entryDateTime * 1000),\n    values: {\n        airquality: {\n            entryDateTime:  msg.payload.entryDateTime,\n            gas_calibrated: msg.payload.gas_calibrated,\n            temp:           msg.payload.temp,\n            bar:            msg.payload.bar,\n            hum:            msg.payload.hum,\n            dew:            msg.payload.dew,\n            temp_raw:       msg.payload.temp_raw,\n            bar_raw:        msg.payload.bar_raw,\n            hum_raw:        msg.payload.hum_raw,\n            pm01:           msg.payload.pm01,\n            pm025:          msg.payload.pm025,\n            pm10:           msg.payload.pm10,\n            gas_red:        msg.payload.gas_red,\n            gas_oxi:        msg.payload.gas_oxi,\n            gas_nh3:        msg.payload.gas_nh3,\n            gas_red_raw:    msg.payload.gas_red_raw,\n            gas_oxi_raw:    msg.payload.gas_oxi_raw,\n            gas_nh3_raw:    msg.payload.gas_nh3_raw,\n            lux:            msg.payload.lux,\n            lux_raw:        msg.payload.lux_raw,\n            proximity:      msg.payload.proximity,\n            sensorName:     msg.payload.sensorName,\n            deployment_id:  msg.payload.deployment_id\n        }\n    }\n}\n\nmsg.payload = newPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 820,
        "wires": [
            [
                "8c521232f464d27a"
            ]
        ]
    },
    {
        "id": "c49d311e5668de52",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "init-config device attributes link in",
        "links": [
            "2fa46892748adc43"
        ],
        "x": 175,
        "y": 1300,
        "wires": [
            [
                "9941048ea93dc79c"
            ]
        ]
    },
    {
        "id": "9941048ea93dc79c",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "f034ca2ecdf9a2f6",
        "name": "format init-config client-side attributes",
        "func": "const newPayload = {\n    config_tm: msg.payload\n}\n\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1300,
        "wires": [
            [
                "75f7976086cc9838"
            ]
        ]
    },
    {
        "id": "f49c1d345cdfef57",
        "type": "change",
        "z": "f7932be9acc7391c",
        "g": "b781cb3d6df38fed",
        "name": "set up backup payload for TB",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.frigate_config",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.dateTime",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 1680,
        "wires": [
            [
                "7c96d66a8330a4fc"
            ]
        ]
    },
    {
        "id": "7c96d66a8330a4fc",
        "type": "link out",
        "z": "f7932be9acc7391c",
        "g": "b781cb3d6df38fed",
        "name": "backup link out",
        "mode": "link",
        "links": [
            "4af0d78e8bc39647"
        ],
        "x": 1275,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4d376b9ae709214b",
        "type": "http request",
        "z": "f7932be9acc7391c",
        "g": "b781cb3d6df38fed",
        "name": "fetch frigate /api/config/raw",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://frigate:5000/api/config/raw",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 760,
        "y": 1680,
        "wires": [
            [
                "f49c1d345cdfef57"
            ]
        ]
    },
    {
        "id": "56cafb11de5348b2",
        "type": "http request",
        "z": "f7932be9acc7391c",
        "g": "a38a90c36a0abfc3",
        "name": "read config file from ThingsBoard",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{global.config.thingsboard.url}}/api/v1/{{global.config.access_token}}/attributes?clientKeys=backup",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 780,
        "y": 1780,
        "wires": [
            [
                "7555653f37b1cd50"
            ]
        ]
    },
    {
        "id": "25515211bb8cecb4",
        "type": "http request",
        "z": "f7932be9acc7391c",
        "g": "a38a90c36a0abfc3",
        "name": "validate Frigate config, save and restart",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://frigate:5000/api/config/save?save_option=restart",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "text/plain",
                "valueValue": ""
            }
        ],
        "x": 1240,
        "y": 1820,
        "wires": [
            [
                "64467a90df93e582"
            ]
        ]
    },
    {
        "id": "64467a90df93e582",
        "type": "switch",
        "z": "f7932be9acc7391c",
        "g": "a38a90c36a0abfc3",
        "name": "handle validation error",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1320,
        "y": 1860,
        "wires": [
            [
                "5b7fe362e2e6b35d"
            ]
        ]
    },
    {
        "id": "7555653f37b1cd50",
        "type": "json",
        "z": "f7932be9acc7391c",
        "g": "a38a90c36a0abfc3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 990,
        "y": 1780,
        "wires": [
            [
                "0d394a2d73d138d6"
            ]
        ]
    },
    {
        "id": "0d394a2d73d138d6",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "a38a90c36a0abfc3",
        "name": "extract frigate config portion for validation",
        "func": "let newMsg = {};\n\n//put the backed up YAML config into a JSON object to send to validate\nnewMsg.payload = msg.payload.client.backup.frigate;\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1780,
        "wires": [
            [
                "25515211bb8cecb4"
            ]
        ]
    },
    {
        "id": "5b7fe362e2e6b35d",
        "type": "ui_toast",
        "z": "f7932be9acc7391c",
        "g": "a38a90c36a0abfc3",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Frigate Config Restore Validation Error",
        "name": "show frigate validation error",
        "x": 1340,
        "y": 1900,
        "wires": []
    },
    {
        "id": "0372cefb5e2ec968",
        "type": "ui_button",
        "z": "f7932be9acc7391c",
        "g": "23636f4163fa6e3b",
        "name": "",
        "group": "941fb260d6cfb5a2",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Restore TM Configuration",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 1720,
        "wires": [
            [
                "56cafb11de5348b2"
            ]
        ]
    },
    {
        "id": "cad1724850f8df3d",
        "type": "ui_button",
        "z": "f7932be9acc7391c",
        "g": "23636f4163fa6e3b",
        "name": "",
        "group": "941fb260d6cfb5a2",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Backup TM Configuration",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 1680,
        "wires": [
            [
                "4d376b9ae709214b"
            ]
        ]
    },
    {
        "id": "fb62ca91f138ab87",
        "type": "ui_template",
        "z": "f7932be9acc7391c",
        "g": "23636f4163fa6e3b",
        "group": "941fb260d6cfb5a2",
        "name": "backup and restore instructions",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<p>Backup and Restore functionality allow you to save settings to ThingsBoard as client-side attributes for returning your traffic monitor to the saved configuration.</p>\n<p>Backup and Restore works for the following configs:</p>\n<ul>\n    <li>Frigate config.yml</li>\n</ul>\n<p>Only one (1) backup is valid at a time.</p>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "9fe1b87c70ae182d",
        "type": "catch",
        "z": "05fcb02c571dcfee",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 40,
        "wires": [
            [
                "070133633f340279"
            ]
        ]
    },
    {
        "id": "070133633f340279",
        "type": "debug",
        "z": "05fcb02c571dcfee",
        "name": "debug error, system tab",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 40,
        "wires": []
    },
    {
        "id": "4d67617dadcb9ede",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "b6bb1e836852dc04",
                "5bb734f0283c5112",
                "9dc62a7e0c39ac0e",
                "5dcc009cdc781454",
                "0dccfc4a6467f7f4",
                "8fd2b9ab457b5065"
            ]
        ]
    },
    {
        "id": "5bb734f0283c5112",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "os.release()",
        "func": "msg.payload = `${os.release()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "fe2e9d1af38b2ca8"
            ]
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "5235db548e7aaef3",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "DateTime",
        "func": "msg.payload = new Date().toString();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 340,
        "y": 400,
        "wires": [
            [
                "41e6810f869d1552"
            ]
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "9dc62a7e0c39ac0e",
        "type": "http request",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "frigate api/version",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://frigate:5000/api/version",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "ab89cf1a793d2be5"
            ]
        ],
        "info": "`{\"camera\":\"picam_gs_h264\",\n\"count\":83,\"day\":\"2024-03-21\",\n\"label\":\"bicycle\",\n\"sub_label\":null,\n\"zones\":[]}`"
    },
    {
        "id": "fe2e9d1af38b2ca8",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.deviceAttributes.osRelease",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::deviceAttributes.osRelease",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "osRelease",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 300,
        "wires": [
            [
                "60fb5d8b6644ef02",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "ab89cf1a793d2be5",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.deviceAttributes.frigateVersion",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::deviceAttributes.frigateVersion",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "frigateVersion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 340,
        "wires": [
            [
                "02470b22b2f6893c",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "b6bb1e836852dc04",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.deviceAttributes.tmVersion",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::deviceAttributes.tmVersion",
                "pt": "global",
                "to": "TM_VERSION",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "tmVersion",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "TM_VERSION",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 180,
        "wires": [
            [
                "bcd4c7df6b6f93d3",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "c0a27f9a895a1a94",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.deviceAttributes.osTimeZone",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::deviceAttributes.osTimeZone",
                "pt": "global",
                "to": "$trim(payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "osTimeZone",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$trim(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 260,
        "wires": [
            [
                "611949e637ab7173",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "0dccfc4a6467f7f4",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.deviceAttributes.deviceName",
        "rules": [
            {
                "t": "set",
                "p": "deviceAttributes.deviceName",
                "pt": "global",
                "to": "TM_RPI_SN",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "deviceName",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 140,
        "wires": [
            [
                "eb3b3c5230e3dd32",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "eb3b3c5230e3dd32",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "deviceName",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 140,
        "wires": []
    },
    {
        "id": "611949e637ab7173",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "osTimeZone",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 260,
        "wires": []
    },
    {
        "id": "bcd4c7df6b6f93d3",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "tmVersion",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1060,
        "y": 180,
        "wires": []
    },
    {
        "id": "60fb5d8b6644ef02",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "osRelease",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 300,
        "wires": []
    },
    {
        "id": "02470b22b2f6893c",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "frigateVersion",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1080,
        "y": 340,
        "wires": []
    },
    {
        "id": "41e6810f869d1552",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Date & Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 400,
        "wires": []
    },
    {
        "id": "4af4cb47fdd97610",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "5235db548e7aaef3",
                "2f43413dfaba508a"
            ]
        ]
    },
    {
        "id": "2f43413dfaba508a",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "UTC-ms",
        "func": "msg.payload = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "040751d9061fe787"
            ]
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "040751d9061fe787",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time UTC (ms)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1080,
        "y": 440,
        "wires": []
    },
    {
        "id": "d046a343ebc5fe81",
        "type": "join",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1250,
        "y": 260,
        "wires": [
            [
                "486556a1e7fce8cf"
            ]
        ]
    },
    {
        "id": "486556a1e7fce8cf",
        "type": "link out",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "system_info link out",
        "mode": "link",
        "links": [
            "d367cb76b239682f"
        ],
        "x": 1345,
        "y": 260,
        "wires": []
    },
    {
        "id": "5dcc009cdc781454",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "js timezone",
        "func": "msg.payload = Intl.DateTimeFormat().resolvedOptions().timeZone;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 260,
        "wires": [
            [
                "c0a27f9a895a1a94"
            ]
        ]
    },
    {
        "id": "8fd2b9ab457b5065",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.deviceAttributes.osHostname",
        "rules": [
            {
                "t": "set",
                "p": "deviceAttributes.osHostname",
                "pt": "global",
                "to": "TM_HOSTNAME",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "osHostname",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 220,
        "wires": [
            [
                "f2885df5fb61fa3f",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "f2885df5fb61fa3f",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "osHostname",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 220,
        "wires": []
    },
    {
        "id": "9f2c4f1852402eb8",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "time_ms_utc",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "040a9f02853598aa",
                "8c8c487fbf8e11a1",
                "ae7325dd07b1f3ba",
                "7b406e86282cd677",
                "674f21d2e645cc18",
                "ab9d774782f92e88",
                "720ee19c705f37d9",
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "040a9f02853598aa",
        "type": "OS",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "x": 290,
        "y": 620,
        "wires": [
            [
                "e1d39852db4af08c"
            ]
        ]
    },
    {
        "id": "8c8c487fbf8e11a1",
        "type": "Drives",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "x": 290,
        "y": 700,
        "wires": [
            [
                "65e30edd475cad64"
            ]
        ]
    },
    {
        "id": "e1d39852db4af08c",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "OS",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_OS",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 620,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "65e30edd475cad64",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "Drives",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Drives",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 700,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "c497cfedf6aed533",
        "type": "join",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "Compose Metrics Msg",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 890,
        "y": 800,
        "wires": [
            [
                "6dca925fad91c100",
                "c5891e3e63052f03"
            ]
        ]
    },
    {
        "id": "ae7325dd07b1f3ba",
        "type": "Uptime",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "x": 300,
        "y": 760,
        "wires": [
            [
                "398089ca4a10bdc5"
            ]
        ]
    },
    {
        "id": "7b406e86282cd677",
        "type": "CPUs",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "x": 290,
        "y": 820,
        "wires": [
            [
                "882369d2082717a5"
            ]
        ]
    },
    {
        "id": "674f21d2e645cc18",
        "type": "Loadavg",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "x": 300,
        "y": 880,
        "wires": [
            [
                "b6b8a1a7c08eb0ac"
            ]
        ]
    },
    {
        "id": "ab9d774782f92e88",
        "type": "Memory",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "scale": "Byte",
        "x": 300,
        "y": 940,
        "wires": [
            [
                "976ec527b724bd3d"
            ]
        ]
    },
    {
        "id": "720ee19c705f37d9",
        "type": "NetworkIntf",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "",
        "x": 310,
        "y": 1000,
        "wires": [
            [
                "6881f1dd8a4805af"
            ]
        ]
    },
    {
        "id": "398089ca4a10bdc5",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "Uptime",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Uptime",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 760,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "882369d2082717a5",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "CPUs",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_CPUx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "b6b8a1a7c08eb0ac",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "Loadavg",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Loadavg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 880,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "976ec527b724bd3d",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "Memory",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Memory",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 940,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "6881f1dd8a4805af",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "NetworkIntf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_NetworkIntf",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1000,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "6e88f30f09b49d22",
        "type": "comment",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "OS and Hardware Metrics Documentation",
        "info": "Send various operating system and hardware metrics to the ThingsBoard server as telemetry:\n - See [node-red-contrib-os](https://github.com/Argonne-National-Laboratory/node-red-contrib-os/blob/master/README.md) package for definition of operating system metrics\n - Most of the hardware metrics come from the [vcgencmd command line tool](https://elinux.org/RPI_vcgencmd_usage). Both that documenation and others that are available online seem to be out-of-date. See also [How to Benchmark a Raspberry Pi Using Vcgencmd](https://www.tomshardware.com/how-to/raspberry-pi-benchmark-vcgencmd).\n - hardware cpu_percent is obtained from [psutil](https://psutil.readthedocs.io/en/latest/).\n - hardware meminfo comes from 'cat /proc/meminfo'.",
        "x": 960,
        "y": 620,
        "wires": []
    },
    {
        "id": "6dca925fad91c100",
        "type": "link out",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "system_metrics link out",
        "mode": "link",
        "links": [
            "24c1b5f3bff3834c"
        ],
        "x": 1105,
        "y": 800,
        "wires": []
    },
    {
        "id": "c5891e3e63052f03",
        "type": "debug",
        "z": "05fcb02c571dcfee",
        "g": "3c299af3b0814ea5",
        "name": "system_metrics output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 860,
        "wires": []
    },
    {
        "id": "3985037239b671c5",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "trigger Event query every 60-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 740,
        "wires": [
            [
                "928b71f25ce6e7b6"
            ]
        ]
    },
    {
        "id": "08d030ffc3fe6adb",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "frigate summary daily, objects",
        "group": "06dde4be9a9a6b27",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "frigate api/events/summary daily object count for the last 10-days",
        "chartType": "line",
        "legend": "true",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b241a0ef89fd7ce4",
        "type": "http request",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "frigate api/events/summary - Daily summary",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://frigate:5000/api/events/summary",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 460,
        "wires": [
            [
                "eb140f61419c6a08"
            ]
        ],
        "info": "`{\"camera\":\"picam_gs_h264\",\n\"count\":83,\"day\":\"2024-03-21\",\n\"label\":\"bicycle\",\n\"sub_label\":null,\n\"zones\":[]}`"
    },
    {
        "id": "91d3f8965f62f4b0",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "trigger summary Event query every 2-hours",
        "props": [],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "b241a0ef89fd7ce4"
            ]
        ]
    },
    {
        "id": "eb140f61419c6a08",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "structure frigate api/summary",
        "func": "var newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //only do this for the radar camera and 10 days or less ago\n    if (myItem.camera == flow.get(\"camera_selection\") && new Date(myItem.day).getTime() >= Math.floor((Date.now() - 86400000 * 10))) {\n        //if label doesn't exist, push it\n        if (newMsg[0].series.indexOf(myItem.label) < 0) {\n            newMsg[0].series.push(myItem.label);\n            //create new data array element that matches the series index\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n        }\n\n        //Check if it's a new date or existing in data[0][0].x\n        //datapoint for date \n        let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.day)));\n        if (xIndex < 0) {\n            //new date\n            let thisDataPoint = {};\n            thisDataPoint.x = new Date(myItem.day);\n            thisDataPoint.y = myItem.count;\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n        }\n        else {\n            //date exists, sum counts\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n        }\n\n    };\n    \n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "08d030ffc3fe6adb"
            ]
        ]
    },
    {
        "id": "404ac097795a2da0",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "trigger Event query every 2-hours",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "5f3716d2176c3ab4"
            ]
        ]
    },
    {
        "id": "b65e1877b1e04881",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "events summary daily, objects",
        "group": "06dde4be9a9a6b27",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "events daily object count for the last 10-days",
        "chartType": "line",
        "legend": "true",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c249329109ac17d5",
        "type": "link in",
        "z": "28627559bebdc324",
        "g": "91096cd6c9c741e2",
        "name": "link in event capture",
        "links": [
            "274f87c31437c2d7"
        ],
        "x": 135,
        "y": 1420,
        "wires": [
            [
                "ca3c18fa88ded42a"
            ]
        ]
    },
    {
        "id": "d66541089b01306e",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "only event with speed",
        "property": "$abs(payload.speed_calc)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "gt",
                "v": "20",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1020,
        "y": 1620,
        "wires": [
            [
                "c788d632f5e93a73"
            ]
        ]
    },
    {
        "id": "2e680914d7da5c94",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "only zone_radar",
        "property": "payload.entered_zones",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "zone_radar",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 360,
        "y": 1500,
        "wires": [
            [
                "c2270f3050bf35ab"
            ]
        ]
    },
    {
        "id": "c788d632f5e93a73",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "store last N speed events",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_recent_speed\") || [];\n//Keep only last X elements\nvar myArrLength = 3;\n\n//invert array so OLDEST IS FIRST, for functions\nmyEvents.reverse();\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//add current event to end of array\nmyEvents.push(msg.payload);\n\n//invert array so NEWEST IS FIRST, for display\nmyEvents.reverse();\n\nflow.set(\"events_recent_speed\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1660,
        "wires": [
            [
                "4c087723a1d698e9"
            ]
        ]
    },
    {
        "id": "e5391514131a2b5a",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "store last N radar events",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_recent_radar\") || [];\n//Keep only last X elements\nvar myArrLength = 5;\n\n//invert array so OLDEST IS FIRST, for functions\nmyEvents.reverse();\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//add current event to end of array\nmyEvents.push(msg.payload);\n\n\n//invert array so NEWEST IS FIRST, for display\nmyEvents.reverse();\n\nflow.set(\"events_recent_radar\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1580,
        "wires": [
            [
                "c36c71706e494b5e"
            ]
        ]
    },
    {
        "id": "5ec2d3ba52f944f5",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "only use selected camera",
        "property": "camera_selection",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 1460,
        "wires": [
            [
                "2e680914d7da5c94"
            ]
        ]
    },
    {
        "id": "c36c71706e494b5e",
        "type": "ui_template",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "group": "06dde4be9a9a6b27",
        "name": "last N radar events",
        "order": 2,
        "width": 8,
        "height": 19,
        "format": "<p class=\"label nr-dashboard-chart-title nr-dashboard-chart-titlel\">last N zone_radar events for radar_camera</p>\n<table class=\"table\">\n    <tr ng-repeat=\"payload in msg.payload\">\n        <td><img src=\"data:image/jpg;base64, {{payload.thumbnail_base64jpg}}\" alt=\"thumbnail\" /></td>\n        <td>\n            id: {{payload.id}} <br /> \n            label: {{payload.label}} <br />\n            top_score: {{payload.top_score}} <br />\n            frame_time: {{payload.frame_time_datestring}} <br />\n            direction: {{payload.direction_calc}} <br />\n            speed: {{payload.speed_calc}}\n        </td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1270,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "82bc0c11adb825f8",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "debug: event payload in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1420,
        "wires": []
    },
    {
        "id": "4abe0507c83f87a2",
        "type": "catch",
        "z": "28627559bebdc324",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 40,
        "wires": [
            [
                "a309589b69eb07e1"
            ]
        ]
    },
    {
        "id": "a309589b69eb07e1",
        "type": "debug",
        "z": "28627559bebdc324",
        "name": "catch: all - dashboard",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "02469f2425072f7b",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "",
        "group": "7866c2aa313ab8b9",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "events by object (60-min) for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1040,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "15797ab24727f84d",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "trigger Event query every 5-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 880,
        "wires": [
            [
                "158e6edae533bfdc",
                "79900a566af02159"
            ]
        ]
    },
    {
        "id": "736d1e21a49f446b",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "store last N frigate events as text, any zone",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_all\") || [];\n//Keep only last X elements\nvar myArrLength = 10;\n\n//invert array so OLDEST IS FIRST, for functions\nmyEvents.reverse();\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//keep only specific elements\nconst newObj = {\n    id: msg.payload.id, \n    label: msg.payload.label,  \n    direction_calc: msg.payload.direction_calc, \n    speed_calc: msg.payload.speed_calc, \n    };\n\n//add current event to end of array\nmyEvents.push(newObj);\n\n//invert array so NEWEST IS FIRST, for display\nmyEvents.reverse();\n\nflow.set(\"events_all\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1700,
        "wires": [
            [
                "5b307e65106f3540"
            ]
        ]
    },
    {
        "id": "5b307e65106f3540",
        "type": "ui_text",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "group": "7866c2aa313ab8b9",
        "order": 6,
        "width": 6,
        "height": 7,
        "name": "",
        "label": "last N events, text output",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "Courier,monospace",
        "fontSize": "10",
        "color": "#000000",
        "x": 1290,
        "y": 1700,
        "wires": []
    },
    {
        "id": "4c087723a1d698e9",
        "type": "ui_template",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "group": "06dde4be9a9a6b27",
        "name": "last N radar speeding events",
        "order": 3,
        "width": 8,
        "height": 12,
        "format": "<p class=\"label nr-dashboard-chart-title nr-dashboard-chart-titlel\">last N zone_radar speeding events for radar_camera (>20-mph)</p>\n<table class=\"table\">\n    <tr ng-repeat=\"payload in msg.payload\">\n        <td><img src=\"data:image/jpg;base64, {{payload.thumbnail_base64jpg}}\" alt=\"thumbnail\" /></td>\n        <td>\n            id: {{payload.id}} <br /> \n            label: {{payload.label}} <br />\n            top_score: {{payload.top_score}} <br />\n            frame_time: {{payload.frame_time_datestring}} <br />\n            direction: {{payload.direction_calc}} <br />\n            speed: {{payload.speed_calc}}\n        </td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "11fa2826769befc7",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "name": "",
        "group": "7866c2aa313ab8b9",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Events in zone_radar (5-min) for last 60-min",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1110,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "6d738ed81fefbedc",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "",
        "group": "06dde4be9a9a6b27",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "cumulative events by object since 0400",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1280,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "d856c68660eb2202",
        "type": "mqtt out",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "",
        "topic": "tm/events",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a5d65dd0e3566daa",
        "x": 1360,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0f65ceafe3f7c069",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "format last N radar event for output",
        "func": "\n\nconst newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\nnewMsg.payload.id = msg.frigate_event.id;\nnewMsg.payload.camera = msg.frigate_event.camera;\nnewMsg.payload.label = msg.frigate_event.label;\nnewMsg.payload.sub_label = msg.frigate_event.sub_label;\nnewMsg.payload.top_score = msg.frigate_event.top_score;\n\nnewMsg.payload.frame_time_datestring = new Date(msg.frigate_event.frame_time * 1000).toLocaleString();\nnewMsg.payload.frame_time = msg.frigate_event.frame_time;\nnewMsg.payload.start_time = msg.frigate_event.start_time;\nnewMsg.payload.end_time = msg.frigate_event.end_time;\n\nnewMsg.payload.entered_zones = msg.frigate_event.entered_zones; //array\nnewMsg.payload.direction_calc = msg.frigate_event.direction_calc;\nnewMsg.payload.speed_calc = msg.frigate_event.speed_calc;\n\nnewMsg.payload.thumbnail_base64jpg = msg.frigate_event_api_thumbnail;\n\nnewMsg.payload.location = msg.frigate_event.location;\n\nreturn newMsg;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1580,
        "wires": [
            [
                "e5391514131a2b5a",
                "d66541089b01306e"
            ]
        ]
    },
    {
        "id": "c90aed37b7a31d9e",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "name": "trigger Event query every 5-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1240,
        "wires": [
            [
                "584504e6c8935eaf"
            ]
        ]
    },
    {
        "id": "5417aae0d14fa661",
        "type": "ui_template",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "group": "7866c2aa313ab8b9",
        "name": "car speed stats for today, since 0400",
        "order": 2,
        "width": 6,
        "height": 7,
        "format": "<p class=\"label nr-dashboard-chart-title nr-dashboard-chart-titlel\">car speed stats for today, since 0400</p>\n<table class=\"table\">\n    <tr ng-repeat=\"payload in msg.payload\">\n        <td ng-repeat =\"(key,value) in payload\">{{key}}: </td>\n        <td ng-repeat =\"(key,value) in payload\">{{value}}</td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1130,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "f57e08e6fb9c0d09",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "only for zone_capture",
        "property": "payload.entered_zones",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "zone_capture",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "d23be15251ed6d73"
            ]
        ]
    },
    {
        "id": "d23be15251ed6d73",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "set flow.event_latest",
        "rules": [
            {
                "t": "set",
                "p": "event_latest",
                "pt": "flow",
                "to": "payload.label",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1840,
        "wires": [
            [
                "170ddffb726db9e0"
            ]
        ]
    },
    {
        "id": "4760bed60a7f392a",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 430,
        "y": 1900,
        "wires": [
            [
                "170ddffb726db9e0"
            ]
        ]
    },
    {
        "id": "09f99c931e5535bf",
        "type": "http request",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "frigate http api for thumbnail",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://frigate:5000//api/events/{{{frigate_event.id}}}/thumbnail.jpg",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 1460,
        "wires": [
            [
                "9226865e3385eb56",
                "aa0afb5180297e2b"
            ]
        ]
    },
    {
        "id": "08121a31488784bc",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "set frigate_event_api_thumbnail",
        "rules": [
            {
                "t": "set",
                "p": "frigate_event_api_thumbnail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1500,
        "wires": [
            [
                "0f65ceafe3f7c069"
            ]
        ]
    },
    {
        "id": "9226865e3385eb56",
        "type": "image",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "",
        "width": "175",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": false,
        "pass": false,
        "outputs": 0,
        "x": 1000,
        "y": 1460,
        "wires": []
    },
    {
        "id": "aa0afb5180297e2b",
        "type": "base64",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 840,
        "y": 1500,
        "wires": [
            [
                "08121a31488784bc"
            ]
        ]
    },
    {
        "id": "c2270f3050bf35ab",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "set frigate_event from payload",
        "rules": [
            {
                "t": "set",
                "p": "frigate_event",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 1540,
        "wires": [
            [
                "09f99c931e5535bf"
            ]
        ]
    },
    {
        "id": "5f3716d2176c3ab4",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "query events, daily summary last 10 days in zone_capture",
        "func": "//frame_time is already in seconds\n\nconst query = `\nSELECT\n    date(frame_time, 'unixepoch') as day,\n    label,\n    camera,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time > (unixepoch('now') - (86400 * 10))\n    AND camera = '${flow.get(\"camera_selection\")}'\n    AND entered_zones LIKE '%zone_capture%'\nGROUP BY\n    label, date(frame_time, 'unixepoch'), camera\nORDER BY\n    label, day, camera;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 600,
        "wires": [
            [
                "bdb4b259d648b1f0"
            ]
        ]
    },
    {
        "id": "bdb4b259d648b1f0",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 680,
        "y": 640,
        "wires": [
            [
                "ec7a0e0b1c62e91d"
            ]
        ]
    },
    {
        "id": "ec7a0e0b1c62e91d",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "structure daily summary payload",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //if label doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.label) < 0) {\n        newMsg[0].series.push(myItem.label);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.day)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.day);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n    }\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "b65e1877b1e04881"
            ]
        ]
    },
    {
        "id": "928b71f25ce6e7b6",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "query events, 1-h counts last 24-h in zone_capture",
        "func": "//frame_time is already in seconds\n\nconst query = `\nSELECT\n    strftime('%FT%H:00:00.000Z', frame_time, 'unixepoch') as hour,\n    label,\n    camera,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time > (unixepoch('now') - (86400 * 1))\n    AND camera = '${flow.get(\"camera_selection\")}'\n    AND entered_zones LIKE '%zone_capture%'\nGROUP BY\n    label, strftime('%F %H', frame_time, 'unixepoch'), camera\nORDER BY\n    label, hour, camera;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            [
                "c03516d1eb65598d"
            ]
        ]
    },
    {
        "id": "c03516d1eb65598d",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 640,
        "y": 780,
        "wires": [
            [
                "4f84bcb60e4be762"
            ]
        ]
    },
    {
        "id": "4f84bcb60e4be762",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "structure 1-hour counts last day",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //if label doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.label) < 0) {\n        newMsg[0].series.push(myItem.label);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.hour)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.hour);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n    }\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 740,
        "wires": [
            [
                "02469f2425072f7b"
            ]
        ]
    },
    {
        "id": "158e6edae533bfdc",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "name": "query events, 5-min event speed counts for last 1-h in zone_radar",
        "func": "//frame_time is already in seconds\n//frame_time as 5-minute intervals, rounded up\n\nconst query = `\nSELECT\n    strftime('%Y-%m-%d %H:%M:00', (frame_time + 299), 'unixepoch', '-' || ((frame_time + 299) % 300) || ' seconds', 'localtime') AS bin_time,\n    label,\n    camera,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time > (unixepoch('now') - (3600))\n    AND camera = '${flow.get(\"camera_selection\")}'\n    AND entered_zones LIKE '%zone_radar%'\nGROUP BY\n    label, strftime('%Y-%m-%d %H:%M:00', (frame_time + 299), 'unixepoch', '-' || ((frame_time + 299) % 300) || ' seconds', 'localtime'), camera\nORDER BY\n    label, bin_time, camera;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1080,
        "wires": [
            [
                "eff2193c8246a9d2"
            ]
        ]
    },
    {
        "id": "eff2193c8246a9d2",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "57fa6ca2b7d290e3"
            ]
        ]
    },
    {
        "id": "57fa6ca2b7d290e3",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "name": "structure 1-hour counts last day",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //if label doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.label) < 0) {\n        newMsg[0].series.push(myItem.label);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.bin_time)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.bin_time);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n    }\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1080,
        "wires": [
            [
                "11fa2826769befc7"
            ]
        ]
    },
    {
        "id": "170ddffb726db9e0",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "query events, daily cumulative counts in zone_capture",
        "func": "//frame_time is already in seconds\n\nconst query = `\nSELECT\n    label,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time >= unixepoch(strftime('%Y-%m-%dT04:00','now', 'localtime'),'utc')\n    AND camera = '${flow.get(\"camera_selection\")}'\n    AND entered_zones LIKE '%zone_capture%'\nGROUP BY \n    label\nORDER BY\n    label;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1800,
        "wires": [
            [
                "befe91e6862c72db"
            ]
        ]
    },
    {
        "id": "befe91e6862c72db",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 860,
        "y": 1840,
        "wires": [
            [
                "13a061996f9322f3",
                "98571c77b9801a83"
            ]
        ]
    },
    {
        "id": "13a061996f9322f3",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "structure daily object counts for chart",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\n\n//create bicycle_adj to be bicycle+motorcycle\n//create person_adj to be person - bicycle_adj\n\nconst motorcycleCount = msg.payload.find(item => item.label === 'motorcycle')?.count || 0;\nconst bicycleCount = msg.payload.find(item => item.label === 'bicycle')?.count || 0;\nconst personCount = msg.payload.find(item => item.label === 'person')?.count || 0;\n\nconst formattedData = [{\n  series: [...msg.payload.map(item => item.label), 'bicycle_adj', 'person_adj'],\n  data: [\n    ...(msg.payload.map(item => [item.count])),\n    [bicycleCount + motorcycleCount],\n    [personCount - (bicycleCount + motorcycleCount)]\n  ],\n  labels: [\"\"]\n}];\n\nmsg.payload = formattedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1800,
        "wires": [
            [
                "6d738ed81fefbedc"
            ]
        ]
    },
    {
        "id": "98571c77b9801a83",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "structure daily object counts for tm/events",
        "func": "//send as key:value pair for lable:count\n\n//create bicycle_adj to be bicycle+motorcycle\n//create person_adj to be person - bicycle_adj\n\n\n\nconst motorcycleCount = msg.payload.find(item => item.label === 'motorcycle')?.count || 0;\nconst bicycleCount = msg.payload.find(item => item.label === 'bicycle')?.count || 0;\nconst personCount = msg.payload.find(item => item.label === 'person')?.count || 0;\n\nconst formattedData = msg.payload.reduce((acc, curr) => {\n  acc[curr.label] = curr.count;\n\n  if (curr.label === 'bicycle') {\n    acc['bicycle_adj'] = (bicycleCount + motorcycleCount);\n  }\n\n  if (curr.label === 'person') {\n    acc['person_adj'] = (personCount - (bicycleCount + motorcycleCount));\n  }\n\n  return acc;\n}, {});\n\nformattedData['event_latest'] = flow.get(\"event_latest\");\n\nmsg.payload = formattedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1880,
        "wires": [
            [
                "d856c68660eb2202"
            ]
        ]
    },
    {
        "id": "584504e6c8935eaf",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "name": "query events, daily cum car counts in zone_radar with speed_calc",
        "func": "//frame_time is already in seconds\n//cars with speeds in zone_radar AND zone_capture since 0400 today\n\nconst query = `\nWITH results AS (\n  SELECT \n    COUNT(*) AS count,\n    AVG(ABS(speed_calc)) AS mean_speed,\n    MAX(CASE WHEN ntile = 5 THEN ABS(speed_calc) ELSE NULL END) AS p25_speed,\n    MAX(CASE WHEN ntile = 10 THEN ABS(speed_calc) ELSE NULL END) AS p50_speed,\n    MAX(CASE WHEN ntile = 15 THEN ABS(speed_calc) ELSE NULL END) AS p75_speed,\n    MAX(CASE WHEN ntile = 17 THEN ABS(speed_calc) ELSE NULL END) AS p85_speed,\n    MAX(ABS(speed_calc)) AS max_speed,\n    SUM(CASE WHEN ABS(speed_calc) > 25 THEN 1 ELSE 0 END) AS count_over_25,\n    JSON_GROUP_ARRAY(speed_calc) AS speeds\n  FROM \n    (SELECT \n       ABS(speed_calc) as speed_calc,\n       NTILE(20) OVER (ORDER BY ABS(speed_calc)) AS ntile\n     FROM \n       events\n     WHERE \n       frame_time >= unixepoch(strftime('%Y-%m-%dT04:00','now', 'localtime'),'utc') AND\n       label = 'car' AND\n       entered_zones LIKE '%zone_radar%' AND\n       entered_zones LIKE '%zone_capture%' AND\n       ABS(speed_calc) NOT NULL AND\n       camera = '${flow.get(\"camera_selection\")}'\n    )\n)\nSELECT \n  *, \n  p75_speed + 1.5 * (p75_speed - p25_speed) AS iqr_upper,\n  (SELECT COUNT(*) FROM json_each(results.speeds) WHERE json_each.value > p75_speed + 1.5 * (p75_speed - p25_speed)) AS iqr_upper_freq\nFROM \n  results;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1240,
        "wires": [
            [
                "9cf49f0891d25df1"
            ]
        ]
    },
    {
        "id": "9cf49f0891d25df1",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 760,
        "y": 1280,
        "wires": [
            [
                "6d81c8e3c89b68f6"
            ]
        ]
    },
    {
        "id": "6d81c8e3c89b68f6",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "name": "format payload for car speed daily",
        "func": "\nconst originalPayload = msg.payload;\n\nconst convertedPayload = Object.keys(originalPayload[0])\n  .filter(key => key !== \"speeds\")\n  .map(key => {\n    const value = originalPayload[0][key];\n    return { [key]: typeof value === \"number\" ? Math.round(value) : value };\n  });\n\nmsg.payload = convertedPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1240,
        "wires": [
            [
                "5417aae0d14fa661"
            ]
        ]
    },
    {
        "id": "7cc031e5a7d773a4",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 620,
        "y": 920,
        "wires": [
            [
                "39d895a16ca6f6f1",
                "62be7d38b991716c"
            ]
        ]
    },
    {
        "id": "79900a566af02159",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "query TimedSpeedCounts for last 60-min",
        "func": "//time is already in seconds\n//get for last 60-minutes, 3600 seconds\n\nconst query = `\nSELECT\n    strftime('%Y-%m-%d %H:%M:00', datetime(time, 'unixepoch', 'localtime'), '+0 minutes') AS time,\n    direction,\n    count,\n    ABS(average) as speed\nFROM\n    radar_timed_speed_counts\nWHERE\n    time > (unixepoch('now') - (3600))\n    AND radarName = '${flow.get(\"radar_selection\")}'\nORDER BY\n    time;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 880,
        "wires": [
            [
                "7cc031e5a7d773a4"
            ]
        ]
    },
    {
        "id": "39d895a16ca6f6f1",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "structure SQLite TimedSpeedCounts.counts",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, directions\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].direction = [];\n\n// time\n// count\n// direction\n\n\nmsg.payload.forEach((myItem) => {\n\n    //if direction doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.direction) < 0) {\n        newMsg[0].series.push(myItem.direction);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].findIndex((element) => element.x == String(new Date(myItem.time)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.time);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)][xIndex].y += myItem.count;\n    };\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 880,
        "wires": [
            [
                "cbb3b02ca505a55b"
            ]
        ]
    },
    {
        "id": "62be7d38b991716c",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "structure sqlite TimedSpeedCounts.speed_average",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, directions\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].direction = [];\n\n// time\n// speed\n// direction\n\n\nmsg.payload.forEach((myItem) => {\n\n   // use absolute value of speed, bc speeds outbound will be negative\n   myItem.speed = Math.abs(myItem.speed)\n\n   //if direction doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.direction) < 0) {\n        newMsg[0].series.push(myItem.direction);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].findIndex((element) => element.x == String(new Date(myItem.time)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.time);\n        thisDataPoint.y = myItem.speed;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)][xIndex].y += myItem.speed;\n    };\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "7db4b197df9eb075"
            ]
        ]
    },
    {
        "id": "cbb3b02ca505a55b",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "",
        "group": "7866c2aa313ab8b9",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "SQLite TimedSpeedCounts.counts (5-min) for last 60-min",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1090,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "7db4b197df9eb075",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "",
        "group": "7866c2aa313ab8b9",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "SQLite TimedSpeedCounts.speed_average (5-min) for last 60-min",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "bb08a223f0aaef0f",
        "type": "ui_dropdown",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select camera",
        "group": "202181a361213d6d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 920,
        "y": 120,
        "wires": [
            [
                "c7f00f59861cd00f"
            ]
        ]
    },
    {
        "id": "e3b795e05d7650b2",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "trigger: sensor selections, after 5-secs",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "f50a7968e032532a",
                "af02df2daa211e5b"
            ]
        ]
    },
    {
        "id": "c7f00f59861cd00f",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "camera_selection",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 120,
        "wires": [
            [
                "04c77d4233fbffd3"
            ]
        ]
    },
    {
        "id": "ff783e21c3b96d4b",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "radar_selection",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 180,
        "wires": [
            [
                "04c77d4233fbffd3"
            ]
        ]
    },
    {
        "id": "62c9240d45e9c8d6",
        "type": "ui_dropdown",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select radar",
        "group": "202181a361213d6d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 920,
        "y": 180,
        "wires": [
            [
                "ff783e21c3b96d4b"
            ]
        ]
    },
    {
        "id": "59d0c8b142295eee",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "set radars, default to camera_radar",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$globalContext(\"config.sensors.cameras.\" & payload & \".camera_radar\")",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "$keys($globalContext(\"config.sensors.radars\"))",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 180,
        "wires": [
            [
                "62c9240d45e9c8d6"
            ]
        ]
    },
    {
        "id": "f50a7968e032532a",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "set cameras, default to index 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$keys($globalContext(\"config.sensors.cameras\"))[0]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "$keys($globalContext(\"config.sensors.cameras\"))",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "bb08a223f0aaef0f",
                "59d0c8b142295eee"
            ]
        ]
    },
    {
        "id": "af02df2daa211e5b",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "set airquality_monitors, default to index 0",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$keys($globalContext(\"config.sensors.airquality_monitors\"))[0]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "$keys($globalContext(\"config.sensors.airquality_monitors\"))",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 240,
        "wires": [
            [
                "1feaed96b954867a"
            ]
        ]
    },
    {
        "id": "1feaed96b954867a",
        "type": "ui_dropdown",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select aq_monitor",
        "group": "202181a361213d6d",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 920,
        "y": 240,
        "wires": [
            [
                "946c6bc353743bc4"
            ]
        ]
    },
    {
        "id": "946c6bc353743bc4",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "2df66c6bc991dbf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "aq_selection",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "04c77d4233fbffd3"
            ]
        ]
    },
    {
        "id": "a3672e4c4c84d721",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "trigger Event query every 5-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2040,
        "wires": [
            [
                "34361a18f847df07"
            ]
        ]
    },
    {
        "id": "e5ed08571761bd2c",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "aq gas last 24-hours",
        "group": "62cdf198fe42de7e",
        "order": 1,
        "width": 6,
        "height": 7,
        "label": "aq gas PPM, every 5-min (or based on settings) for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "441e03047af79373",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "query airquality, for every entry",
        "func": "//entryDateTime is already in seconds\n\nconst query = `\nSELECT\n    strftime('%Y-%m-%d %H:%M:00', datetime(entryDateTime, 'unixepoch', 'localtime'), '+0 minutes') AS datetime,\n    gas_red, \n    gas_oxi, \n    gas_nh3,\n    pm01, \n    pm025, \n    pm10,\n    temp,\n    bar,\n    hum,\n    dew\nFROM\n    airquality\nWHERE\n    entryDateTime > (unixepoch('now') - (86400 * 1))\n    AND sensorName = '${flow.get(\"aq_selection\")}'\nORDER BY\n    entryDateTime;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2040,
        "wires": [
            [
                "9d1978d68c96feb9"
            ]
        ]
    },
    {
        "id": "9d1978d68c96feb9",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 560,
        "y": 2080,
        "wires": [
            [
                "2227d1c8d929c91d",
                "149757a20cc50973",
                "95871652f30bc9ce",
                "7d5875326501443c",
                "c13f03809fbd9809"
            ]
        ]
    },
    {
        "id": "2227d1c8d929c91d",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "structure payload, gas",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nconst result = [{\n    \"series\": [\"gas_red\", \"gas_oxi\", \"gas_nh3\"],\n    \"data\": [\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.gas_red })),\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.gas_oxi })),\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.gas_nh3 }))\n    ],\n    \"labels\": [\"\"]\n}];\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2040,
        "wires": [
            [
                "e5ed08571761bd2c"
            ]
        ]
    },
    {
        "id": "12df4fdffa628238",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "d16177f416c9a0ef",
        "name": "query events, 30-min bins last 24-h in zone_capture",
        "func": "//frame_time is already in seconds\n//frame_time as 5-minute intervals, rounded up\n\nconst query = `\nSELECT\n    strftime('%Y-%m-%d %H:%M:00', (frame_time + 1799), 'unixepoch', '-' || ((frame_time + 1799) % 1800) || ' seconds', 'localtime') AS bin_time,\n    label,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time > (unixepoch('now') - (86400 * 1))\n    AND camera = '${flow.get(\"camera_selection\")}'\n    AND entered_zones LIKE '%zone_capture%'\n    AND label IN ('car')\nGROUP BY\n    strftime('%Y-%m-%d %H:%M:00', (frame_time + 1799), 'unixepoch', '-' || ((frame_time + 1799) % 1800) || ' seconds', 'localtime'), label\nORDER BY\n    label, bin_time;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2300,
        "wires": [
            [
                "6a292f3905fe5405"
            ]
        ]
    },
    {
        "id": "6a292f3905fe5405",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "d16177f416c9a0ef",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 680,
        "y": 2340,
        "wires": [
            [
                "76e813b1b7a4b63e"
            ]
        ]
    },
    {
        "id": "76e813b1b7a4b63e",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "d16177f416c9a0ef",
        "name": "structure bin_counts for last day",
        "func": "const series = {};\nconst labels = [];\n\nmsg.payload.forEach((item) => {\n    const timestamp = new Date(item.bin_time);\n    if (!series[item.label]) {\n        series[item.label] = [];\n    }\n    series[item.label].push({ x: timestamp, y: item.count });\n    if (!labels.includes(item.label)) {\n        labels.push(item.label);\n    }\n});\n\nconst result = [{\n    series: labels,\n    data: Object.values(series),\n    labels: [\"\"]\n}];\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2300,
        "wires": [
            [
                "5cf61952cb6823de"
            ]
        ]
    },
    {
        "id": "5cf61952cb6823de",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "d16177f416c9a0ef",
        "name": "events (30-min) last 24-hours",
        "group": "62cdf198fe42de7e",
        "order": 2,
        "width": 6,
        "height": 7,
        "label": "events by label, every 30-min for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "f920233df1bbb23f",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "aq PM last 24-hours",
        "group": "62cdf198fe42de7e",
        "order": 3,
        "width": 6,
        "height": 7,
        "label": "aq PM ug/m3, every 5-min (or based on settings) for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "149757a20cc50973",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "structure payload, PM",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nconst result = [{\n    \"series\": [\"pm01\", \"pm025\", \"pm10\"],\n    \"data\": [\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.pm01 })),\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.pm025 })),\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.pm10 }))\n    ],\n    \"labels\": [\"\"]\n}];\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2080,
        "wires": [
            [
                "f920233df1bbb23f"
            ]
        ]
    },
    {
        "id": "b8342af470189c50",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "aq TEMP, DEW last 24-hours",
        "group": "62cdf198fe42de7e",
        "order": 4,
        "width": 6,
        "height": 7,
        "label": "aq TEMP, DEW, every 5-min (or based on settings) for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1140,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "95871652f30bc9ce",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "structure payload, temp, dew",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nconst result = [{\n    \"series\": [\"temp\", \"dew\"],\n    \"data\": [\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.temp })),\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.dew }))\n    ],\n    \"labels\": [\"\"]\n}];\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2120,
        "wires": [
            [
                "b8342af470189c50"
            ]
        ]
    },
    {
        "id": "8a82204bdfcdddb9",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "aq HUM last 24-hours",
        "group": "62cdf198fe42de7e",
        "order": 5,
        "width": 6,
        "height": 7,
        "label": "aq HUM, every 5-min (or based on settings) for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "7d5875326501443c",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "structure payload, hum",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nconst result = [{\n    \"series\": [\"hum\"],\n    \"data\": [\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.hum })),\n    ],\n    \"labels\": [\"\"]\n}];\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2160,
        "wires": [
            [
                "8a82204bdfcdddb9"
            ]
        ]
    },
    {
        "id": "c1adf5e2bd669713",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "aq BAR last 24-hours",
        "group": "62cdf198fe42de7e",
        "order": 6,
        "width": 6,
        "height": 7,
        "label": "aq BAR, every 5-min (or based on settings) for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "c13f03809fbd9809",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "7c19b3698bb02613",
        "name": "structure payload, bar",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nconst result = [{\n    \"series\": [\"bar\"],\n    \"data\": [\n        msg.payload.map(item => ({ \"x\": new Date(item.datetime), \"y\": item.bar })),\n    ],\n    \"labels\": [\"\"]\n}];\n\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2200,
        "wires": [
            [
                "c1adf5e2bd669713"
            ]
        ]
    },
    {
        "id": "6a05187a692bed7c",
        "type": "ui_form",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "",
        "label": "Create new Comment",
        "group": "d3f63882e39b03a6",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Effective Date (start of comment period)",
                "value": "effective_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Effective Time",
                "value": "effective_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Expiration Date (end of comment period)",
                "value": "expiration_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Expiration Time",
                "value": "expiration_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Comment",
                "value": "comment",
                "type": "multiline",
                "required": false,
                "rows": 3
            },
            {
                "label": "Commenter Name (or description)",
                "value": "name",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "effective_date": "",
            "effective_time": "",
            "expiration_date": "",
            "expiration_time": "",
            "comment": "",
            "name": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "8d65b604e8d9e7f9"
            ]
        ]
    },
    {
        "id": "f27b6d01ae7836d6",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 700,
        "y": 160,
        "wires": [
            [
                "840802d34d143ded"
            ]
        ]
    },
    {
        "id": "8f0bcaf04756da4f",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "create table comments",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS comments (id TEXT PRIMARY KEY, effectiveDateTime TIMESTAMP, expirationDateTime TIMESTAMP, entryDateTime TIMESTAMP, comment TEXT, commenter_name TEXT);",
        "x": 380,
        "y": 160,
        "wires": [
            [
                "f27b6d01ae7836d6"
            ]
        ]
    },
    {
        "id": "e8b8e45c4bc045d8",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "select latest 5 rows from comments",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM comments ORDER BY entryDateTime DESC LIMIT 5;",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "f27b6d01ae7836d6"
            ]
        ]
    },
    {
        "id": "840802d34d143ded",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "sqlite select last 5 comments",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "8d65b604e8d9e7f9",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "create comment payload",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\n//create effectiveDateTime, if no date, use current date, if no time, leave as default\nconst effectiveDateTime = (msg.payload.effective_date) ? new Date(msg.payload.effective_date) : new Date();\nif (msg.payload.effective_time) {\n    const effectiveTime = new Date(msg.payload.effective_time);\n    \n    effectiveDateTime.setTime(effectiveTime.getTime());\n}\n\n//create expirationDateTime, if no date, leave undefined\nconst expirationDateTime = (msg.payload.expiration_date) ? new Date(msg.payload.expiration_date) : undefined;\nif (msg.payload.expiration_time) {\n    const expirationTime = new Date(msg.payload.expiration_time);\n\n    expirationDateTime.setTime(expirationTime.getTime());\n}\n\n//create entryDateTime\nconst entryDateTime = new Date();\n\nnewMsg.payload.id = entryDateTime.getTime() + '-' + Math.floor(Math.random() * 0xFFFFFFFF).toString(16).padStart(8, '0');\nnewMsg.payload.effectiveDateTime = effectiveDateTime;\nnewMsg.payload.expirationDateTime = expirationDateTime;\nnewMsg.payload.entryDateTime = entryDateTime;\nnewMsg.payload.comment = msg.payload.comment;\nnewMsg.payload.commenter_name = msg.payload.name;\n\nconst obj = newMsg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nnewMsg.params = keyedObj;\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "db1f35650c8d6448"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "db1f35650c8d6448",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO comments (id, effectiveDateTime, expirationDateTime, entryDateTime, comment, commenter_name)\nVALUES ($id, $effectiveDateTime, $expirationDateTime, $entryDateTime, $comment, $commenter_name);\n",
        "name": "tmdb.comments, Prepared Statement",
        "x": 710,
        "y": 100,
        "wires": [
            [
                "d53997b3fec84e3a"
            ]
        ]
    },
    {
        "id": "f43a276d3a899fe8",
        "type": "ui_form",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "",
        "label": "Generate Events JSON",
        "group": "eab37b30ecd3f935",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Event start date (default 7-days ago)",
                "value": "start_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Event start time",
                "value": "start_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Event end date (default now)",
                "value": "end_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Event end time",
                "value": "end_time",
                "type": "time",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "start_date": "",
            "start_time": "",
            "end_date": "",
            "end_time": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "c45589c369c843a5",
                "c25ade7ddaeca697"
            ]
        ]
    },
    {
        "id": "c25ade7ddaeca697",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "debug: JSON events form input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 660,
        "wires": []
    },
    {
        "id": "c45589c369c843a5",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "create events query",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\n//create startDateTime, if no date, use 7 days ago, if no time, leave as default\nconst startDateTime = (msg.payload.start_date) ? new Date(msg.payload.start_date) : new Date(new Date().setDate(new Date().getDate() - 7));\nif (msg.payload.start_time) {\n    const startTime = new Date(msg.payload.start_time);\n    \n    startDateTime.setTime(startTime.getTime());\n}\n\n//create endDateTime, if no date, use current date, if no time, leave as default\nconst endDateTime = (msg.payload.end_date) ? new Date(msg.payload.end_date) : new Date();\nif (msg.payload.end_time) {\n    const endTime = new Date(msg.payload.end_time);\n\n    endDateTime.setTime(endTime.getTime());\n}\n\nnewMsg.payload.startDateTime = startDateTime.getTime()/1000;\nnewMsg.payload.endDateTime = endDateTime.getTime()/1000;\n\nnewMsg.topic = \"SELECT * FROM events WHERE start_time >= '\"+ newMsg.payload.startDateTime +\"' AND end_time <= '\"+ newMsg.payload.endDateTime +\"';\";\n\nlet formatstartDateTime = new Date(newMsg.payload.startDateTime * 1000).toISOString();\nlet formatendDateTime = new Date(newMsg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.template = `\n    <h3>Generated Events JSON</h3>\n    Last generated:\n    <table>\n        <tr>\n            <td>Start:</td>\n            <td>${formatstartDateTime}</td>\n        </tr>\n        <tr>\n            <td>End:</td> \n            <td>${formatendDateTime}</td>\n        </tr>\n    </table>\n    <ul>\n        <li><a href=\"/files/events.json\">events.json</a></li>\n    </ul>\n`;\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "44f3b2f2c2ae88fe"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "f31a598d.9fd2c8",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "Set base path",
        "func": "//restrict to c:\\temp\\\nvar basePath = \"code/nodered/db/\";\nvar filename = msg.req.params.fn;\n\n\nif(filename.includes(\"..\\\\\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} else if(filename.includes(\"../\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} \n//TODO: add more checks\n\nmsg.filename = basePath + filename;\nreturn [msg, null];//fire output 1\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "34dc99e5.495466"
            ],
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "98261154.3006",
        "type": "http response",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 440,
        "wires": []
    },
    {
        "id": "34dc99e5.495466",
        "type": "file in",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 470,
        "y": 380,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "38d65d59.1d8aa2",
        "type": "catch",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 480,
        "wires": [
            [
                "3b8014a.86ad8ec",
                "5b18a8e7.fb8da8"
            ]
        ]
    },
    {
        "id": "3b8014a.86ad8ec",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "Set 404",
        "func": "msg.payload = msg.error;\nmsg.statusCode = 404;//resource not found\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "5b18a8e7.fb8da8",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 520,
        "wires": []
    },
    {
        "id": "5de7cbb4.fa21a4",
        "type": "comment",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "Create http endpoint <nodered>/files/xxx  where xxx is the file name to download",
        "info": "",
        "x": 320,
        "y": 340,
        "wires": []
    },
    {
        "id": "67ecfa7f.3f0e24",
        "type": "http in",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "url": "/files/:fn",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "f31a598d.9fd2c8"
            ]
        ]
    },
    {
        "id": "7050ed881890ce4d",
        "type": "comment",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "enable download link",
        "info": "",
        "x": 360,
        "y": 740,
        "wires": []
    },
    {
        "id": "f2bd56710ba03238",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 890,
        "y": 840,
        "wires": [
            [
                "b4e0b45a7bedd728"
            ]
        ]
    },
    {
        "id": "ecb0810a22dc4a5c",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "c45589c369c843a5"
            ]
        ]
    },
    {
        "id": "b4e0b45a7bedd728",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "",
        "filename": "/db/events.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1180,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5124f45846b94ef0",
        "type": "ui_toast",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "Events JSON output created (download available)",
        "name": "",
        "x": 1180,
        "y": 780,
        "wires": []
    },
    {
        "id": "82073a9c3e0f504f",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "format events creation notification",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\nlet startDateTime = new Date(msg.payload.startDateTime * 1000).toISOString();\nlet endDateTime = new Date(msg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.topic = \"<div><b>Created events.json withing DateTimes</b></div>\"\nnewMsg.payload = \"<div><span>Start: \" + startDateTime + \"</span> <br /> <span>End: \" + endDateTime +\"</span></div>\";\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 780,
        "wires": [
            [
                "5124f45846b94ef0"
            ]
        ]
    },
    {
        "id": "38b44ecb9288caf2",
        "type": "ui_form",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "label": "Generate Radar JSON",
        "group": "f0ca9c7dffb5ae3c",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Radar start date (default 7-days ago)",
                "value": "start_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Radar start time",
                "value": "start_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Radar end date (default now)",
                "value": "end_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Radar end time",
                "value": "end_time",
                "type": "time",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "start_date": "",
            "start_time": "",
            "end_date": "",
            "end_time": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 160,
        "y": 960,
        "wires": [
            [
                "91cae91e61fcea38",
                "55b8ab3b2b7af294"
            ]
        ]
    },
    {
        "id": "55b8ab3b2b7af294",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "debug: JSON radar form input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 960,
        "wires": []
    },
    {
        "id": "790a89794204c383",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_dov query",
        "func": "msg.topic = \"SELECT * FROM radar_dov WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1140,
        "wires": [
            [
                "314a302b5d86fb5a"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "314a302b5d86fb5a",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1020,
        "y": 1140,
        "wires": [
            [
                "7dba386e57337c72"
            ]
        ]
    },
    {
        "id": "b00e6ad2a4612cad",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "91cae91e61fcea38"
            ]
        ]
    },
    {
        "id": "7dba386e57337c72",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_dov.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1290,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "04df9cb8c0753abb",
        "type": "ui_toast",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "Events JSON output created (download available)",
        "name": "",
        "x": 1140,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3557178575375eb6",
        "type": "comment",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "enable download link when generated",
        "info": "",
        "x": 210,
        "y": 1080,
        "wires": []
    },
    {
        "id": "29583ca6de66fedf",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "format radar creation notification",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\nlet startDateTime = new Date(msg.payload.startDateTime * 1000).toISOString();\nlet endDateTime = new Date(msg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.topic = \"<div><b>Created radar.json withing DateTimes</b></div>\"\nnewMsg.payload = \"<div><span>Start: \" + startDateTime + \"</span> <br /> <span>End: \" + endDateTime +\"</span></div>\";\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "04df9cb8c0753abb"
            ]
        ]
    },
    {
        "id": "91cae91e61fcea38",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar dates for query",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\n//create startDateTime, if no date, use 7 days ago, if no time, leave as default\nconst startDateTime = (msg.payload.start_date) ? new Date(msg.payload.start_date) : new Date(new Date().setDate(new Date().getDate() - 7));\nif (msg.payload.start_time) {\n    const startTime = new Date(msg.payload.start_time);\n    \n    startDateTime.setTime(startTime.getTime());\n}\n\n//create endDateTime, if no date, use current date, if no time, leave as default\nconst endDateTime = (msg.payload.end_date) ? new Date(msg.payload.end_date) : new Date();\nif (msg.payload.end_time) {\n    const endTime = new Date(msg.payload.end_time);\n\n    endDateTime.setTime(endTime.getTime());\n}\n\nnewMsg.payload.startDateTime = startDateTime.getTime()/1000;\nnewMsg.payload.endDateTime = endDateTime.getTime() / 1000;\n\nlet formatstartDateTime = new Date(newMsg.payload.startDateTime * 1000).toISOString();\nlet formatendDateTime = new Date(newMsg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.template = `\n    <h3>Generated Radar JSON</h3>\n    Last generated:\n    <table>\n        <tr>\n            <td>Start:</td> \n            <td>${formatstartDateTime}</td>\n        </tr>\n        <tr>\n            <td>End:</td> \n            <td>${formatendDateTime}</td>\n        </tr>\n    </table>\n    <ul>\n        <li><a href=\"/files/radar_dov.json\">radar_dov.json</a></li>\n        <li><a href=\"/files/radar_timed_speed_counts.json\">radar_timed_speed_counts.json</a> </li>\n        <li><a href=\"/files/radar_raw_speed_magnitude.json\">radar_raw_speed_magnitude.json</a> </li>\n        <li><a href=\"/files/radar_raw_speed_magnitude_single.json\">radar_raw_speed_magnitude_single.json</a> </li>\n        <li><a href=\"/files/radar_oc_payload.json\">radar_oc_payload.json</a> </li>\n    </ul>\n`;\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1000,
        "wires": [
            [
                "c00796fd5642dae0"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "68fecdfda8e4e774",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_timed_speed_counts query",
        "func": "msg.topic = \"SELECT * FROM radar_timed_speed_counts WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1200,
        "wires": [
            [
                "8c660460752a27b2"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "8c660460752a27b2",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1020,
        "y": 1200,
        "wires": [
            [
                "d50d86038fe1af32"
            ]
        ]
    },
    {
        "id": "d50d86038fe1af32",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_timed_speed_counts.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1340,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "b5e099e92ce27bf6",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_raw_speed_magnitude query",
        "func": "msg.topic = \"SELECT * FROM radar_raw_speed_magnitude WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1260,
        "wires": [
            [
                "f77b0f12f5047d25"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "f77b0f12f5047d25",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1020,
        "y": 1260,
        "wires": [
            [
                "fbf290de9b7b858f"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "fbf290de9b7b858f",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_raw_speed_magnitude.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1350,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "35dd409613d47a60",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_raw_speed_magnitude_single query",
        "func": "msg.topic = \"SELECT * FROM radar_raw_speed_magnitude_single WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "729b953264ce47aa"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "729b953264ce47aa",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1020,
        "y": 1320,
        "wires": [
            [
                "23b1ba527419b29b"
            ]
        ]
    },
    {
        "id": "23b1ba527419b29b",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_raw_speed_magnitude_single.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1370,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "b519f0927284d44a",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_oc_payload query",
        "func": "msg.topic = \"SELECT * FROM radar_oc_payload WHERE start_time >= '\"+ msg.payload.startDateTime +\"' AND end_time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1380,
        "wires": [
            [
                "2f3cc99c3c41ab90"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "2f3cc99c3c41ab90",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1020,
        "y": 1380,
        "wires": [
            [
                "62e90c91d0238273"
            ]
        ]
    },
    {
        "id": "62e90c91d0238273",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_oc_payload.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1320,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "6e2a152aecd929d3",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "group": "d3f63882e39b03a6",
        "name": "comments instructions",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h2> Create Comments</h2>\n<p>Comments are date-sensitive entries about the Traffic Monitor status, deployment, location, conditions, construction, etc.\n    <br />\n    These comments do not directly impact any display or counts but may be used for downstream analysis. Do not include any personally identifiable information.\n</p>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 140,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c00796fd5642dae0",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "group": "f0ca9c7dffb5ae3c",
        "name": "download Radar JSON",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 1080,
        "wires": [
            [
                "29583ca6de66fedf",
                "790a89794204c383",
                "68fecdfda8e4e774",
                "b5e099e92ce27bf6",
                "35dd409613d47a60",
                "b519f0927284d44a"
            ]
        ]
    },
    {
        "id": "b43ee265985f0f56",
        "type": "ui_ui_control",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "control JSON download groups",
        "events": "change",
        "x": 1110,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "44f3b2f2c2ae88fe",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "group": "eab37b30ecd3f935",
        "name": "download Events JSON",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 780,
        "wires": [
            [
                "f2bd56710ba03238",
                "82073a9c3e0f504f"
            ]
        ]
    },
    {
        "id": "60bbb02aeab1379c",
        "type": "ui_button",
        "z": "239d7b3ba410ad5e",
        "name": "show events_json",
        "group": "c0886ba4111fbfae",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate Events JSON",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"group\":{\"show\":[\"Database_Tab_Events_JSON_Generator\"]}}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 830,
        "y": 460,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "0a1c47e427d83c4b",
        "type": "ui_button",
        "z": "239d7b3ba410ad5e",
        "name": "show radar_json",
        "group": "c0886ba4111fbfae",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate Radar JSON",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"group\":{\"show\":[\"Database_Tab_Radar_JSON_Generator\"]}}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 840,
        "y": 500,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "4611d2864ef75f3c",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"group\":{\"hide\":[\"Database_Tab_Events_JSON_Generator\",\"Database_Tab_Radar_JSON_Generator\"]}}",
        "payloadType": "json",
        "x": 870,
        "y": 420,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "9e38989f2e13e4d7",
        "type": "ui_button",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "hide JSON",
        "group": "c0886ba4111fbfae",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Hide JSON generators",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"Database_Tab_Events_JSON_Generator\",\"Database_Tab_Radar_JSON_Generator\"]}}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 850,
        "y": 560,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "a8c2985e.d23ad8",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "group": "c0886ba4111fbfae",
        "name": "download Events DB",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<h3>Events database and tables</h3>\n<div>\n    <p><a href=\"/files/tmdb.sqlite\">tmdb.sqlite</a> (entire database)</p>\n    <ul>\n        <li>events</li>\n        <li>comments</li>\n    </ul>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2b95a63a76f28f09",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "group": "c0886ba4111fbfae",
        "name": "download DB instructions",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h2>Download databases</h2>\n<p>The links below will download the entire Traffic Monitor device events and/or sensor SQLite database(s) to your current browser. \n    Database will include events and/or sensor readings only from this device while the Traffic Monitor was deployed and running.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 830,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c30220553ae11805",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "group": "c0886ba4111fbfae",
        "name": "json button instructions",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<h2>Generate JSON payloads</h2>\n<p>You may also generate selectable DateTime-constrained JSON payloads from events and/or radar database tables using the respective below buttons.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "d53997b3fec84e3a",
        "type": "ui_toast",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 100,
        "wires": []
    }
]