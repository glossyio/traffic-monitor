[
    {
        "id": "94d07e407c25f282",
        "type": "tab",
        "label": "flow-radar-01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9269520ddb532b00",
        "type": "tab",
        "label": "event-speed-assignment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7932be9acc7391c",
        "type": "tab",
        "label": "thingsboard-telemetry",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28627559bebdc324",
        "type": "tab",
        "label": "dashboard-monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "239d7b3ba410ad5e",
        "type": "tab",
        "label": "dashboard-database",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "05fcb02c571dcfee",
        "type": "tab",
        "label": "dashboard-system",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa9f914901f79645",
        "type": "tab",
        "label": "dashboard-config",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f410f6aac9d1a3fc",
        "type": "tab",
        "label": "system-metrics",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "04cc3b7b3e019683",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "@O - TimedSpeedCounts",
        "style": {
            "label": true
        },
        "nodes": [
            "35c0bee67148cfa7",
            "526eb1967dda78c4",
            "e3aa00721bf6faff",
            "54ae78579d38e81b",
            "831310a0a0549da3",
            "13059459bbc48328",
            "585b91535ae4e8a3",
            "477f8523e9784029",
            "5c4e5a6064580e23"
        ],
        "x": 394,
        "y": 759,
        "w": 1112,
        "h": 302
    },
    {
        "id": "1d00b3011a12b204",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "ON - DetectedObjectVelocity, for single object",
        "style": {
            "label": true
        },
        "nodes": [
            "67f64c75edc0ef13",
            "0749f4279a336caf",
            "56b9668b4f365f7b",
            "ef4ad9faa7ec12e7",
            "81c98c5e01bbfe09",
            "87412467471d97a6",
            "8a653740e4fc4f6a",
            "313905edff24218d"
        ],
        "x": 394,
        "y": 499,
        "w": 972,
        "h": 242
    },
    {
        "id": "e138c998bef7d520",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "OS O3 - payload, raw speed+magnitude",
        "style": {
            "label": true
        },
        "nodes": [
            "d88af763b70480d0",
            "5f62cb744592b108",
            "dd48c6017098fe1d",
            "e113c181976ad898",
            "e1461efd368bbee3",
            "825ddab22453e37c",
            "1ddee1427e02c980",
            "d7eb8cf6f750f369",
            "62f7d1214aa96cc0"
        ],
        "x": 394,
        "y": 1079,
        "w": 1192,
        "h": 282
    },
    {
        "id": "e5b5b46703e248e9",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "OS O1 (equivalent) - payload, raw speed+magnitude",
        "style": {
            "label": true
        },
        "nodes": [
            "1d1c479b2567efbd",
            "795c120719c982de",
            "8180a480a85a6636",
            "a1583c68a1dad33e",
            "382bf388390f91bd",
            "6580ac98734eba2e",
            "56ce714b7a23585b",
            "c198bb9e360d93ef"
        ],
        "x": 394,
        "y": 1379,
        "w": 1252,
        "h": 262
    },
    {
        "id": "0a6e123f5e53c029",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "group summary daily",
        "style": {
            "label": true
        },
        "nodes": [
            "404ac097795a2da0",
            "b65e1877b1e04881",
            "5f3716d2176c3ab4",
            "bdb4b259d648b1f0",
            "ec7a0e0b1c62e91d"
        ],
        "x": 14,
        "y": 319,
        "w": 852,
        "h": 202
    },
    {
        "id": "5aac1262472b0205",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "group frigate api/events/summary",
        "style": {
            "label": true
        },
        "nodes": [
            "08d030ffc3fe6adb",
            "b241a0ef89fd7ce4",
            "91d3f8965f62f4b0",
            "eb140f61419c6a08"
        ],
        "x": 14,
        "y": 79,
        "w": 852,
        "h": 202
    },
    {
        "id": "5173f4b3ac03407a",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "show object counts/speeds last 24-hours",
        "style": {
            "label": true
        },
        "nodes": [
            "3985037239b671c5",
            "02469f2425072f7b",
            "928b71f25ce6e7b6",
            "c03516d1eb65598d",
            "4f84bcb60e4be762"
        ],
        "x": 14,
        "y": 559,
        "w": 1052,
        "h": 222
    },
    {
        "id": "76417db2b472ef4f",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "radar TimedSpeedCounts (.counts, .speed_average)",
        "style": {
            "label": true
        },
        "nodes": [
            "15797ab24727f84d",
            "0e1614cf2e5f9942",
            "7cc031e5a7d773a4",
            "79900a566af02159",
            "39d895a16ca6f6f1",
            "62be7d38b991716c",
            "cbb3b02ca505a55b",
            "7db4b197df9eb075"
        ],
        "x": 14,
        "y": 839,
        "w": 1178,
        "h": 508
    },
    {
        "id": "9b9e4fc50b744fc3",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "last N events, radar",
        "style": {
            "label": true
        },
        "nodes": [
            "d66541089b01306e",
            "2e680914d7da5c94",
            "c788d632f5e93a73",
            "e5391514131a2b5a",
            "5ec2d3ba52f944f5",
            "c36c71706e494b5e",
            "82bc0c11adb825f8",
            "736d1e21a49f446b",
            "5b307e65106f3540",
            "4c087723a1d698e9",
            "0f65ceafe3f7c069",
            "f5d2d92d50d18ce2",
            "c2270f3050bf35ab",
            "3214e8cd3ea79630"
        ],
        "x": 224,
        "y": 1539,
        "w": 1022,
        "h": 542
    },
    {
        "id": "453513c49e4b1b60",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "cumulative events today by object",
        "style": {
            "label": true
        },
        "nodes": [
            "6d738ed81fefbedc",
            "d856c68660eb2202",
            "f57e08e6fb9c0d09",
            "d23be15251ed6d73",
            "4760bed60a7f392a",
            "170ddffb726db9e0",
            "befe91e6862c72db",
            "13a061996f9322f3",
            "98571c77b9801a83"
        ],
        "x": 154,
        "y": 2139,
        "w": 1172,
        "h": 322
    },
    {
        "id": "1bd1f21fa0390c69",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "car event speed stats",
        "style": {
            "label": true
        },
        "nodes": [
            "c90aed37b7a31d9e",
            "5417aae0d14fa661",
            "584504e6c8935eaf",
            "9cf49f0891d25df1",
            "6d81c8e3c89b68f6"
        ],
        "x": 54,
        "y": 2519,
        "w": 1252,
        "h": 242
    },
    {
        "id": "0a5faeac9fbd6d55",
        "type": "group",
        "z": "9269520ddb532b00",
        "name": "frigate event mqtt end",
        "style": {
            "label": true
        },
        "nodes": [
            "2deec9d340d5ed26",
            "76911cc7f28e7da2"
        ],
        "x": 54,
        "y": 319,
        "w": 372,
        "h": 122
    },
    {
        "id": "71c085648c20e329",
        "type": "group",
        "z": "9269520ddb532b00",
        "name": "calc direction, speed on frigate event",
        "style": {
            "label": true
        },
        "nodes": [
            "7992eb250ae9d20f",
            "7f063afdbac396ce",
            "cbef8a3acc3d1495",
            "ad7393ac18c4083b",
            "b39062019fac1a66",
            "7f50d9d83bdb7f14",
            "c123fc5ed5e14e8a",
            "673e45159a2dfccf"
        ],
        "x": 54,
        "y": 479,
        "w": 1092,
        "h": 302
    },
    {
        "id": "35a68b2baec193d2",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "OC - payload, object summary+vehicle length",
        "style": {
            "label": true
        },
        "nodes": [
            "3fc9a8ed49514be5",
            "97a0c601b8918ede",
            "772d6574f4181a44",
            "c768d8ea1b8cf953",
            "b277514c42c255e9",
            "27b2f56921067f35",
            "a804f93d06561c17",
            "cceefa4b9aa98acc"
        ],
        "x": 394,
        "y": 1659,
        "w": 1032,
        "h": 262
    },
    {
        "id": "53e4faf6d3ece28c",
        "type": "group",
        "z": "9269520ddb532b00",
        "name": "record event to database and pass to dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "510b389597efaf1b",
            "b77bb1c374a198e4",
            "61d6a19c99c60e0b",
            "a96d834e3571c549",
            "e256d5e89eb39332",
            "d8786159d48401b9",
            "7f0ef976c7b79245",
            "59a579e6a1fa9a08",
            "274f87c31437c2d7"
        ],
        "x": 334,
        "y": 899,
        "w": 892,
        "h": 322
    },
    {
        "id": "541d31d14bcd8b00",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "comments table",
        "style": {
            "label": true
        },
        "nodes": [
            "6a05187a692bed7c",
            "f27b6d01ae7836d6",
            "8f0bcaf04756da4f",
            "e8b8e45c4bc045d8",
            "840802d34d143ded",
            "8d65b604e8d9e7f9",
            "db1f35650c8d6448",
            "6e2a152aecd929d3"
        ],
        "x": 14,
        "y": 19,
        "w": 1192,
        "h": 222
    },
    {
        "id": "0e3b2be7bcc3d3b8",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "DOWNLOAD tmdb - create JSON Events file from query",
        "style": {
            "label": true
        },
        "nodes": [
            "f43a276d3a899fe8",
            "c25ade7ddaeca697",
            "c45589c369c843a5",
            "f2bd56710ba03238",
            "ecb0810a22dc4a5c",
            "b4e0b45a7bedd728",
            "5124f45846b94ef0",
            "7050ed881890ce4d",
            "82073a9c3e0f504f",
            "44f3b2f2c2ae88fe"
        ],
        "x": 14,
        "y": 619,
        "w": 1272,
        "h": 262
    },
    {
        "id": "81c973dcdca1a4f0",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "database download links",
        "style": {
            "label": true
        },
        "nodes": [
            "f31a598d.9fd2c8",
            "98261154.3006",
            "34dc99e5.495466",
            "38d65d59.1d8aa2",
            "3b8014a.86ad8ec",
            "5b18a8e7.fb8da8",
            "5de7cbb4.fa21a4",
            "67ecfa7f.3f0e24"
        ],
        "x": 14,
        "y": 299,
        "w": 692,
        "h": 262
    },
    {
        "id": "1bfaaf118f38aee0",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "name": "DOWNLOAD tmdb - create JSON Radar file from query",
        "style": {
            "label": true
        },
        "nodes": [
            "38b44ecb9288caf2",
            "55b8ab3b2b7af294",
            "790a89794204c383",
            "314a302b5d86fb5a",
            "b00e6ad2a4612cad",
            "7dba386e57337c72",
            "04df9cb8c0753abb",
            "3557178575375eb6",
            "29583ca6de66fedf",
            "91cae91e61fcea38",
            "68fecdfda8e4e774",
            "8c660460752a27b2",
            "d50d86038fe1af32",
            "b5e099e92ce27bf6",
            "f77b0f12f5047d25",
            "fbf290de9b7b858f",
            "35dd409613d47a60",
            "729b953264ce47aa",
            "23b1ba527419b29b",
            "b519f0927284d44a",
            "2f3cc99c3c41ab90",
            "62e90c91d0238273",
            "c00796fd5642dae0"
        ],
        "x": 14,
        "y": 919,
        "w": 1502,
        "h": 502
    },
    {
        "id": "b334a2375eb8cb42",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "event",
        "style": {
            "label": true
        },
        "nodes": [
            "4bec488857c0553f",
            "ed447e5f8becbfad",
            "cc84d34370b6feb3"
        ],
        "x": 134,
        "y": 99,
        "w": 392,
        "h": 142
    },
    {
        "id": "694f0242d0985c69",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "TB HTTP API",
        "style": {
            "label": true
        },
        "nodes": [
            "677a57bbf3619854",
            "df6ac2f42ac6d8c7",
            "a960ef97c77a540b",
            "21944450ecc08385"
        ],
        "x": 814,
        "y": 99,
        "w": 612,
        "h": 162
    },
    {
        "id": "1819134eccdf2660",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "radar",
        "style": {
            "label": true
        },
        "nodes": [
            "fee85b1886270ac6",
            "087588593911f398",
            "fc5e2cd719fa680a",
            "0124afc74d86b533",
            "e05e91362c933e94",
            "9f5540b6beae8e73",
            "3fb645608f34cc0c",
            "2a979d76853ee0ab",
            "cc21b9e657cba081",
            "ff1719e60656a2e6",
            "d3f14c01ec3c7250",
            "5d3596375bd695c0",
            "4796b517d7d045a7",
            "9a894f4bd304f5a9"
        ],
        "x": 134,
        "y": 299,
        "w": 872,
        "h": 342
    },
    {
        "id": "dd29df4e644425b0",
        "type": "group",
        "z": "05fcb02c571dcfee",
        "name": "wifi settings",
        "style": {
            "label": true
        },
        "nodes": [
            "dbc594623a97700f",
            "cfaca843d1fc4679",
            "8173247be30b656e",
            "2d36fe127efba457",
            "80d2ef499f6612a6",
            "83de55ae8c9f54c1"
        ],
        "x": 14,
        "y": 2051.5,
        "w": 1092,
        "h": 209.5
    },
    {
        "id": "dc2934def36c6285",
        "type": "group",
        "z": "05fcb02c571dcfee",
        "name": "system client-side attributes",
        "style": {
            "label": true
        },
        "nodes": [
            "0a28f82092611160",
            "542b3b8720733a01",
            "ac10d4e38e95fa26",
            "64c998a572e86dce",
            "4d67617dadcb9ede",
            "28063911d2bbf57e",
            "185f835e89c9acf9",
            "feba76606996723c",
            "416d4b4451795bfe",
            "4d37c161816bd3a2",
            "5bb734f0283c5112",
            "4a28823b499c04e0",
            "9912f0375ba8d68e",
            "5235db548e7aaef3",
            "04e1eeacc898a859",
            "a9c83f35c32eb917",
            "afdd83e46ca13149",
            "10b176495132c277",
            "8fd2b9ab457b5065",
            "fe2e9d1af38b2ca8",
            "b6bb1e836852dc04",
            "c0a27f9a895a1a94",
            "0dccfc4a6467f7f4",
            "eb3b3c5230e3dd32",
            "611949e637ab7173",
            "bcd4c7df6b6f93d3",
            "f2885df5fb61fa3f",
            "60fb5d8b6644ef02",
            "aaba861811975692",
            "41e6810f869d1552",
            "4af4cb47fdd97610",
            "2f43413dfaba508a",
            "040751d9061fe787",
            "d046a343ebc5fe81",
            "6d99762995fa853e",
            "772eec7408fe83a7",
            "a385b9186009250e",
            "7d28172c4ed9e31b",
            "2f0f10b6553e5840",
            "41d1b47da00573bb",
            "8d209b47f10933fb",
            "9dc62a7e0c39ac0e",
            "ab89cf1a793d2be5",
            "02470b22b2f6893c",
            "f216858954e6862d",
            "614c44640342d24f",
            "8a7e7a97fd87ea18",
            "33dd63cc1dfb53c4",
            "9beaf948294acd98",
            "2b82d4b028657058",
            "099df29d699f405e"
        ],
        "x": 14,
        "y": 99,
        "w": 1352,
        "h": 1242
    },
    {
        "id": "b196e2c041c5a7f8",
        "type": "group",
        "z": "fa9f914901f79645",
        "name": "tb config",
        "style": {
            "label": true
        },
        "nodes": [
            "e6461a7fdeef48a2",
            "f39673b54301cbb7",
            "b9331c0751fea046",
            "f3b683b4b8176420",
            "f5797fb02606eda0",
            "cdc9b204ff81145c",
            "eade31a8864e53ee"
        ],
        "x": 34,
        "y": 119,
        "w": 1092,
        "h": 162
    },
    {
        "id": "f431ed51eb2b2a49",
        "type": "group",
        "z": "fa9f914901f79645",
        "name": "deployment location form",
        "style": {
            "label": true
        },
        "nodes": [
            "0efbf0059084d8d0",
            "ce889b12a83c1fc2",
            "f56633a89481439a",
            "c3629e05aa43359d",
            "b1c37cc7992ec0b1",
            "b149610d4d0d1153",
            "83df59e62c9ebe4f",
            "0d5da21c913e2636",
            "abaf9c5d1eecfdf5",
            "bf7d55674655862b",
            "2ce3c5bb0b42f8e3",
            "581373a3d9ca8bbf",
            "5c2714054adf2be7",
            "b4935c0d86d87137",
            "6aafbb121cb8890b",
            "5181051bdcb0b370",
            "2adb206d0c356f8d",
            "66594bbc3f3afe7d",
            "2dc53362436f912e",
            "3d22adf20ea1089f"
        ],
        "x": 34,
        "y": 319,
        "w": 1332,
        "h": 728
    },
    {
        "id": "55a1af374cc8ecb9",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "deployment",
        "style": {
            "label": true
        },
        "nodes": [
            "8a83d59ee0db1198",
            "8606059dd2f94a75",
            "c6ff73faf6fa9e98"
        ],
        "x": 134,
        "y": 659,
        "w": 872,
        "h": 122
    },
    {
        "id": "fe1b9f6f9d89d353",
        "type": "group",
        "z": "05fcb02c571dcfee",
        "name": "deployment client side attributes",
        "style": {
            "label": true
        },
        "nodes": [
            "32ac6cf42cd8c106",
            "8768b75dbfee3973",
            "f453ff6136f95abe"
        ],
        "x": 164,
        "y": 1359,
        "w": 1202,
        "h": 102
    },
    {
        "id": "64c3f8c396d4445c",
        "type": "group",
        "z": "05fcb02c571dcfee",
        "name": "time settings",
        "style": {
            "label": true
        },
        "nodes": [
            "d541ace7a209a1d7",
            "a411516e46bf7fd6",
            "865fd78705194730",
            "497d7e2831eb983b",
            "efa31fae9a8d79f5",
            "fe941a906b772e44",
            "c9bec37bcbc11ccd",
            "c524d79accb49648",
            "1f33180305d5e203",
            "7f09ed91e3dfbe2f",
            "801f5adc07bfe7e8",
            "3fb79b44d4787b15",
            "fbb1ec4d830de603",
            "a035b3ce9edec363",
            "504aa2fe928643b3",
            "c589aa9260a5f3a7",
            "33f201622a5a02cd",
            "ec0affbeb3a3cdb8",
            "32581c3d7d35b439",
            "5e61626ef0f824f5",
            "b395ee7aa9dc2a44",
            "cf4a0c52e8465948"
        ],
        "x": 14,
        "y": 1499,
        "w": 1352,
        "h": 389.5
    },
    {
        "id": "99dfff63ac837bc8",
        "type": "group",
        "z": "f7932be9acc7391c",
        "name": "system-metrics",
        "style": {
            "label": true
        },
        "nodes": [
            "521115ddd5741eea",
            "24c1b5f3bff3834c"
        ],
        "x": 134,
        "y": 799,
        "w": 392,
        "h": 82
    },
    {
        "id": "0e1614cf2e5f9942",
        "type": "group",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "show object counts/speeds (5-min) last 60-min in zone_radar",
        "style": {
            "label": true
        },
        "nodes": [
            "11fa2826769befc7",
            "158e6edae533bfdc",
            "eff2193c8246a9d2",
            "57fa6ca2b7d290e3"
        ],
        "x": 54,
        "y": 1159,
        "w": 1112,
        "h": 162
    },
    {
        "id": "f5d2d92d50d18ce2",
        "type": "group",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "frigate event api for thumbnail",
        "style": {
            "label": true
        },
        "nodes": [
            "09f99c931e5535bf",
            "08121a31488784bc",
            "9226865e3385eb56",
            "aa0afb5180297e2b"
        ],
        "x": 304,
        "y": 1739,
        "w": 612,
        "h": 122
    },
    {
        "id": "3a9bb6ed1306eb1c",
        "type": "group",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "create downloadable links",
        "style": {
            "label": true
        },
        "nodes": [
            "f31a598d.9fd2c8",
            "98261154.3006",
            "34dc99e5.495466",
            "38d65d59.1d8aa2",
            "3b8014a.86ad8ec",
            "5b18a8e7.fb8da8",
            "a8c2985e.d23ad8",
            "5de7cbb4.fa21a4",
            "67ecfa7f.3f0e24",
            "9e38989f2e13e4d7",
            "c30220553ae11805",
            "2b95a63a76f28f09",
            "7ec49429a06e3bbf",
            "b43ee265985f0f56"
        ],
        "x": 14,
        "y": 259,
        "w": 1252,
        "h": 342
    },
    {
        "id": "6aafbb121cb8890b",
        "type": "group",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "deployment tmdb",
        "style": {
            "label": true
        },
        "nodes": [
            "4a34bf5fa29ebc93",
            "401038caabc5e91c",
            "8add1e75d35b3706",
            "e8e148afd22b2619",
            "31abfc5bcc49bb09",
            "9e029001fe1461ec",
            "b7103dfabfa35f67",
            "ae506b2fc999b8da",
            "b87d36e05fb323bf",
            "6f700f9167d834ca",
            "9da183e98b5eef83",
            "6e00fe840927061b",
            "1257b05ec67b5a3e",
            "c12aee3936f24599"
        ],
        "x": 74,
        "y": 679,
        "w": 952,
        "h": 342
    },
    {
        "id": "a5d65dd0e3566daa",
        "type": "mqtt-broker",
        "name": "mqtt-broker-frigate",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d65c36624d553ee7",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "500"
    },
    {
        "id": "665d947f9a312a33",
        "type": "ui_tab",
        "name": "Monitoring Tab",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "06dde4be9a9a6b27",
        "type": "ui_group",
        "name": "Events aggregates",
        "tab": "665d947f9a312a33",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7866c2aa313ab8b9",
        "type": "ui_group",
        "name": "Live updates",
        "tab": "665d947f9a312a33",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ddb9d86f10b3f6a7",
        "type": "ui_tab",
        "name": "Database Tab",
        "icon": "input",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c0886ba4111fbfae",
        "type": "ui_group",
        "name": "Database Downloads",
        "tab": "ddb9d86f10b3f6a7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f60c1ab30a6fc8f",
        "type": "sqlitedb",
        "db": "code/nodered/db/tmdb.sqlite",
        "mode": "RWC"
    },
    {
        "id": "d3f63882e39b03a6",
        "type": "ui_group",
        "name": "Comments Input",
        "tab": "ddb9d86f10b3f6a7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1d8d8c9a28569355",
        "type": "sqlitedb",
        "db": "code/nodered/db/radar.sqlite",
        "mode": "RWC"
    },
    {
        "id": "eab37b30ecd3f935",
        "type": "ui_group",
        "name": "Events JSON Generator",
        "tab": "ddb9d86f10b3f6a7",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f0ca9c7dffb5ae3c",
        "type": "ui_group",
        "name": "Radar JSON Generator",
        "tab": "ddb9d86f10b3f6a7",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d6248c5f96ac4b3e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8570be913d017562",
        "type": "ui_group",
        "name": "IoT Hub (ThingsBoard)",
        "tab": "b749f5c4a9a4fbf2",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0fd9a947334c7d0f",
        "type": "ui_tab",
        "name": "System Settings Tab",
        "icon": "settings",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "55acf8751a68ec74",
        "type": "ui_group",
        "name": "Client-Side Attributes",
        "tab": "0fd9a947334c7d0f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "77966ee928726fbf",
        "type": "ui_group",
        "name": "Deployment Location",
        "tab": "b749f5c4a9a4fbf2",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f61a29742f312bb9",
        "type": "ui_group",
        "name": "WiFi Settings",
        "tab": "0fd9a947334c7d0f",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f60635dac92356fd",
        "type": "ui_group",
        "name": "Time Set",
        "tab": "0fd9a947334c7d0f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b749f5c4a9a4fbf2",
        "type": "ui_tab",
        "name": "Configuration / Setup Tab",
        "icon": "settings_remote",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e43506628b4a1cdb",
        "type": "comment",
        "z": "94d07e407c25f282",
        "name": "AN-10 API Interface",
        "info": "https://omnipresense.com/wp-content/uploads/2023/11/AN-010-Z_API_Interface.pdf",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "bb2b78040385d37e",
        "type": "json",
        "z": "94d07e407c25f282",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "36b68e0861cc5fc4",
                "830348149cb405ae",
                "3bf70e1d7ad2d43b"
            ]
        ]
    },
    {
        "id": "36b68e0861cc5fc4",
        "type": "debug",
        "z": "94d07e407c25f282",
        "name": "debug-radar-all-output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "35c0bee67148cfa7",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "debug-write-radar-key-valid-TimedSpeedCounts",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 840,
        "wires": []
    },
    {
        "id": "526eb1967dda78c4",
        "type": "comment",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "TimedSpeedCounts are @O and @|300 (5-min)",
        "info": "",
        "x": 600,
        "y": 800,
        "wires": []
    },
    {
        "id": "affe7cfb9861e62d",
        "type": "serial in",
        "z": "94d07e407c25f282",
        "name": "receive OPS243 serial (USB - /dev/ttyACM0)",
        "serial": "d65c36624d553ee7",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "bb2b78040385d37e"
            ]
        ]
    },
    {
        "id": "8e8ede8ca221552b",
        "type": "serial out",
        "z": "94d07e407c25f282",
        "name": "send to OPS243 serial (USB)",
        "serial": "d65c36624d553ee7",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "67f64c75edc0ef13",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "debug-radar-write-DetectObjectVelocity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 540,
        "wires": []
    },
    {
        "id": "5ba75f5c9e2a85da",
        "type": "catch",
        "z": "94d07e407c25f282",
        "name": "catch - flow-radar",
        "scope": null,
        "uncaught": false,
        "x": 640,
        "y": 60,
        "wires": [
            [
                "84f8c1cca4483e4c"
            ]
        ]
    },
    {
        "id": "84f8c1cca4483e4c",
        "type": "debug",
        "z": "94d07e407c25f282",
        "name": "catch - flow-radar",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "114c038c504f9f87",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "query all settings, after 0.5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "\"?P\" & \"?N\" & \"?V\" & \"?B\" & \"??\" & \"O?\" & \"?F\" & \"?s\"",
        "payloadType": "jsonata",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "d30801432e1972b3",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: set radar time (in seconds), after 0.2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "\"C=\" & $ceil($millis()/1000) & \"\\n\"",
        "payloadType": "jsonata",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "93dfd24a4e45dbb9",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: set radar timezone, after 0.3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "\"CZ\" & \"PST-7\" & \"\\n\"",
        "payloadType": "jsonata",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "b965ece6f3bd3377",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: base settings and filters, after 0.1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"OJUSF2S2K+IGONO3OUOTOhOC\" & \"OMM>20\\n\" & \"OSR>5\\n\" & \"@O@|300\\n\" & \"A!\" ",
        "payloadType": "jsonata",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "73c028a0006c9cd9",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: PI, idle power mode for settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"PI\"",
        "payloadType": "jsonata",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "efddf78e690358fc",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: PA, active power mode after settings, after 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "\"PA\"",
        "payloadType": "jsonata",
        "x": 260,
        "y": 440,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "78f9e09b02db0b2c",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: save settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "\"A!\"",
        "payloadType": "jsonata",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "830348149cb405ae",
        "type": "switch",
        "z": "94d07e407c25f282",
        "name": "radar payload key type",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "DetectedObjectVelocity",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "TimedSpeedCounts",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "speed",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "delta_time_msec",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 180,
        "y": 540,
        "wires": [
            [
                "67f64c75edc0ef13",
                "8a653740e4fc4f6a",
                "313905edff24218d"
            ],
            [
                "35c0bee67148cfa7",
                "585b91535ae4e8a3",
                "5c4e5a6064580e23"
            ],
            [
                "d88af763b70480d0",
                "d7eb8cf6f750f369",
                "62f7d1214aa96cc0",
                "c198bb9e360d93ef"
            ],
            [
                "3fc9a8ed49514be5",
                "a804f93d06561c17",
                "cceefa4b9aa98acc"
            ]
        ]
    },
    {
        "id": "d88af763b70480d0",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "debug-radar-raws-speeds-write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1160,
        "wires": []
    },
    {
        "id": "5f62cb744592b108",
        "type": "comment",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "handle O3 speeds by saving array to each _value",
        "info": "",
        "x": 600,
        "y": 1120,
        "wires": []
    },
    {
        "id": "3fc9a8ed49514be5",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "name": "radar_oc_payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1700,
        "wires": []
    },
    {
        "id": "9cc39551ab98256a",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: turn on OS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "\"OS\"",
        "payloadType": "jsonata",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "a3dc8ff6a80ce4c0",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: turn on OM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "\"OM\"",
        "payloadType": "jsonata",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "0749f4279a336caf",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 890,
        "y": 580,
        "wires": [
            [
                "81c98c5e01bbfe09"
            ]
        ]
    },
    {
        "id": "56b9668b4f365f7b",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "create radar_dov table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS radar_dov (time REAL, unit TEXT, direction TEXT, velocity REAL);",
        "x": 640,
        "y": 580,
        "wires": [
            [
                "0749f4279a336caf"
            ]
        ]
    },
    {
        "id": "ef4ad9faa7ec12e7",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "select latest 5 rows from radar_dov",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM radar_dov ORDER BY time DESC LIMIT 5;",
        "x": 600,
        "y": 620,
        "wires": [
            [
                "0749f4279a336caf"
            ]
        ]
    },
    {
        "id": "81c98c5e01bbfe09",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "debug: last 5 rows radar_dov",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 580,
        "wires": []
    },
    {
        "id": "87412467471d97a6",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_dov (time, unit, direction, velocity) \nVALUES ($time, $unit, $direction, $velocity);\n",
        "name": "",
        "x": 890,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "8a653740e4fc4f6a",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "write params for radar_dov insert",
        "func": "//convert DetectedObjectVelocity to velocity for insertion\nmsg.payload.velocity = msg.payload.DetectedObjectVelocity;\ndelete msg.payload.DetectedObjectVelocity;\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 660,
        "wires": [
            [
                "87412467471d97a6"
            ]
        ]
    },
    {
        "id": "e3aa00721bf6faff",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 970,
        "y": 900,
        "wires": [
            [
                "13059459bbc48328"
            ]
        ]
    },
    {
        "id": "54ae78579d38e81b",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "create radar_timedspeedcounts table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS radar_timed_speed_counts (time REAL, direction TEXT, units TEXT, count INTEGER, average REAL);",
        "x": 670,
        "y": 900,
        "wires": [
            [
                "e3aa00721bf6faff"
            ]
        ]
    },
    {
        "id": "831310a0a0549da3",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "select latest 5 rows from radar_timedspeedcounts",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM radar_timed_speed_counts ORDER BY time DESC LIMIT 5;",
        "x": 640,
        "y": 940,
        "wires": [
            [
                "e3aa00721bf6faff"
            ]
        ]
    },
    {
        "id": "13059459bbc48328",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "debug: last 5 rows radar_timedspeedcounts",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 900,
        "wires": []
    },
    {
        "id": "585b91535ae4e8a3",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "write params for radar_timedspeedcounts insert",
        "func": "//get rid of outer TimedSpeedCounts object\nmsg.payload = msg.payload.TimedSpeedCounts;\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 980,
        "wires": [
            [
                "477f8523e9784029"
            ]
        ]
    },
    {
        "id": "477f8523e9784029",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_timed_speed_counts (time, direction, units, count, average)\nVALUES ($time, $direction, $units, $count, $average);\n",
        "name": "",
        "x": 970,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "dd48c6017098fe1d",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1010,
        "y": 1200,
        "wires": [
            [
                "825ddab22453e37c"
            ]
        ]
    },
    {
        "id": "e113c181976ad898",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "create radar_raw_speed_magnitude table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS radar_raw_speed_magnitude (time REAL, unit TEXT, magnitude TEXT, speed TEXT);",
        "x": 700,
        "y": 1200,
        "wires": [
            [
                "dd48c6017098fe1d"
            ]
        ]
    },
    {
        "id": "e1461efd368bbee3",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "select latest 5 rows from radar_raw_speed_magnitude",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM radar_raw_speed_magnitude ORDER BY time DESC LIMIT 5;",
        "x": 660,
        "y": 1240,
        "wires": [
            [
                "dd48c6017098fe1d"
            ]
        ]
    },
    {
        "id": "825ddab22453e37c",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "debug: last 5 rows radar_raw_speed_magnitude",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1200,
        "wires": []
    },
    {
        "id": "1ddee1427e02c980",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_raw_speed_magnitude (time, unit, magnitude, speed) \nVALUES ($time, $unit, $magnitude, $speed);",
        "name": "",
        "x": 1010,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "d7eb8cf6f750f369",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "write params for radar_raw_speed_magnitude insert",
        "func": "\nmsg.payload.magnitude = `${JSON.stringify(msg.payload.magnitude)}`; //array, wrap in single quote for sqlite insert as text\nmsg.payload.speed = `${JSON.stringify(msg.payload.speed)}`; //array, wrap in single quote for sqlite insert as text\n\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1280,
        "wires": [
            [
                "1ddee1427e02c980"
            ]
        ]
    },
    {
        "id": "97a0c601b8918ede",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "name": "create radar_oc_payload table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS radar_oc_payload (     end_time REAL,     start_time REAL,     delta_time_msec INTEGER,     dir TEXT,     frames INTEGER,     max_mph REAL,     min_mph REAL,     max_mag REAL,     avg_mag REAL,     frames_per_mph REAL,     length_ft REAL );",
        "x": 650,
        "y": 1760,
        "wires": [
            [
                "772d6574f4181a44"
            ]
        ]
    },
    {
        "id": "772d6574f4181a44",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO radar_oc_payload (end_time, start_time, delta_time_msec, dir, frames, max_mph, min_mph, max_mag, avg_mag, frames_per_mph, length_ft)\nVALUES ($end_time, $start_time, $delta_time_msec, $dir, $frames, $max_mph, $min_mph, $max_mag, $avg_mag, $frames_per_mph, $length_ft);",
        "name": "",
        "x": 930,
        "y": 1760,
        "wires": [
            [
                "b277514c42c255e9"
            ]
        ]
    },
    {
        "id": "c768d8ea1b8cf953",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "name": "select latest 5 rows from radar_oc_payload",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM radar_oc_payload ORDER BY end_time DESC LIMIT 5;",
        "x": 620,
        "y": 1800,
        "wires": [
            [
                "772d6574f4181a44"
            ]
        ]
    },
    {
        "id": "b277514c42c255e9",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "name": "debug: last 5 rows radar_oc_payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1760,
        "wires": []
    },
    {
        "id": "27b2f56921067f35",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_oc_payload (end_time, start_time, delta_time_msec, dir, frames, max_mph, min_mph, max_mag, avg_mag, frames_per_mph, length_ft)\nVALUES ($end_time, $start_time, $delta_time_msec, $dir, $frames, $max_mph, $min_mph, $max_mag, $avg_mag, $frames_per_mph, $length_ft);",
        "name": "",
        "x": 930,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "a804f93d06561c17",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "name": "write params for radar_oc_payload insert",
        "func": "\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1840,
        "wires": [
            [
                "27b2f56921067f35"
            ]
        ]
    },
    {
        "id": "1d1c479b2567efbd",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1030,
        "y": 1420,
        "wires": [
            [
                "a1583c68a1dad33e"
            ]
        ]
    },
    {
        "id": "795c120719c982de",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "create radar_raw_speed_magnitude_single table",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS radar_raw_speed_magnitude_single (time REAL, unit TEXT, magnitude REAL, speed REAL);",
        "x": 690,
        "y": 1420,
        "wires": [
            [
                "1d1c479b2567efbd"
            ]
        ]
    },
    {
        "id": "8180a480a85a6636",
        "type": "inject",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "select latest 5 rows from radar_raw_speed_magnitude_single",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM radar_raw_speed_magnitude_single ORDER BY time DESC LIMIT 5;",
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "1d1c479b2567efbd"
            ]
        ]
    },
    {
        "id": "a1583c68a1dad33e",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "debug: last 5 rows radar_raw_speed_magnitude_single",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1420,
        "wires": []
    },
    {
        "id": "382bf388390f91bd",
        "type": "sqlite",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "prepared",
        "sql": "INSERT INTO radar_raw_speed_magnitude_single (time, unit, magnitude, speed) \nVALUES ($time, $unit, $magnitude, $speed);",
        "name": "",
        "x": 1160,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "6580ac98734eba2e",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "write params for radar_raw_speed_magnitude_single insert",
        "func": "\nconst obj = msg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1560,
        "wires": [
            [
                "382bf388390f91bd"
            ]
        ]
    },
    {
        "id": "6106b11d56c22e4a",
        "type": "link in",
        "z": "94d07e407c25f282",
        "name": "query OPS",
        "links": [
            "a385b9186009250e"
        ],
        "x": 335,
        "y": 80,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "3bf70e1d7ad2d43b",
        "type": "link out",
        "z": "94d07e407c25f282",
        "name": "OPS json output",
        "mode": "link",
        "links": [
            "2f0f10b6553e5840"
        ],
        "x": 995,
        "y": 340,
        "wires": []
    },
    {
        "id": "313905edff24218d",
        "type": "link out",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "radar_dov link out",
        "mode": "link",
        "links": [
            "fee85b1886270ac6"
        ],
        "x": 475,
        "y": 700,
        "wires": []
    },
    {
        "id": "cceefa4b9aa98acc",
        "type": "link out",
        "z": "94d07e407c25f282",
        "g": "35a68b2baec193d2",
        "name": "radar_oc_payload link out",
        "mode": "link",
        "links": [
            "e05e91362c933e94"
        ],
        "x": 475,
        "y": 1880,
        "wires": []
    },
    {
        "id": "56ce714b7a23585b",
        "type": "link out",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "radar_raw_speed_magnitude_single link out",
        "mode": "link",
        "links": [
            "0124afc74d86b533"
        ],
        "x": 595,
        "y": 1600,
        "wires": []
    },
    {
        "id": "62f7d1214aa96cc0",
        "type": "link out",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "radar_raw_speed_magnitude link out",
        "mode": "link",
        "links": [
            "fc5e2cd719fa680a"
        ],
        "x": 475,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5c4e5a6064580e23",
        "type": "link out",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "radar_timedspeedcounts link out",
        "mode": "link",
        "links": [
            "087588593911f398"
        ],
        "x": 475,
        "y": 1020,
        "wires": []
    },
    {
        "id": "c198bb9e360d93ef",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "manually take top 1 speed, magnitude (effectively O1)",
        "func": "\nmsg.payload.magnitude = msg.payload.magnitude[0]; //array, wrap in single quote for sqlite insert as text\nmsg.payload.speed = msg.payload.speed[0]; //array, wrap in single quote for sqlite insert as text\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1500,
        "wires": [
            [
                "6580ac98734eba2e",
                "56ce714b7a23585b"
            ]
        ]
    },
    {
        "id": "481344ed5f4b69d9",
        "type": "debug",
        "z": "9269520ddb532b00",
        "name": "debug: Broker status events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 100,
        "wires": []
    },
    {
        "id": "ec1ea8bc9a502a12",
        "type": "debug",
        "z": "9269520ddb532b00",
        "name": "debug: broker publish events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 140,
        "wires": []
    },
    {
        "id": "f20c74c0ccfd256c",
        "type": "mqtt in",
        "z": "9269520ddb532b00",
        "name": "",
        "topic": "frigate/events",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a5d65dd0e3566daa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "86c86b0d82d13028",
                "2deec9d340d5ed26"
            ]
        ]
    },
    {
        "id": "86c86b0d82d13028",
        "type": "debug",
        "z": "9269520ddb532b00",
        "name": "debug: published frigate messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 200,
        "wires": []
    },
    {
        "id": "a5ddaaa9ffdc637e",
        "type": "aedes broker",
        "z": "9269520ddb532b00",
        "name": "frigate-local",
        "mqtt_port": "1883",
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "481344ed5f4b69d9"
            ],
            [
                "ec1ea8bc9a502a12"
            ]
        ]
    },
    {
        "id": "056bd6503d1c42c6",
        "type": "catch",
        "z": "9269520ddb532b00",
        "name": "catch - flow-mqtt",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "9fa6890312a00114"
            ]
        ]
    },
    {
        "id": "9fa6890312a00114",
        "type": "debug",
        "z": "9269520ddb532b00",
        "name": "catch - flow-mqtt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "2deec9d340d5ed26",
        "type": "switch",
        "z": "9269520ddb532b00",
        "g": "0a5faeac9fbd6d55",
        "name": "payload.type == \"end\"",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 180,
        "y": 360,
        "wires": [
            [
                "76911cc7f28e7da2"
            ]
        ]
    },
    {
        "id": "274f87c31437c2d7",
        "type": "link out",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "event payload",
        "mode": "link",
        "links": [
            "c249329109ac17d5",
            "ed447e5f8becbfad"
        ],
        "x": 935,
        "y": 1000,
        "wires": []
    },
    {
        "id": "76911cc7f28e7da2",
        "type": "change",
        "z": "9269520ddb532b00",
        "g": "0a5faeac9fbd6d55",
        "name": "set frigate_event from payload.after",
        "rules": [
            {
                "t": "set",
                "p": "frigate_event",
                "pt": "msg",
                "to": "payload.after",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 400,
        "wires": [
            [
                "7f063afdbac396ce"
            ]
        ]
    },
    {
        "id": "7992eb250ae9d20f",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "calculate direction based on frigate event zones",
        "func": "//pass all fields required for speed match to event\n\nconst myZoneNearIndex = msg.frigate_event.entered_zones.indexOf(\"zone_near\");\nconst myZoneFarIndex = msg.frigate_event.entered_zones.indexOf(\"zone_far\");\n\nmsg.frigate_event.calc_zone_direction = (myZoneNearIndex >= 0 && myZoneFarIndex >= 0) ? (myZoneFarIndex < myZoneNearIndex ? \"inbound\" : \"outbound\") : undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 580,
        "wires": [
            [
                "b39062019fac1a66"
            ]
        ]
    },
    {
        "id": "7f063afdbac396ce",
        "type": "switch",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "object entered ANY zone (include possible misses)",
        "property": "frigate_event.entered_zones",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 520,
        "wires": [
            [
                "7992eb250ae9d20f"
            ],
            [
                "ad7393ac18c4083b"
            ]
        ]
    },
    {
        "id": "cbef8a3acc3d1495",
        "type": "change",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "set event_direction_speed",
        "rules": [
            {
                "t": "set",
                "p": "event_direction_speed",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "a96d834e3571c549"
            ]
        ]
    },
    {
        "id": "ad7393ac18c4083b",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "pass no direction, no speed",
        "func": "//no speed\nconst newMsg = {};\n\nnewMsg.status_match_event_radar_direction = \"direction_speed_no_zones\"; \nnewMsg.calc_event_direction = undefined;\nnewMsg.calc_event_speed = undefined;\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 540,
        "wires": [
            [
                "cbef8a3acc3d1495"
            ]
        ]
    },
    {
        "id": "23f825551d9fe7ee",
        "type": "comment",
        "z": "9269520ddb532b00",
        "name": "do these steps SEQUENTIALLY or they may overlap w a JOIN node",
        "info": "",
        "x": 260,
        "y": 260,
        "wires": []
    },
    {
        "id": "510b389597efaf1b",
        "type": "sqlite",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 800,
        "y": 1140,
        "wires": [
            [
                "d8786159d48401b9"
            ]
        ]
    },
    {
        "id": "b77bb1c374a198e4",
        "type": "inject",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "create table events",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS events (id TEXT PRIMARY KEY,camera TEXT,label TEXT,sub_label TEXT,top_score REAL,frame_time REAL,start_time REAL,end_time REAL,entered_zones TEXT,score REAL,area REAL,ratio REAL,motionless_count REAL,position_changes REAL,attributes TEXT,direction_calc TEXT,speed_calc REAL,source TEXT,deployment_id TEXT DEFAULT NULL,FOREIGN KEY (deployment_id) REFERENCES deployment(id));",
        "x": 550,
        "y": 1140,
        "wires": [
            [
                "510b389597efaf1b"
            ]
        ]
    },
    {
        "id": "61d6a19c99c60e0b",
        "type": "sqlite",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO events (id, camera, label, sub_label, top_score, frame_time, start_time, end_time, entered_zones, score, area, ratio, motionless_count, position_changes, attributes, direction_calc, speed_calc, source, deployment_id) \nVALUES ($id, $camera, $label, $sub_label, $top_score, $frame_time, $start_time, $end_time, json($entered_zones), $score, $area, $ratio, $motionless_count, $position_changes, json($attributes), $direction_calc, $speed_calc, $source, $deployment_id);",
        "name": "tmdb.events, Prepared Statement",
        "x": 1060,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "a96d834e3571c549",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "write params for events insert",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\n// Frigate Event info\nnewMsg.payload.id = msg.frigate_event.id;\nnewMsg.payload.camera = msg.frigate_event.camera;\nnewMsg.payload.label = msg.frigate_event.label;\nnewMsg.payload.sub_label = msg.frigate_event.sub_label;\nnewMsg.payload.top_score = msg.frigate_event.top_score;\n//for Timestamp, frigate event and radar use seconds\nnewMsg.payload.frame_time = msg.frigate_event.frame_time;\nnewMsg.payload.start_time = msg.frigate_event.start_time;\nnewMsg.payload.end_time = msg.frigate_event.end_time;\nnewMsg.payload.entered_zones = `${JSON.stringify(msg.frigate_event.entered_zones)}`; //array, wrap in single quote for sqlite insert as text\n\nnewMsg.payload.score = msg.frigate_event.score;\nnewMsg.payload.area = msg.frigate_event.area;\nnewMsg.payload.ratio = msg.frigate_event.ratio;\nnewMsg.payload.motionless_count = msg.frigate_event.motionless_count;\nnewMsg.payload.position_changes = msg.frigate_event.position_changes;\nnewMsg.payload.attributes = `${JSON.stringify(msg.frigate_event.attributes)}`; //array, wrap in single quote for sqlite insert as text\n\n\nnewMsg.payload.direction_calc = (msg.event_direction_speed.calc_event_direction || undefined);\nnewMsg.payload.speed_calc = (msg.event_direction_speed.calc_event_speed || undefined);\n\nnewMsg.payload.deployment_id = global.get(\"deployment.id\",\"config\");\nnewMsg.payload.source = \"frigate\";\n\nconst obj = newMsg.payload;\n\nmsg.payload = newMsg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 940,
        "wires": [
            [
                "61d6a19c99c60e0b",
                "59a579e6a1fa9a08"
            ]
        ]
    },
    {
        "id": "e256d5e89eb39332",
        "type": "inject",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "select latest 5 rows from events",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM events ORDER BY end_time DESC LIMIT 5;",
        "x": 510,
        "y": 1180,
        "wires": [
            [
                "510b389597efaf1b"
            ]
        ]
    },
    {
        "id": "d8786159d48401b9",
        "type": "debug",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "sqlite select last 5 msgs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1140,
        "wires": []
    },
    {
        "id": "7f0ef976c7b79245",
        "type": "debug",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "composed tmdb.events message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1040,
        "wires": []
    },
    {
        "id": "59a579e6a1fa9a08",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "53e4faf6d3ece28c",
        "name": "cleanse final msg.payload to forward along",
        "func": "let newMsg = {};\n\nnewMsg.topic = \"tm/event\"\nnewMsg.payload = msg.payload;\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "7f0ef976c7b79245",
                "274f87c31437c2d7"
            ]
        ]
    },
    {
        "id": "b39062019fac1a66",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "pull speed, direction for event period",
        "func": "let query = \"SELECT * FROM radar_dov WHERE time BETWEEN \" + (Math.floor(msg.frigate_event.start_time) - 2) +\" AND \" + (Math.ceil(msg.frigate_event.end_time) + 2) + \";\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 640,
        "wires": [
            [
                "7f50d9d83bdb7f14"
            ]
        ]
    },
    {
        "id": "7f50d9d83bdb7f14",
        "type": "sqlite",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 450,
        "y": 680,
        "wires": [
            [
                "c123fc5ed5e14e8a"
            ]
        ]
    },
    {
        "id": "c123fc5ed5e14e8a",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "calculate median per direction",
        "func": "const medianVelocityPerDirection = {};\n\n// Group the data by direction\nconst groupedData = msg.payload.reduce((acc, curr) => {\n  if (!acc[curr.direction]) {\n    acc[curr.direction] = [];\n  }\n  acc[curr.direction].push(curr);\n  return acc;\n}, {});\n\n// Calculate the median velocity for each direction\nfor (const direction in groupedData) {\n  if (groupedData.hasOwnProperty(direction)) {\n    const sortedVelocities = groupedData[direction].map(entry => entry.velocity).sort((a, b) => a - b);\n    const medianIndex = Math.floor(sortedVelocities.length / 2);\n    const medianVelocity =\n      sortedVelocities.length % 2 === 0\n        ? (sortedVelocities[medianIndex - 1] + sortedVelocities[medianIndex]) / 2\n        : sortedVelocities[medianIndex];\n    medianVelocityPerDirection[direction] = medianVelocity;\n  }\n}\n\nmsg.payload = medianVelocityPerDirection;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 740,
        "wires": [
            [
                "673e45159a2dfccf"
            ]
        ]
    },
    {
        "id": "673e45159a2dfccf",
        "type": "function",
        "z": "9269520ddb532b00",
        "g": "71c085648c20e329",
        "name": "match radar speed to event",
        "func": "const newMsg = {};\nnewMsg.radar_DetectedObjectVelocity_median = msg.payload;\n\n//if only 1 Radar.direction USE THAT\nif (Object.keys(msg.payload).length == 1) {\n    //  check if Event.calc_zone_direction MATCHES Radar.direction THEN good\n    if (msg.payload[msg.frigate_event.calc_zone_direction]) {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_match\";\n        newMsg.calc_event_direction = (msg.frigate_event.calc_zone_direction || undefined);\n        newMsg.calc_event_speed = msg.payload[msg.frigate_event.calc_zone_direction];\n    }\n    //  if Event.calc_zone_direction == undefined THEN use 1 that came through radar \n    else if (msg.frigate_event.calc_zone_direction == undefined) {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_assigned\";\n        newMsg.calc_event_direction = Object.keys(msg.payload)[0];\n        newMsg.calc_event_speed = msg.payload[Object.keys(msg.payload)[0]];\n    }\n}\n//  multiple radar directions, but if Event.calc_zone_direction MATCHES Radar.direction THEN good\nelse if ((Object.keys(msg.payload).length > 1)\n    && (msg.frigate_event.calc_zone_direction != undefined)) {\n\n    //find matching median value to frigate_event\n    if (msg.payload[msg.frigate_event.calc_zone_direction]) {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_match\";\n        newMsg.calc_event_direction = msg.frigate_event.calc_zone_direction;\n        newMsg.calc_event_speed = msg.payload[msg.frigate_event.calc_zone_direction];\n    }\n    else {\n        newMsg.status_match_event_radar_direction = \"radar_speed_direction_mismatch\";\n        newMsg.calc_event_direction = undefined;\n        newMsg.calc_event_speed = undefined;\n    }\n}\n//      if == 0 Radar.direction DO NOT REPORT\nelse {\n        newMsg.status_match_event_radar_direction = \"no_radar_speed_detected\"; \n        newMsg.calc_event_direction = (msg.frigate_event.calc_zone_direction || undefined);\n        newMsg.calc_event_speed = undefined;\n    }\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 740,
        "wires": [
            [
                "cbef8a3acc3d1495"
            ]
        ]
    },
    {
        "id": "677a57bbf3619854",
        "type": "http request",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "tb telemetry http api",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 180,
        "wires": [
            [
                "df6ac2f42ac6d8c7"
            ]
        ]
    },
    {
        "id": "df6ac2f42ac6d8c7",
        "type": "debug",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "event telemetry response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 220,
        "wires": []
    },
    {
        "id": "4bec488857c0553f",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "b334a2375eb8cb42",
        "name": "format event telemetry",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.frame_time * 1000,\n    values: {\n        event: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "a960ef97c77a540b"
            ]
        ]
    },
    {
        "id": "ed447e5f8becbfad",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "b334a2375eb8cb42",
        "name": "event link in",
        "links": [
            "274f87c31437c2d7"
        ],
        "x": 175,
        "y": 140,
        "wires": [
            [
                "4bec488857c0553f",
                "cc84d34370b6feb3"
            ]
        ]
    },
    {
        "id": "cc84d34370b6feb3",
        "type": "debug",
        "z": "f7932be9acc7391c",
        "g": "b334a2375eb8cb42",
        "name": "event link in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 140,
        "wires": []
    },
    {
        "id": "695200d405f2d323",
        "type": "catch",
        "z": "f7932be9acc7391c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 200,
        "y": 40,
        "wires": [
            [
                "5fc376fb123914c0"
            ]
        ]
    },
    {
        "id": "5fc376fb123914c0",
        "type": "debug",
        "z": "f7932be9acc7391c",
        "name": "tb-telemetry debug: catch",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "fee85b1886270ac6",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_dov link in",
        "links": [
            "313905edff24218d"
        ],
        "x": 175,
        "y": 440,
        "wires": [
            [
                "5d3596375bd695c0"
            ]
        ]
    },
    {
        "id": "087588593911f398",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_timedspeedcounts link in",
        "links": [
            "5c4e5a6064580e23"
        ],
        "x": 175,
        "y": 340,
        "wires": [
            [
                "2a979d76853ee0ab"
            ]
        ]
    },
    {
        "id": "fc5e2cd719fa680a",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_raw_speed_magnitude link in",
        "links": [
            "62f7d1214aa96cc0"
        ],
        "x": 175,
        "y": 480,
        "wires": [
            [
                "4796b517d7d045a7"
            ]
        ]
    },
    {
        "id": "0124afc74d86b533",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_raw_speed_magnitude_single link in",
        "links": [
            "56ce714b7a23585b"
        ],
        "x": 175,
        "y": 520,
        "wires": [
            [
                "9a894f4bd304f5a9"
            ]
        ]
    },
    {
        "id": "e05e91362c933e94",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "radar_oc_payload link in",
        "links": [
            "cceefa4b9aa98acc"
        ],
        "x": 175,
        "y": 560,
        "wires": [
            [
                "cc21b9e657cba081"
            ]
        ]
    },
    {
        "id": "a960ef97c77a540b",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "set up tb telemetry post",
        "func": "// The server URL, port, and device access token must be stored in the config context\n// before this will work\nlet serverUrl = global.get(\"serverUrl\", \"config\")\nlet serverPort = global.get(\"serverPort\", \"config\")\nlet accessToken = global.get(\"accessToken\", \"config\")\nmsg.url = `${serverUrl}:${serverPort}/api/v1/${accessToken}/telemetry`\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 140,
        "wires": [
            [
                "21944450ecc08385"
            ]
        ]
    },
    {
        "id": "9f5540b6beae8e73",
        "type": "comment",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "send immediately",
        "info": "",
        "x": 240,
        "y": 380,
        "wires": []
    },
    {
        "id": "3fb645608f34cc0c",
        "type": "comment",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "send radar_oc_payload w others to avoid hundreds of messages per object (oc = radar object detection end)",
        "info": "",
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "2a979d76853ee0ab",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_timedspeedcounts telemetry",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.time * 1000,\n    values: {\n        radar_timedspeedcounts: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "a960ef97c77a540b"
            ]
        ]
    },
    {
        "id": "cc21b9e657cba081",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_oc_payload telemetry",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.start_time * 1000,\n    values: {\n        radar_oc_payload: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 560,
        "wires": [
            [
                "d3f14c01ec3c7250"
            ]
        ]
    },
    {
        "id": "21944450ecc08385",
        "type": "delay",
        "z": "f7932be9acc7391c",
        "g": "694f0242d0985c69",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1000",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 2,
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "677a57bbf3619854"
            ],
            []
        ]
    },
    {
        "id": "ff1719e60656a2e6",
        "type": "join",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "create radar array, wait for msg.complete",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 820,
        "y": 440,
        "wires": [
            [
                "a960ef97c77a540b"
            ]
        ]
    },
    {
        "id": "d3f14c01ec3c7250",
        "type": "change",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 560,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "5d3596375bd695c0",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_dov telemetry",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.time * 1000,\n    values: {\n        radar_dov: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "4796b517d7d045a7",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_raw_speed_magnitude telemetry",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.time * 1000,\n    values: {\n        radar_raw_speed_magnitude: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 480,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "9a894f4bd304f5a9",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "1819134eccdf2660",
        "name": "format radar_raw_speed_magnitude_single telemetry",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.time * 1000,\n    values: {\n        radar_raw_speed_magnitude_single: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            [
                "ff1719e60656a2e6"
            ]
        ]
    },
    {
        "id": "8a83d59ee0db1198",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "55a1af374cc8ecb9",
        "name": "deployment submit telemetry link in",
        "links": [
            "b4935c0d86d87137"
        ],
        "x": 175,
        "y": 740,
        "wires": [
            [
                "c6ff73faf6fa9e98"
            ]
        ]
    },
    {
        "id": "8606059dd2f94a75",
        "type": "comment",
        "z": "f7932be9acc7391c",
        "g": "55a1af374cc8ecb9",
        "name": "upload to TB as telemetry 'deployment'",
        "info": "",
        "x": 830,
        "y": 700,
        "wires": []
    },
    {
        "id": "c6ff73faf6fa9e98",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "55a1af374cc8ecb9",
        "name": "format deployment telemetry",
        "func": "var newMsg = {};\n\n// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nnewMsg.payload = {\n    ts: new Date(values.entryDateTime).getTime(),\n    values: {\n        deployment: values\n    }\n}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 740,
        "wires": [
            [
                "a960ef97c77a540b"
            ]
        ]
    },
    {
        "id": "521115ddd5741eea",
        "type": "function",
        "z": "f7932be9acc7391c",
        "g": "99dfff63ac837bc8",
        "name": "format system metrics payload",
        "func": "// format the payload with a timestamp\nlet values = {\n    ...msg.payload,\n}\n//ts in milliseconds\nmsg.payload = {\n    ts: values.time_ms_utc,\n    values: {\n        system_metrics: values\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "a960ef97c77a540b"
            ]
        ]
    },
    {
        "id": "24c1b5f3bff3834c",
        "type": "link in",
        "z": "f7932be9acc7391c",
        "g": "99dfff63ac837bc8",
        "name": "connect from other flows to send telemetry",
        "links": [
            "6dca925fad91c100"
        ],
        "x": 175,
        "y": 840,
        "wires": [
            [
                "521115ddd5741eea"
            ]
        ]
    },
    {
        "id": "3985037239b671c5",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "trigger Event query every 60-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "928b71f25ce6e7b6"
            ]
        ]
    },
    {
        "id": "08d030ffc3fe6adb",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "frigate summary daily, objects",
        "group": "06dde4be9a9a6b27",
        "order": 3,
        "width": 6,
        "height": 7,
        "label": "frigate api/events/summary daily object count for the last 10-days",
        "chartType": "line",
        "legend": "true",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b241a0ef89fd7ce4",
        "type": "http request",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "frigate api/events/summary - Daily summary",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:5000/api/events/summary",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "eb140f61419c6a08"
            ]
        ],
        "info": "`{\"camera\":\"picam_gs_h264\",\n\"count\":83,\"day\":\"2024-03-21\",\n\"label\":\"bicycle\",\n\"sub_label\":null,\n\"zones\":[]}`"
    },
    {
        "id": "91d3f8965f62f4b0",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "trigger summary Event query every 2-hours",
        "props": [],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "b241a0ef89fd7ce4"
            ]
        ]
    },
    {
        "id": "eb140f61419c6a08",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "structure frigate api/summary",
        "func": "var newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //only do this for the radar camera and 10 days or less ago\n    if (myItem.camera == env.get(\"VAR_RADAR_CAMERA\") && new Date(myItem.day).getTime() >= Math.floor((Date.now() - 86400000 * 10))) {\n        //if label doesn't exist, push it\n        if (newMsg[0].series.indexOf(myItem.label) < 0) {\n            newMsg[0].series.push(myItem.label);\n            //create new data array element that matches the series index\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n        }\n\n        //Check if it's a new date or existing in data[0][0].x\n        //datapoint for date \n        let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.day)));\n        if (xIndex < 0) {\n            //new date\n            let thisDataPoint = {};\n            thisDataPoint.x = new Date(myItem.day);\n            thisDataPoint.y = myItem.count;\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n        }\n        else {\n            //date exists, sum counts\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n        }\n\n    };\n    \n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "08d030ffc3fe6adb"
            ]
        ]
    },
    {
        "id": "404ac097795a2da0",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "trigger Event query every 2-hours",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "5f3716d2176c3ab4"
            ]
        ]
    },
    {
        "id": "b65e1877b1e04881",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "events summary daily, objects",
        "group": "06dde4be9a9a6b27",
        "order": 4,
        "width": 6,
        "height": 7,
        "label": "events daily object count for the last 10-days",
        "chartType": "line",
        "legend": "true",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c249329109ac17d5",
        "type": "link in",
        "z": "28627559bebdc324",
        "name": "from mongo event capture",
        "links": [
            "274f87c31437c2d7"
        ],
        "x": 165,
        "y": 1580,
        "wires": [
            [
                "5ec2d3ba52f944f5",
                "82bc0c11adb825f8",
                "736d1e21a49f446b",
                "f57e08e6fb9c0d09"
            ]
        ]
    },
    {
        "id": "d66541089b01306e",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "only event with speed",
        "property": "$abs(payload.speed_calc)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "gt",
                "v": "20",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 1940,
        "wires": [
            [
                "c788d632f5e93a73"
            ]
        ]
    },
    {
        "id": "2e680914d7da5c94",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "only zone_radar",
        "property": "payload.entered_zones",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "zone_radar",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 1660,
        "wires": [
            [
                "c2270f3050bf35ab"
            ]
        ]
    },
    {
        "id": "c788d632f5e93a73",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "store last N speed events",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_recent_speed\") || [];\n//Keep only last X elements\nvar myArrLength = 3;\n\n//invert array so OLDEST IS FIRST, for functions\nmyEvents.reverse();\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//add current event to end of array\nmyEvents.push(msg.payload);\n\n//invert array so NEWEST IS FIRST, for display\nmyEvents.reverse();\n\nflow.set(\"events_recent_speed\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1980,
        "wires": [
            [
                "4c087723a1d698e9"
            ]
        ]
    },
    {
        "id": "e5391514131a2b5a",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "store last N radar events",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_recent_radar\") || [];\n//Keep only last X elements\nvar myArrLength = 5;\n\n//invert array so OLDEST IS FIRST, for functions\nmyEvents.reverse();\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//add current event to end of array\nmyEvents.push(msg.payload);\n\n\n//invert array so NEWEST IS FIRST, for display\nmyEvents.reverse();\n\nflow.set(\"events_recent_radar\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1900,
        "wires": [
            [
                "c36c71706e494b5e",
                "3214e8cd3ea79630"
            ]
        ]
    },
    {
        "id": "5ec2d3ba52f944f5",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "only use radar cam",
        "property": "payload.camera",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "VAR_RADAR_CAMERA",
                "vt": "env"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 1620,
        "wires": [
            [
                "2e680914d7da5c94"
            ]
        ]
    },
    {
        "id": "c36c71706e494b5e",
        "type": "ui_template",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "group": "7866c2aa313ab8b9",
        "name": "last N radar events",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<p class=\"label nr-dashboard-chart-title nr-dashboard-chart-titlel\">last N zone_radar events for radar_camera</p>\n<table class=\"table\">\n    <tr ng-repeat=\"payload in msg.payload\">\n        <td><img src=\"data:image/jpg;base64, {{payload.thumbnail_base64jpg}}\" alt=\"thumbnail\" /></td>\n        <td>\n            id: {{payload.id}} <br /> \n            label: {{payload.label}} <br />\n            top_score: {{payload.top_score}} <br />\n            frame_time: {{payload.frame_time_datestring}} <br />\n            direction: {{payload.direction_calc}} <br />\n            speed: {{payload.speed_calc}}\n        </td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "82bc0c11adb825f8",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "debug: event payload in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 1580,
        "wires": []
    },
    {
        "id": "4abe0507c83f87a2",
        "type": "catch",
        "z": "28627559bebdc324",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 40,
        "wires": [
            [
                "a309589b69eb07e1"
            ]
        ]
    },
    {
        "id": "a309589b69eb07e1",
        "type": "debug",
        "z": "28627559bebdc324",
        "name": "catch: all - dashboard",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "02469f2425072f7b",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "",
        "group": "06dde4be9a9a6b27",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "events by object (60-min) for last 24-hours",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "15797ab24727f84d",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "trigger Event query every 5-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 880,
        "wires": [
            [
                "158e6edae533bfdc",
                "79900a566af02159"
            ]
        ]
    },
    {
        "id": "736d1e21a49f446b",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "store last N any frigate events",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_all\") || [];\n//Keep only last X elements\nvar myArrLength = 10;\n\n//invert array so OLDEST IS FIRST, for functions\nmyEvents.reverse();\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//keep only specific elements\nconst newObj = {\n    id: msg.payload.id, \n    label: msg.payload.label,  \n    direction_calc: msg.payload.direction_calc, \n    speed_calc: msg.payload.speed_calc, \n    };\n\n//add current event to end of array\nmyEvents.push(newObj);\n\n//invert array so NEWEST IS FIRST, for display\nmyEvents.reverse();\n\nflow.set(\"events_all\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2040,
        "wires": [
            [
                "5b307e65106f3540"
            ]
        ]
    },
    {
        "id": "5b307e65106f3540",
        "type": "ui_text",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "group": "7866c2aa313ab8b9",
        "order": 4,
        "width": 12,
        "height": 5,
        "name": "",
        "label": "last N events, text output",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "Courier,monospace",
        "fontSize": "10",
        "color": "#000000",
        "x": 1070,
        "y": 2040,
        "wires": []
    },
    {
        "id": "4c087723a1d698e9",
        "type": "ui_template",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "group": "7866c2aa313ab8b9",
        "name": "last N radar speeding events",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<p class=\"label nr-dashboard-chart-title nr-dashboard-chart-titlel\">last N zone_radar speeding events for radar_camera (>20-mph)</p>\n<table class=\"table\">\n    <tr ng-repeat=\"payload in msg.payload\">\n        <td><img src=\"data:image/jpg;base64, {{payload.thumbnail_base64jpg}}\" alt=\"thumbnail\" /></td>\n        <td>\n            id: {{payload.id}} <br /> \n            label: {{payload.label}} <br />\n            top_score: {{payload.top_score}} <br />\n            frame_time: {{payload.frame_time_datestring}} <br />\n            direction: {{payload.direction_calc}} <br />\n            speed: {{payload.speed_calc}}\n        </td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1090,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "11fa2826769befc7",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "name": "",
        "group": "06dde4be9a9a6b27",
        "order": 7,
        "width": 0,
        "height": 0,
        "label": "Events in zone_radar (5-min) for last 60-min",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "6d738ed81fefbedc",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "",
        "group": "7866c2aa313ab8b9",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "cumulative events by object since 0400",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1140,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "d856c68660eb2202",
        "type": "mqtt out",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "",
        "topic": "tm/events",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a5d65dd0e3566daa",
        "x": 1040,
        "y": 2420,
        "wires": []
    },
    {
        "id": "0f65ceafe3f7c069",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "format last N radar event for output",
        "func": "\n\nconst newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\nnewMsg.payload.id = msg.frigate_event.id;\nnewMsg.payload.camera = msg.frigate_event.camera;\nnewMsg.payload.label = msg.frigate_event.label;\nnewMsg.payload.sub_label = msg.frigate_event.sub_label;\nnewMsg.payload.top_score = msg.frigate_event.top_score;\n\nnewMsg.payload.frame_time_datestring = new Date(msg.frigate_event.frame_time * 1000).toLocaleString();\nnewMsg.payload.frame_time = msg.frigate_event.frame_time;\nnewMsg.payload.start_time = msg.frigate_event.start_time;\nnewMsg.payload.end_time = msg.frigate_event.end_time;\n\nnewMsg.payload.entered_zones = msg.frigate_event.entered_zones; //array\nnewMsg.payload.direction_calc = msg.frigate_event.direction_calc;\nnewMsg.payload.speed_calc = msg.frigate_event.speed_calc;\n\nnewMsg.payload.thumbnail_base64jpg = msg.frigate_event_api_thumbnail;\n\nnewMsg.payload.location = msg.frigate_event.location;\n\nreturn newMsg;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1900,
        "wires": [
            [
                "e5391514131a2b5a",
                "d66541089b01306e"
            ]
        ]
    },
    {
        "id": "c90aed37b7a31d9e",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "name": "trigger Event query every 5-min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 2560,
        "wires": [
            [
                "584504e6c8935eaf"
            ]
        ]
    },
    {
        "id": "5417aae0d14fa661",
        "type": "ui_template",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "group": "06dde4be9a9a6b27",
        "name": "car speed stats for today, since 0400",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<p class=\"label nr-dashboard-chart-title nr-dashboard-chart-titlel\">car speed stats for today, since 0400</p>\n<table class=\"table\">\n    <tr ng-repeat=\"payload in msg.payload\">\n        <td ng-repeat =\"(key,value) in payload\">{{key}}: </td>\n        <td ng-repeat =\"(key,value) in payload\">{{value}}</td>\n    </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1130,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "f57e08e6fb9c0d09",
        "type": "switch",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "only for zone_capture",
        "property": "payload.entered_zones",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "zone_capture",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 2180,
        "wires": [
            [
                "d23be15251ed6d73"
            ]
        ]
    },
    {
        "id": "d23be15251ed6d73",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "set flow.event_latest",
        "rules": [
            {
                "t": "set",
                "p": "event_latest",
                "pt": "flow",
                "to": "payload.label",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 2240,
        "wires": [
            [
                "170ddffb726db9e0"
            ]
        ]
    },
    {
        "id": "4760bed60a7f392a",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 2280,
        "wires": [
            [
                "170ddffb726db9e0"
            ]
        ]
    },
    {
        "id": "09f99c931e5535bf",
        "type": "http request",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "frigate http api for thumbnail",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://localhost:5000//api/events/{{{frigate_event.id}}}/thumbnail.jpg",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 1780,
        "wires": [
            [
                "9226865e3385eb56",
                "aa0afb5180297e2b"
            ]
        ]
    },
    {
        "id": "08121a31488784bc",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "set frigate_event_api_thumbnail",
        "rules": [
            {
                "t": "set",
                "p": "frigate_event_api_thumbnail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 1820,
        "wires": [
            [
                "0f65ceafe3f7c069"
            ]
        ]
    },
    {
        "id": "9226865e3385eb56",
        "type": "image",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "",
        "width": "175",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": false,
        "pass": false,
        "outputs": 0,
        "x": 710,
        "y": 1780,
        "wires": []
    },
    {
        "id": "aa0afb5180297e2b",
        "type": "base64",
        "z": "28627559bebdc324",
        "g": "f5d2d92d50d18ce2",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 550,
        "y": 1820,
        "wires": [
            [
                "08121a31488784bc"
            ]
        ]
    },
    {
        "id": "c2270f3050bf35ab",
        "type": "change",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "set frigate_event from payload",
        "rules": [
            {
                "t": "set",
                "p": "frigate_event",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1700,
        "wires": [
            [
                "09f99c931e5535bf"
            ]
        ]
    },
    {
        "id": "3214e8cd3ea79630",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "9b9e4fc50b744fc3",
        "name": "debug: last N radar events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1840,
        "wires": []
    },
    {
        "id": "5f3716d2176c3ab4",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "create sqlite query, daily summary in zone_capture",
        "func": "//frame_time is already in seconds\n\nconst query = `\nSELECT\n    date(frame_time, 'unixepoch') as day,\n    label,\n    camera,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time > (unixepoch('now') - (86400 * 10))\n    AND camera = '${env.get(\"VAR_RADAR_CAMERA\")}'\n    AND entered_zones LIKE '%zone_capture%'\nGROUP BY\n    label, date(frame_time, 'unixepoch'), camera\nORDER BY\n    label, day, camera;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 400,
        "wires": [
            [
                "bdb4b259d648b1f0"
            ]
        ]
    },
    {
        "id": "bdb4b259d648b1f0",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 370,
        "y": 440,
        "wires": [
            [
                "ec7a0e0b1c62e91d"
            ]
        ]
    },
    {
        "id": "ec7a0e0b1c62e91d",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "structure daily summary payload",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //if label doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.label) < 0) {\n        newMsg[0].series.push(myItem.label);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.day)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.day);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n    }\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            [
                "b65e1877b1e04881"
            ]
        ]
    },
    {
        "id": "928b71f25ce6e7b6",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "create sqlite query, 1-hour counts last day in zone_capture",
        "func": "//frame_time is already in seconds\n\nconst query = `\nSELECT\n    strftime('%FT%H:00:00.000Z', frame_time, 'unixepoch') as hour,\n    label,\n    camera,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time > (unixepoch('now') - (86400 * 1))\n    AND camera = '${env.get(\"VAR_RADAR_CAMERA\")}'\n    AND entered_zones LIKE '%zone_capture%'\nGROUP BY\n    label, strftime('%F %H', frame_time, 'unixepoch'), camera\nORDER BY\n    label, hour, camera;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 660,
        "wires": [
            [
                "c03516d1eb65598d"
            ]
        ]
    },
    {
        "id": "c03516d1eb65598d",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 430,
        "y": 700,
        "wires": [
            [
                "4f84bcb60e4be762"
            ]
        ]
    },
    {
        "id": "4f84bcb60e4be762",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "5173f4b3ac03407a",
        "name": "structure 1-hour counts last day",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //if label doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.label) < 0) {\n        newMsg[0].series.push(myItem.label);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.hour)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.hour);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n    }\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "02469f2425072f7b"
            ]
        ]
    },
    {
        "id": "158e6edae533bfdc",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "name": "create sqlite query, 1-hour counts last day in zone_radar",
        "func": "//frame_time is already in seconds\n//frame_time as 5-minute intervals, rounded up\n\nconst query = `\nSELECT\n    strftime('%Y-%m-%d %H:%M:00', (frame_time + 299), 'unixepoch', '-' || ((frame_time + 299) % 300) || ' seconds', 'localtime') AS bin_time,\n    label,\n    camera,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time > (unixepoch('now') - (3600))\n    AND camera = '${env.get(\"VAR_RADAR_CAMERA\")}'\n    AND entered_zones LIKE '%zone_radar%'\nGROUP BY\n    label, strftime('%Y-%m-%d %H:%M:00', (frame_time + 299), 'unixepoch', '-' || ((frame_time + 299) % 300) || ' seconds', 'localtime'), camera\nORDER BY\n    label, bin_time, camera;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1200,
        "wires": [
            [
                "eff2193c8246a9d2"
            ]
        ]
    },
    {
        "id": "eff2193c8246a9d2",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 430,
        "y": 1240,
        "wires": [
            [
                "57fa6ca2b7d290e3"
            ]
        ]
    },
    {
        "id": "57fa6ca2b7d290e3",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0e1614cf2e5f9942",
        "name": "structure 1-hour counts last day",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //if label doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.label) < 0) {\n        newMsg[0].series.push(myItem.label);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.bin_time)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.bin_time);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n    }\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1280,
        "wires": [
            [
                "11fa2826769befc7"
            ]
        ]
    },
    {
        "id": "170ddffb726db9e0",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "create sqlite query, daily cumulative counts in zone_capture",
        "func": "//frame_time is already in seconds\n\nconst query = `\nSELECT\n    label,\n    COUNT(*) as count\nFROM\n    events\nWHERE\n    frame_time >= unixepoch(strftime('%Y-%m-%dT04:00','now', 'localtime'),'utc')\n    AND camera = '${env.get(\"VAR_RADAR_CAMERA\")}'\n    AND entered_zones LIKE '%zone_capture%'\nGROUP BY \n    label\nORDER BY\n    label;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2280,
        "wires": [
            [
                "befe91e6862c72db"
            ]
        ]
    },
    {
        "id": "befe91e6862c72db",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 750,
        "y": 2320,
        "wires": [
            [
                "13a061996f9322f3",
                "98571c77b9801a83"
            ]
        ]
    },
    {
        "id": "13a061996f9322f3",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "structure daily object counts for chart",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\n\n//create bicycle_adj to be bicycle+motorcycle\n//create person_adj to be person - bicycle_adj\n\nconst motorcycleCount = msg.payload.find(item => item.label === 'motorcycle')?.count || 0;\nconst bicycleCount = msg.payload.find(item => item.label === 'bicycle')?.count || 0;\nconst personCount = msg.payload.find(item => item.label === 'person')?.count || 0;\n\nconst formattedData = [{\n  series: [...msg.payload.map(item => item.label), 'bicycle_adj', 'person_adj'],\n  data: [\n    ...(msg.payload.map(item => [item.count])),\n    [bicycleCount + motorcycleCount],\n    [personCount - (bicycleCount + motorcycleCount)]\n  ],\n  labels: [\"\"]\n}];\n\nmsg.payload = formattedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2380,
        "wires": [
            [
                "6d738ed81fefbedc"
            ]
        ]
    },
    {
        "id": "98571c77b9801a83",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "453513c49e4b1b60",
        "name": "structure daily object counts for tm/events",
        "func": "//send as key:value pair for lable:count\n\n//create bicycle_adj to be bicycle+motorcycle\n//create person_adj to be person - bicycle_adj\n\n\n\nconst motorcycleCount = msg.payload.find(item => item.label === 'motorcycle')?.count || 0;\nconst bicycleCount = msg.payload.find(item => item.label === 'bicycle')?.count || 0;\nconst personCount = msg.payload.find(item => item.label === 'person')?.count || 0;\n\nconst formattedData = msg.payload.reduce((acc, curr) => {\n  acc[curr.label] = curr.count;\n\n  if (curr.label === 'bicycle') {\n    acc['bicycle_adj'] = (bicycleCount + motorcycleCount);\n  }\n\n  if (curr.label === 'person') {\n    acc['person_adj'] = (personCount - (bicycleCount + motorcycleCount));\n  }\n\n  return acc;\n}, {});\n\nformattedData['event_latest'] = flow.get(\"event_latest\");\n\nmsg.payload = formattedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2420,
        "wires": [
            [
                "d856c68660eb2202"
            ]
        ]
    },
    {
        "id": "584504e6c8935eaf",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "name": "create sqlite query, daily cumulative CAR counts in zone_capture + zone_radar that HAVE valid speed_calc",
        "func": "//frame_time is already in seconds\n//cars with speeds in zone_radar AND zone_capture since 0400 today\n\nconst query = `\nWITH results AS (\n  SELECT \n    COUNT(*) AS count,\n    AVG(ABS(speed_calc)) AS mean_speed,\n    MAX(CASE WHEN ntile = 5 THEN ABS(speed_calc) ELSE NULL END) AS p25_speed,\n    MAX(CASE WHEN ntile = 10 THEN ABS(speed_calc) ELSE NULL END) AS p50_speed,\n    MAX(CASE WHEN ntile = 15 THEN ABS(speed_calc) ELSE NULL END) AS p75_speed,\n    MAX(CASE WHEN ntile = 17 THEN ABS(speed_calc) ELSE NULL END) AS p85_speed,\n    MAX(ABS(speed_calc)) AS max_speed,\n    SUM(CASE WHEN ABS(speed_calc) > 25 THEN 1 ELSE 0 END) AS count_over_25,\n    JSON_GROUP_ARRAY(speed_calc) AS speeds\n  FROM \n    (SELECT \n       ABS(speed_calc) as speed_calc,\n       NTILE(20) OVER (ORDER BY ABS(speed_calc)) AS ntile\n     FROM \n       events\n     WHERE \n       frame_time >= unixepoch(strftime('%Y-%m-%dT04:00','now', 'localtime'),'utc') AND\n       label = 'car' AND\n       entered_zones LIKE '%zone_radar%' AND\n       entered_zones LIKE '%zone_capture%' AND\n       ABS(speed_calc) NOT NULL AND\n       camera = '${env.get(\"VAR_RADAR_CAMERA\")}'\n    )\n)\nSELECT \n  *, \n  p75_speed + 1.5 * (p75_speed - p25_speed) AS iqr_upper,\n  (SELECT COUNT(*) FROM json_each(results.speeds) WHERE json_each.value > p75_speed + 1.5 * (p75_speed - p25_speed)) AS iqr_upper_freq\nFROM \n  results;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2620,
        "wires": [
            [
                "9cf49f0891d25df1"
            ]
        ]
    },
    {
        "id": "9cf49f0891d25df1",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 770,
        "y": 2660,
        "wires": [
            [
                "6d81c8e3c89b68f6"
            ]
        ]
    },
    {
        "id": "432a378bcc3e7a73",
        "type": "comment",
        "z": "28627559bebdc324",
        "name": "TODO:  show cars w NULL speed_calc, ...",
        "info": "",
        "x": 220,
        "y": 2900,
        "wires": []
    },
    {
        "id": "6d81c8e3c89b68f6",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "1bd1f21fa0390c69",
        "name": "format payload for car speed daily",
        "func": "\nconst originalPayload = msg.payload;\n\nconst convertedPayload = Object.keys(originalPayload[0])\n  .filter(key => key !== \"speeds\")\n  .map(key => {\n    const value = originalPayload[0][key];\n    return { [key]: typeof value === \"number\" ? Math.round(value) : value };\n  });\n\nmsg.payload = convertedPayload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2720,
        "wires": [
            [
                "5417aae0d14fa661"
            ]
        ]
    },
    {
        "id": "7cc031e5a7d773a4",
        "type": "sqlite",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 350,
        "y": 980,
        "wires": [
            [
                "39d895a16ca6f6f1",
                "62be7d38b991716c"
            ]
        ]
    },
    {
        "id": "79900a566af02159",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "query TimedSpeedCounts for last 60-min",
        "func": "//time is already in seconds\n//get for last 60-minutes, 3600 seconds\n\nconst query = `\nSELECT\n    strftime('%Y-%m-%d %H:%M:00', datetime(time, 'unixepoch', 'localtime'), '+0 minutes') AS time,\n    direction,\n    count,\n    ABS(average) as speed\nFROM\n    radar_timed_speed_counts\nWHERE\n    time > (unixepoch('now') - (3600))\nORDER BY\n    time;\n`;\n\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 940,
        "wires": [
            [
                "7cc031e5a7d773a4"
            ]
        ]
    },
    {
        "id": "39d895a16ca6f6f1",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "structure SQLite TimedSpeedCounts.counts",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, directions\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].direction = [];\n\n// time\n// count\n// direction\n\n\nmsg.payload.forEach((myItem) => {\n\n    //if direction doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.direction) < 0) {\n        newMsg[0].series.push(myItem.direction);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].findIndex((element) => element.x == String(new Date(myItem.time)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.time);\n        thisDataPoint.y = myItem.count;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)][xIndex].y += myItem.count;\n    };\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 980,
        "wires": [
            [
                "cbb3b02ca505a55b"
            ]
        ]
    },
    {
        "id": "62be7d38b991716c",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "structure sqlite TimedSpeedCounts.speed_average",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, directions\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].direction = [];\n\n// time\n// speed\n// direction\n\n\nmsg.payload.forEach((myItem) => {\n\n   // use absolute value of speed, bc speeds outbound will be negative\n   myItem.speed = Math.abs(myItem.speed)\n\n   //if direction doesn't exist, push it\n    if (newMsg[0].series.indexOf(myItem.direction) < 0) {\n        newMsg[0].series.push(myItem.direction);\n        //create new data array element that matches the series index\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)] = [];\n    }\n\n    //Check if it's a new date or existing in data[0][0].x\n    //datapoint for date \n    let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].findIndex((element) => element.x == String(new Date(myItem.time)));\n    if (xIndex < 0) {\n        //new date\n        let thisDataPoint = {};\n        thisDataPoint.x = new Date(myItem.time);\n        thisDataPoint.y = myItem.speed;\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)].push(thisDataPoint);\n    }\n    else {\n        //date exists, sum counts\n        newMsg[0].data[newMsg[0].series.indexOf(myItem.direction)][xIndex].y += myItem.speed;\n    };\n\n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1060,
        "wires": [
            [
                "7db4b197df9eb075"
            ]
        ]
    },
    {
        "id": "cbb3b02ca505a55b",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "",
        "group": "06dde4be9a9a6b27",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "SQLite TimedSpeedCounts.counts (5-min) for last 60-min",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "7db4b197df9eb075",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "76417db2b472ef4f",
        "name": "",
        "group": "06dde4be9a9a6b27",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "SQLite TimedSpeedCounts.speed_average (5-min) for last 60-min",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "6a05187a692bed7c",
        "type": "ui_form",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "",
        "label": "Create new Comment",
        "group": "d3f63882e39b03a6",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Effective Date (start of comment period)",
                "value": "effective_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Effective Time",
                "value": "effective_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Expiration Date (end of comment period)",
                "value": "expiration_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Expiration Time",
                "value": "expiration_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Comment",
                "value": "comment",
                "type": "multiline",
                "required": false,
                "rows": 3
            },
            {
                "label": "Commenter Name (or description)",
                "value": "name",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "effective_date": "",
            "effective_time": "",
            "expiration_date": "",
            "expiration_time": "",
            "comment": "",
            "name": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "8d65b604e8d9e7f9"
            ]
        ]
    },
    {
        "id": "f27b6d01ae7836d6",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 610,
        "y": 160,
        "wires": [
            [
                "840802d34d143ded"
            ]
        ]
    },
    {
        "id": "8f0bcaf04756da4f",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "create table comments",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS comments (id TEXT PRIMARY KEY, effectiveDateTime TIMESTAMP, expirationDateTime TIMESTAMP, entryDateTime TIMESTAMP, comment TEXT, commenter_name TEXT);",
        "x": 380,
        "y": 160,
        "wires": [
            [
                "f27b6d01ae7836d6"
            ]
        ]
    },
    {
        "id": "e8b8e45c4bc045d8",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "select latest 5 rows from comments",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM comments ORDER BY entryDateTime DESC LIMIT 5;",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "f27b6d01ae7836d6"
            ]
        ]
    },
    {
        "id": "840802d34d143ded",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "sqlite select last 5 comments",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "8d65b604e8d9e7f9",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "name": "create comment payload",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\n//create effectiveDateTime, if no date, use current date, if no time, leave as default\nconst effectiveDateTime = (msg.payload.effective_date) ? new Date(msg.payload.effective_date) : new Date();\nif (msg.payload.effective_time) {\n    const effectiveTime = new Date(msg.payload.effective_time);\n    \n    effectiveDateTime.setTime(effectiveTime.getTime());\n}\n\n//create expirationDateTime, if no date, leave undefined\nconst expirationDateTime = (msg.payload.expiration_date) ? new Date(msg.payload.expiration_date) : undefined;\nif (msg.payload.expiration_time) {\n    const expirationTime = new Date(msg.payload.expiration_time);\n\n    expirationDateTime.setTime(expirationTime.getTime());\n}\n\n//create entryDateTime\nconst entryDateTime = new Date();\n\nnewMsg.payload.id = entryDateTime.getTime() + '-' + Math.floor(Math.random() * 0xFFFFFFFF).toString(16).padStart(8, '0');\nnewMsg.payload.effectiveDateTime = effectiveDateTime;\nnewMsg.payload.expirationDateTime = expirationDateTime;\nnewMsg.payload.entryDateTime = entryDateTime;\nnewMsg.payload.comment = msg.payload.comment;\nnewMsg.payload.commenter_name = msg.payload.name;\n\nconst obj = newMsg.payload;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nnewMsg.params = keyedObj;\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "db1f35650c8d6448"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "db1f35650c8d6448",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO comments (id, effectiveDateTime, expirationDateTime, entryDateTime, comment, commenter_name)\nVALUES ($id, $effectiveDateTime, $expirationDateTime, $entryDateTime, $comment, $commenter_name);\n",
        "name": "tmdb.comments, Prepared Statement",
        "x": 710,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f43a276d3a899fe8",
        "type": "ui_form",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "",
        "label": "Generate Events JSON",
        "group": "eab37b30ecd3f935",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Event start date (default 7-days ago)",
                "value": "start_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Event start time",
                "value": "start_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Event end date (default now)",
                "value": "end_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Event end time",
                "value": "end_time",
                "type": "time",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "start_date": "",
            "start_time": "",
            "end_date": "",
            "end_time": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "c45589c369c843a5",
                "c25ade7ddaeca697"
            ]
        ]
    },
    {
        "id": "c25ade7ddaeca697",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "debug: JSON events form input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 660,
        "wires": []
    },
    {
        "id": "c45589c369c843a5",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "create events query",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\n//create startDateTime, if no date, use 7 days ago, if no time, leave as default\nconst startDateTime = (msg.payload.start_date) ? new Date(msg.payload.start_date) : new Date(new Date().setDate(new Date().getDate() - 7));\nif (msg.payload.start_time) {\n    const startTime = new Date(msg.payload.start_time);\n    \n    startDateTime.setTime(startTime.getTime());\n}\n\n//create endDateTime, if no date, use current date, if no time, leave as default\nconst endDateTime = (msg.payload.end_date) ? new Date(msg.payload.end_date) : new Date();\nif (msg.payload.end_time) {\n    const endTime = new Date(msg.payload.end_time);\n\n    endDateTime.setTime(endTime.getTime());\n}\n\nnewMsg.payload.startDateTime = startDateTime.getTime()/1000;\nnewMsg.payload.endDateTime = endDateTime.getTime()/1000;\n\nnewMsg.topic = \"SELECT * FROM events WHERE start_time >= '\"+ newMsg.payload.startDateTime +\"' AND end_time <= '\"+ newMsg.payload.endDateTime +\"';\";\n\nlet formatstartDateTime = new Date(newMsg.payload.startDateTime * 1000).toISOString();\nlet formatendDateTime = new Date(newMsg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.template = `\n    <h3>Generated Events JSON</h3>\n    Last generated:\n    <table>\n        <tr>\n            <td>Start:</td>\n            <td>${formatstartDateTime}</td>\n        </tr>\n        <tr>\n            <td>End:</td> \n            <td>${formatendDateTime}</td>\n        </tr>\n    </table>\n    <ul>\n        <li><a href=\"/files/events.json\">events.json</a></li>\n    </ul>\n`;\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "44f3b2f2c2ae88fe"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "f31a598d.9fd2c8",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "Set base path",
        "func": "//restrict to c:\\temp\\\nvar basePath = \"code/nodered/db/\";\nvar filename = msg.req.params.fn;\n\n\nif(filename.includes(\"..\\\\\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} else if(filename.includes(\"../\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} \n//TODO: add more checks\n\nmsg.filename = basePath + filename;\nreturn [msg, null];//fire output 1\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "34dc99e5.495466"
            ],
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "98261154.3006",
        "type": "http response",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 440,
        "wires": []
    },
    {
        "id": "34dc99e5.495466",
        "type": "file in",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 470,
        "y": 380,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "38d65d59.1d8aa2",
        "type": "catch",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 480,
        "wires": [
            [
                "3b8014a.86ad8ec",
                "5b18a8e7.fb8da8"
            ]
        ]
    },
    {
        "id": "3b8014a.86ad8ec",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "Set 404",
        "func": "msg.payload = msg.error;\nmsg.statusCode = 404;//resource not found\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "5b18a8e7.fb8da8",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 520,
        "wires": []
    },
    {
        "id": "5de7cbb4.fa21a4",
        "type": "comment",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "Create http endpoint <nodered>/files/xxx  where xxx is the file name to download",
        "info": "",
        "x": 320,
        "y": 340,
        "wires": []
    },
    {
        "id": "67ecfa7f.3f0e24",
        "type": "http in",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "",
        "url": "/files/:fn",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "f31a598d.9fd2c8"
            ]
        ]
    },
    {
        "id": "7050ed881890ce4d",
        "type": "comment",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "enable download link",
        "info": "",
        "x": 360,
        "y": 740,
        "wires": []
    },
    {
        "id": "f2bd56710ba03238",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 870,
        "y": 840,
        "wires": [
            [
                "b4e0b45a7bedd728"
            ]
        ]
    },
    {
        "id": "ecb0810a22dc4a5c",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "c45589c369c843a5"
            ]
        ]
    },
    {
        "id": "b4e0b45a7bedd728",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "",
        "filename": "/db/events.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1180,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5124f45846b94ef0",
        "type": "ui_toast",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "Events JSON output created (download available)",
        "name": "",
        "x": 1180,
        "y": 780,
        "wires": []
    },
    {
        "id": "82073a9c3e0f504f",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "name": "format events creation notification",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\nlet startDateTime = new Date(msg.payload.startDateTime * 1000).toISOString();\nlet endDateTime = new Date(msg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.topic = \"<div><b>Created events.json withing DateTimes</b></div>\"\nnewMsg.payload = \"<div><span>Start: \" + startDateTime + \"</span> <br /> <span>End: \" + endDateTime +\"</span></div>\";\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 780,
        "wires": [
            [
                "5124f45846b94ef0"
            ]
        ]
    },
    {
        "id": "38b44ecb9288caf2",
        "type": "ui_form",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "label": "Generate Radar JSON",
        "group": "f0ca9c7dffb5ae3c",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Radar start date (default 7-days ago)",
                "value": "start_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Radar start time",
                "value": "start_time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Radar end date (default now)",
                "value": "end_date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Radar end time",
                "value": "end_time",
                "type": "time",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "start_date": "",
            "start_time": "",
            "end_date": "",
            "end_time": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 160,
        "y": 960,
        "wires": [
            [
                "91cae91e61fcea38",
                "55b8ab3b2b7af294"
            ]
        ]
    },
    {
        "id": "55b8ab3b2b7af294",
        "type": "debug",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "debug: JSON radar form input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 960,
        "wires": []
    },
    {
        "id": "790a89794204c383",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_dov query",
        "func": "msg.topic = \"SELECT * FROM radar_dov WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1140,
        "wires": [
            [
                "314a302b5d86fb5a"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "314a302b5d86fb5a",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1000,
        "y": 1140,
        "wires": [
            [
                "7dba386e57337c72"
            ]
        ]
    },
    {
        "id": "b00e6ad2a4612cad",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "91cae91e61fcea38"
            ]
        ]
    },
    {
        "id": "7dba386e57337c72",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_dov.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "04df9cb8c0753abb",
        "type": "ui_toast",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "Events JSON output created (download available)",
        "name": "",
        "x": 1140,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3557178575375eb6",
        "type": "comment",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "enable download link when generated",
        "info": "",
        "x": 210,
        "y": 1080,
        "wires": []
    },
    {
        "id": "29583ca6de66fedf",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "format radar creation notification",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\nlet startDateTime = new Date(msg.payload.startDateTime * 1000).toISOString();\nlet endDateTime = new Date(msg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.topic = \"<div><b>Created radar.json withing DateTimes</b></div>\"\nnewMsg.payload = \"<div><span>Start: \" + startDateTime + \"</span> <br /> <span>End: \" + endDateTime +\"</span></div>\";\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "04df9cb8c0753abb"
            ]
        ]
    },
    {
        "id": "91cae91e61fcea38",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar dates for query",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\n\n//create startDateTime, if no date, use 7 days ago, if no time, leave as default\nconst startDateTime = (msg.payload.start_date) ? new Date(msg.payload.start_date) : new Date(new Date().setDate(new Date().getDate() - 7));\nif (msg.payload.start_time) {\n    const startTime = new Date(msg.payload.start_time);\n    \n    startDateTime.setTime(startTime.getTime());\n}\n\n//create endDateTime, if no date, use current date, if no time, leave as default\nconst endDateTime = (msg.payload.end_date) ? new Date(msg.payload.end_date) : new Date();\nif (msg.payload.end_time) {\n    const endTime = new Date(msg.payload.end_time);\n\n    endDateTime.setTime(endTime.getTime());\n}\n\nnewMsg.payload.startDateTime = startDateTime.getTime()/1000;\nnewMsg.payload.endDateTime = endDateTime.getTime() / 1000;\n\nlet formatstartDateTime = new Date(newMsg.payload.startDateTime * 1000).toISOString();\nlet formatendDateTime = new Date(newMsg.payload.endDateTime * 1000).toISOString();\n\nnewMsg.template = `\n    <h3>Generated Radar JSON</h3>\n    Last generated:\n    <table>\n        <tr>\n            <td>Start:</td> \n            <td>${formatstartDateTime}</td>\n        </tr>\n        <tr>\n            <td>End:</td> \n            <td>${formatendDateTime}</td>\n        </tr>\n    </table>\n    <ul>\n        <li><a href=\"/files/radar_dov.json\">radar_dov.json</a></li>\n        <li><a href=\"/files/radar_timed_speed_counts.json\">radar_timed_speed_counts.json</a> </li>\n        <li><a href=\"/files/radar_raw_speed_magnitude.json\">radar_raw_speed_magnitude.json</a> </li>\n        <li><a href=\"/files/radar_raw_speed_magnitude_single.json\">radar_raw_speed_magnitude_single.json</a> </li>\n        <li><a href=\"/files/radar_oc_payload.json\">radar_oc_payload.json</a> </li>\n    </ul>\n`;\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1000,
        "wires": [
            [
                "c00796fd5642dae0"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "68fecdfda8e4e774",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_timed_speed_counts query",
        "func": "msg.topic = \"SELECT * FROM radar_timed_speed_counts WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1200,
        "wires": [
            [
                "8c660460752a27b2"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "8c660460752a27b2",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1000,
        "y": 1200,
        "wires": [
            [
                "d50d86038fe1af32"
            ]
        ]
    },
    {
        "id": "d50d86038fe1af32",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_timed_speed_counts.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1290,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "b5e099e92ce27bf6",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_raw_speed_magnitude query",
        "func": "msg.topic = \"SELECT * FROM radar_raw_speed_magnitude WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1260,
        "wires": [
            [
                "f77b0f12f5047d25"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "f77b0f12f5047d25",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1000,
        "y": 1260,
        "wires": [
            [
                "fbf290de9b7b858f"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "fbf290de9b7b858f",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_raw_speed_magnitude.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1300,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "35dd409613d47a60",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_raw_speed_magnitude_single query",
        "func": "msg.topic = \"SELECT * FROM radar_raw_speed_magnitude_single WHERE time >= '\"+ msg.payload.startDateTime +\"' AND time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "729b953264ce47aa"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "729b953264ce47aa",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1000,
        "y": 1320,
        "wires": [
            [
                "23b1ba527419b29b"
            ]
        ]
    },
    {
        "id": "23b1ba527419b29b",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_raw_speed_magnitude_single.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1320,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "b519f0927284d44a",
        "type": "function",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "create radar_oc_payload query",
        "func": "msg.topic = \"SELECT * FROM radar_oc_payload WHERE start_time >= '\"+ msg.payload.startDateTime +\"' AND end_time <= '\"+ msg.payload.endDateTime +\"';\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1380,
        "wires": [
            [
                "2f3cc99c3c41ab90"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "2f3cc99c3c41ab90",
        "type": "sqlite",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1000,
        "y": 1380,
        "wires": [
            [
                "62e90c91d0238273"
            ]
        ]
    },
    {
        "id": "62e90c91d0238273",
        "type": "file",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "name": "",
        "filename": "/db/radar_oc_payload.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "6e2a152aecd929d3",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "541d31d14bcd8b00",
        "group": "d3f63882e39b03a6",
        "name": "comments instructions",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h2> Create Comments</h2>\n<p>Comments are date-sensitive entries about the Traffic Monitor status, deployment, location, conditions, construction, etc.\n    <br />\n    These comments do not directly impact any display or counts but may be used for downstream analysis. Do not include any personally identifiable information.\n</p>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 140,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c00796fd5642dae0",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "1bfaaf118f38aee0",
        "group": "f0ca9c7dffb5ae3c",
        "name": "download Radar JSON",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 1080,
        "wires": [
            [
                "29583ca6de66fedf",
                "790a89794204c383",
                "68fecdfda8e4e774",
                "b5e099e92ce27bf6",
                "35dd409613d47a60",
                "b519f0927284d44a"
            ]
        ]
    },
    {
        "id": "b43ee265985f0f56",
        "type": "ui_ui_control",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "control JSON download groups",
        "events": "change",
        "x": 1110,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "44f3b2f2c2ae88fe",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "0e3b2be7bcc3d3b8",
        "group": "eab37b30ecd3f935",
        "name": "download Events JSON",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 780,
        "wires": [
            [
                "f2bd56710ba03238",
                "82073a9c3e0f504f"
            ]
        ]
    },
    {
        "id": "60bbb02aeab1379c",
        "type": "ui_button",
        "z": "239d7b3ba410ad5e",
        "name": "show events_json",
        "group": "c0886ba4111fbfae",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate Events JSON",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"group\":{\"show\":[\"Database_Tab_Events_JSON_Generator\"]}}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 830,
        "y": 460,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "0a1c47e427d83c4b",
        "type": "ui_button",
        "z": "239d7b3ba410ad5e",
        "name": "show radar_json",
        "group": "c0886ba4111fbfae",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate Radar JSON",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"group\":{\"show\":[\"Database_Tab_Radar_JSON_Generator\"]}}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 840,
        "y": 500,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "4611d2864ef75f3c",
        "type": "inject",
        "z": "239d7b3ba410ad5e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"group\":{\"hide\":[\"Database_Tab_Events_JSON_Generator\",\"Database_Tab_Radar_JSON_Generator\"]}}",
        "payloadType": "json",
        "x": 870,
        "y": 420,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "9e38989f2e13e4d7",
        "type": "ui_button",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "name": "hide JSON",
        "group": "c0886ba4111fbfae",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Hide JSON generators",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"Database_Tab_Events_JSON_Generator\",\"Database_Tab_Radar_JSON_Generator\"]}}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 850,
        "y": 560,
        "wires": [
            [
                "b43ee265985f0f56"
            ]
        ]
    },
    {
        "id": "7ec49429a06e3bbf",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "group": "c0886ba4111fbfae",
        "name": "download Radar DB",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<h3>Radar database and tables</h3>\n<div>\n    <p><a href=\"/files/radar.sqlite\">radar.sqlite</a> (entire database)</p>\n    <ul>\n        <li>radar_dov</li>\n        <li>radar_timed_speed_counts</li>\n        <li>radar_raw_speed_magnitude</li>\n        <li>radar_raw_speed_magnitude_single</li>\n        <li>radar_oc_payload</li>\n    </ul>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "a8c2985e.d23ad8",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "group": "c0886ba4111fbfae",
        "name": "download Events DB",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<h3>Events database and tables</h3>\n<div>\n    <p><a href=\"/files/tmdb.sqlite\">tmdb.sqlite</a> (entire database)</p>\n    <ul>\n        <li>events</li>\n        <li>comments</li>\n    </ul>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2b95a63a76f28f09",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "group": "c0886ba4111fbfae",
        "name": "download DB instructions",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h2>Download databases</h2>\n<p>The links below will download the entire Traffic Monitor device events and/or radar SQLite database(s) to your current browser. \n    Each database will include events and/or radar readings only from this device while the Traffic Monitor was deployed and running.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 830,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c30220553ae11805",
        "type": "ui_template",
        "z": "239d7b3ba410ad5e",
        "g": "3a9bb6ed1306eb1c",
        "group": "c0886ba4111fbfae",
        "name": "json button instructions",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<h2>Generate JSON payloads</h2>\n<p>You may also generate selectable DateTime-constrained JSON payloads from events and/or radar database tables using the respective below buttons.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "9fe1b87c70ae182d",
        "type": "catch",
        "z": "05fcb02c571dcfee",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 40,
        "wires": [
            [
                "070133633f340279"
            ]
        ]
    },
    {
        "id": "070133633f340279",
        "type": "debug",
        "z": "05fcb02c571dcfee",
        "name": "debug error, system tab",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 40,
        "wires": []
    },
    {
        "id": "0a28f82092611160",
        "type": "http request",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "send client-side attributes",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "542b3b8720733a01"
            ]
        ]
    },
    {
        "id": "542b3b8720733a01",
        "type": "debug",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "client-side attributes response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 340,
        "wires": []
    },
    {
        "id": "ac10d4e38e95fa26",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set up tb client-side attributes post ",
        "func": "let serverUrl = global.get(\"serverUrl\", \"config\")\nlet serverPort = global.get(\"serverPort\", \"config\")\nlet accessToken = global.get(\"accessToken\", \"config\")\nmsg.url = `${serverUrl}:${serverPort}/api/v1/${accessToken}/attributes`\n\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "0a28f82092611160"
            ]
        ]
    },
    {
        "id": "64c998a572e86dce",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "command": "cat /sys/firmware/devicetree/base/serial-number",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 380,
        "y": 200,
        "wires": [
            [
                "6d99762995fa853e"
            ],
            [],
            []
        ]
    },
    {
        "id": "4d67617dadcb9ede",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "64c998a572e86dce",
                "10b176495132c277",
                "b6bb1e836852dc04",
                "416d4b4451795bfe",
                "5bb734f0283c5112",
                "9dc62a7e0c39ac0e",
                "f216858954e6862d",
                "614c44640342d24f"
            ]
        ]
    },
    {
        "id": "28063911d2bbf57e",
        "type": "comment",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "Firmware (TM Repo release)",
        "info": "",
        "x": 180,
        "y": 360,
        "wires": []
    },
    {
        "id": "185f835e89c9acf9",
        "type": "comment",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "other Client attributes (system)",
        "info": "",
        "x": 190,
        "y": 480,
        "wires": []
    },
    {
        "id": "feba76606996723c",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "os.homedir()",
        "func": "msg.payload = `${os.homedir()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 270,
        "y": 700,
        "wires": [
            []
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "416d4b4451795bfe",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "os.hostname()",
        "func": "msg.payload = `${os.hostname()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 280,
        "y": 540,
        "wires": [
            [
                "8fd2b9ab457b5065"
            ]
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "4d37c161816bd3a2",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "os.platform()",
        "func": "msg.payload = `${os.platform()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 270,
        "y": 740,
        "wires": [
            []
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "5bb734f0283c5112",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "os.release()",
        "func": "msg.payload = `${os.release()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 270,
        "y": 580,
        "wires": [
            [
                "fe2e9d1af38b2ca8"
            ]
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "4a28823b499c04e0",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "os.version()",
        "func": "msg.payload = `${os.version()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 270,
        "y": 620,
        "wires": [
            []
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "9912f0375ba8d68e",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "os.uptime()",
        "func": "msg.payload = `${os.uptime()}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 270,
        "y": 660,
        "wires": [
            []
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "5235db548e7aaef3",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "DateTime",
        "func": "msg.payload = new Date().toString();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 260,
        "y": 780,
        "wires": [
            [
                "41e6810f869d1552"
            ]
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "04e1eeacc898a859",
        "type": "comment",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "get Frigate version, config settings",
        "info": "",
        "x": 200,
        "y": 900,
        "wires": []
    },
    {
        "id": "772eec7408fe83a7",
        "type": "comment",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "get OPS firmware, config settings",
        "info": "",
        "x": 190,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a385b9186009250e",
        "type": "link out",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "out query OPS",
        "mode": "link",
        "links": [
            "6106b11d56c22e4a"
        ],
        "x": 285,
        "y": 1080,
        "wires": []
    },
    {
        "id": "7d28172c4ed9e31b",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "query all settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "\"?P\" & \"?N\" & \"?V\" & \"?B\" & \"??\" & \"O?\" & \"?F\" & \"?s\"",
        "payloadType": "jsonata",
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "a385b9186009250e"
            ]
        ]
    },
    {
        "id": "2f0f10b6553e5840",
        "type": "link in",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "link in 1",
        "links": [
            "3bf70e1d7ad2d43b"
        ],
        "x": 305,
        "y": 1120,
        "wires": [
            [
                "8d209b47f10933fb"
            ]
        ]
    },
    {
        "id": "41d1b47da00573bb",
        "type": "debug",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8d209b47f10933fb",
        "type": "join",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "2",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 400,
        "y": 1120,
        "wires": [
            [
                "41d1b47da00573bb"
            ]
        ]
    },
    {
        "id": "a9c83f35c32eb917",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "d": true,
        "g": "dc2934def36c6285",
        "name": "get Frigate config",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "120",
        "topic": "",
        "x": 150,
        "y": 940,
        "wires": [
            [
                "afdd83e46ca13149",
                "9dc62a7e0c39ac0e"
            ]
        ]
    },
    {
        "id": "afdd83e46ca13149",
        "type": "http request",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "frigate api/config",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:5000/api/config",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 940,
        "wires": [
            [
                "aaba861811975692"
            ]
        ],
        "info": "`{\"camera\":\"picam_gs_h264\",\n\"count\":83,\"day\":\"2024-03-21\",\n\"label\":\"bicycle\",\n\"sub_label\":null,\n\"zones\":[]}`"
    },
    {
        "id": "9dc62a7e0c39ac0e",
        "type": "http request",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "frigate api/version",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:5000/api/version",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 980,
        "wires": [
            [
                "ab89cf1a793d2be5"
            ]
        ],
        "info": "`{\"camera\":\"picam_gs_h264\",\n\"count\":83,\"day\":\"2024-03-21\",\n\"label\":\"bicycle\",\n\"sub_label\":null,\n\"zones\":[]}`"
    },
    {
        "id": "10b176495132c277",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "command": "cat /etc/timezone",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 290,
        "y": 280,
        "wires": [
            [
                "c0a27f9a895a1a94"
            ],
            [],
            []
        ]
    },
    {
        "id": "8fd2b9ab457b5065",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.osHostname",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::osHostname",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "osHostname",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 540,
        "wires": [
            [
                "f2885df5fb61fa3f",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "fe2e9d1af38b2ca8",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.osRelease",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::osRelease",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "osRelease",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 580,
        "wires": [
            [
                "60fb5d8b6644ef02",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "ab89cf1a793d2be5",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.frigateVersion",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::frigateVersion",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "frigateVersion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 980,
        "wires": [
            [
                "02470b22b2f6893c",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "b6bb1e836852dc04",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.tmVersion",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::tmVersion",
                "pt": "global",
                "to": "TM_VERSION",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "tmVersion",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "TM_VERSION",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 400,
        "wires": [
            [
                "bcd4c7df6b6f93d3",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "c0a27f9a895a1a94",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.osTimeZone",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::osTimeZone",
                "pt": "global",
                "to": "$trim(payload)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "osTimeZone",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$trim(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 260,
        "wires": [
            [
                "611949e637ab7173",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "0dccfc4a6467f7f4",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.rpiSN",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::rpiSN",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rpiSN",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 180,
        "wires": [
            [
                "eb3b3c5230e3dd32",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "eb3b3c5230e3dd32",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.rpiSN",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 730,
        "y": 220,
        "wires": []
    },
    {
        "id": "611949e637ab7173",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.osTimeZone",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "bcd4c7df6b6f93d3",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.tmVersion",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 550,
        "y": 440,
        "wires": []
    },
    {
        "id": "f2885df5fb61fa3f",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.osHostname",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 710,
        "y": 540,
        "wires": []
    },
    {
        "id": "60fb5d8b6644ef02",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.osRelease",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "02470b22b2f6893c",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.frigateVersion",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 680,
        "y": 1020,
        "wires": []
    },
    {
        "id": "aaba861811975692",
        "type": "debug",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 940,
        "wires": []
    },
    {
        "id": "41e6810f869d1552",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Date & Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 690,
        "y": 780,
        "wires": []
    },
    {
        "id": "4af4cb47fdd97610",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 780,
        "wires": [
            [
                "5235db548e7aaef3",
                "2f43413dfaba508a"
            ]
        ]
    },
    {
        "id": "2f43413dfaba508a",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "UTC-ms",
        "func": "msg.payload = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 260,
        "y": 820,
        "wires": [
            [
                "040751d9061fe787"
            ]
        ],
        "info": "// nrlint function-eslint:off\n"
    },
    {
        "id": "040751d9061fe787",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time UTC (ms)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 700,
        "y": 820,
        "wires": []
    },
    {
        "id": "d046a343ebc5fe81",
        "type": "join",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 990,
        "y": 180,
        "wires": [
            [
                "ac10d4e38e95fa26"
            ]
        ]
    },
    {
        "id": "f216858954e6862d",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "command": "nmcli -g ip4.address connection show preconfigured",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 1200,
        "wires": [
            [
                "8a7e7a97fd87ea18"
            ],
            [],
            []
        ]
    },
    {
        "id": "614c44640342d24f",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "command": "nmcli -g 802-11-wireless.ssid connection show preconfigured",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 1280,
        "wires": [
            [
                "9beaf948294acd98"
            ],
            [],
            []
        ]
    },
    {
        "id": "8a7e7a97fd87ea18",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.ip4Address",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::ip4Address",
                "pt": "global",
                "to": "$trim(payload)",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ip4Address",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$trim(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 1180,
        "wires": [
            [
                "33dd63cc1dfb53c4",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "33dd63cc1dfb53c4",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.ip4Address",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "9beaf948294acd98",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "set global.ssid",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::ssid",
                "pt": "global",
                "to": "$trim(payload)",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ssid",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$trim(payload)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1260,
        "wires": [
            [
                "2b82d4b028657058",
                "d046a343ebc5fe81"
            ]
        ]
    },
    {
        "id": "2b82d4b028657058",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "group": "55acf8751a68ec74",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "global.ssid",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 1300,
        "wires": []
    },
    {
        "id": "dbc594623a97700f",
        "type": "ui_form",
        "z": "05fcb02c571dcfee",
        "d": true,
        "g": "dd29df4e644425b0",
        "name": "",
        "label": "WiFi SSID Connection",
        "group": "f61a29742f312bb9",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "SSID",
                "value": "ssid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "ssid": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 480,
        "y": 2100,
        "wires": [
            [
                "2d36fe127efba457"
            ]
        ]
    },
    {
        "id": "cfaca843d1fc4679",
        "type": "ui_ui_control",
        "z": "05fcb02c571dcfee",
        "d": true,
        "g": "dd29df4e644425b0",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 2100,
        "wires": [
            [
                "dbc594623a97700f"
            ]
        ]
    },
    {
        "id": "8173247be30b656e",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "d": true,
        "g": "dd29df4e644425b0",
        "name": "function 2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "2d36fe127efba457",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "d": true,
        "g": "dd29df4e644425b0",
        "command": "nmcli device wifi connect \"$SSID\" password \"$PASSWORD\"",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 2100,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "80d2ef499f6612a6",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "d": true,
        "g": "dd29df4e644425b0",
        "command": "nmcli connection add type wifi autoconnect yes ifname wlan1",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 2160,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "83de55ae8c9f54c1",
        "type": "comment",
        "z": "05fcb02c571dcfee",
        "d": true,
        "g": "dd29df4e644425b0",
        "name": "1) create network connect 2) modify for autoconnect yes",
        "info": "",
        "x": 840,
        "y": 2220,
        "wires": []
    },
    {
        "id": "6d99762995fa853e",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "buffer to string",
        "func": "msg.payload = msg.payload.toString();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "0dccfc4a6467f7f4"
            ]
        ]
    },
    {
        "id": "099df29d699f405e",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "dc2934def36c6285",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "4a28823b499c04e0",
                "9912f0375ba8d68e",
                "feba76606996723c",
                "4d37c161816bd3a2"
            ]
        ]
    },
    {
        "id": "32ac6cf42cd8c106",
        "type": "comment",
        "z": "05fcb02c571dcfee",
        "g": "fe1b9f6f9d89d353",
        "name": "upload to TB client-side attributes, separately",
        "info": "",
        "x": 1170,
        "y": 1400,
        "wires": []
    },
    {
        "id": "8768b75dbfee3973",
        "type": "link in",
        "z": "05fcb02c571dcfee",
        "g": "fe1b9f6f9d89d353",
        "name": "deployment submit system link in",
        "links": [
            "b4935c0d86d87137"
        ],
        "x": 205,
        "y": 1420,
        "wires": [
            [
                "f453ff6136f95abe"
            ]
        ]
    },
    {
        "id": "f453ff6136f95abe",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "fe1b9f6f9d89d353",
        "name": "set deployment client side attribute payload",
        "func": "var newMsg = {};\nnewMsg.payload = {};\n\nnewMsg.payload.deploymentID = msg.payload.id;\nnewMsg.payload.deploymentEntryDateTime = msg.payload.entryDateTime;\nnewMsg.payload.deploymentName = msg.payload.name;\nnewMsg.payload.deploymentLat = msg.payload.lat;\nnewMsg.payload.deploymentLon = msg.payload.lon;\nnewMsg.payload.deploymentOrientation = msg.payload.orientation;\nnewMsg.payload.deploymentAddress = msg.payload.address;\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1420,
        "wires": [
            [
                "ac10d4e38e95fa26"
            ]
        ]
    },
    {
        "id": "d541ace7a209a1d7",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "object",
        "payloadType": "date",
        "x": 130,
        "y": 1540,
        "wires": [
            [
                "a411516e46bf7fd6"
            ]
        ]
    },
    {
        "id": "a411516e46bf7fd6",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "format timestamp for current time zone",
        "func": "msg.payload = msg.payload.toString();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1540,
        "wires": [
            [
                "865fd78705194730"
            ]
        ]
    },
    {
        "id": "865fd78705194730",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "group": "f60635dac92356fd",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "currentTimestamp",
        "label": "Current Timestamp",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 750,
        "y": 1540,
        "wires": []
    },
    {
        "id": "497d7e2831eb983b",
        "type": "ui_text",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "group": "f60635dac92356fd",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "currentTimezone",
        "label": "Current Timezone",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 750,
        "y": 1580,
        "wires": []
    },
    {
        "id": "efa31fae9a8d79f5",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "#:(config)::osTimeZone",
        "payloadType": "global",
        "x": 150,
        "y": 1580,
        "wires": [
            [
                "497d7e2831eb983b"
            ]
        ]
    },
    {
        "id": "fe941a906b772e44",
        "type": "ui_text_input",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "dateTimePicker",
        "label": "Date Time Picker",
        "tooltip": "Set Date and Time",
        "group": "f60635dac92356fd",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "datetime-local",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 620,
        "y": 1780,
        "wires": [
            [
                "3fb79b44d4787b15"
            ]
        ]
    },
    {
        "id": "c9bec37bcbc11ccd",
        "type": "ui_switch",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "label": "Set System Date and Time",
        "tooltip": "",
        "group": "f60635dac92356fd",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 1740,
        "wires": [
            [
                "1f33180305d5e203",
                "ec0affbeb3a3cdb8"
            ]
        ]
    },
    {
        "id": "c524d79accb49648",
        "type": "ui_button",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "group": "f60635dac92356fd",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Set System Time Button",
        "tooltip": "DateTime and TZ trigger when input loses focus",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 650,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "1f33180305d5e203",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "msg.enabled",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 1780,
        "wires": [
            [
                "fe941a906b772e44",
                "7f09ed91e3dfbe2f",
                "c524d79accb49648",
                "cf4a0c52e8465948"
            ]
        ]
    },
    {
        "id": "7f09ed91e3dfbe2f",
        "type": "ui_text_input",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "TimezonePicker",
        "label": "Time Zone (unix tz format)",
        "tooltip": "Shall be in Unix TZ format",
        "group": "f60635dac92356fd",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 620,
        "y": 1740,
        "wires": [
            [
                "a035b3ce9edec363"
            ]
        ]
    },
    {
        "id": "801f5adc07bfe7e8",
        "type": "inject",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1700,
        "wires": [
            [
                "1f33180305d5e203"
            ]
        ]
    },
    {
        "id": "3fb79b44d4787b15",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "format datetime for set",
        "func": "//format datetimestamp for `sudo date -s '@EPOCHTIMESTAMP'`\n\nvar dateMS = Date.now();\n\nif (msg.payload) {\n    //sends back entered time as UTC, user should enter their local time\n    // break apart timestamp as a string and reassemble in local time\n\n    const dateTimeObj = new Date(msg.payload);\n\n    const dateString = dateTimeObj.toISOString();\n\n    const year = dateString.split('-')[0];\n    const month = Number(dateString.split('-')[1]) - 1;\n    const datePart = dateString.split('T')[0].split('-')[2];\n    const hours = dateString.split('T')[1].split(':')[0];\n    const minutes = dateString.split('T')[1].split(':')[1];\n\n    dateMS = new Date(year, month, datePart, hours, minutes);\n\n}\n\n//convert to seconds for command\nvar dateS = Math.ceil(dateMS / 1000)\n\nmsg.payload = `'@${dateS}'`;\nmsg.topic = 'Set system date/time'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1780,
        "wires": [
            [
                "fbb1ec4d830de603",
                "c589aa9260a5f3a7"
            ]
        ]
    },
    {
        "id": "fbb1ec4d830de603",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "command": "sudo date -s ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1050,
        "y": 1740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a035b3ce9edec363",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "format timezone for set",
        "func": "//format timezone for `sudo raspi-config nonint do_change_timezone <timezone>`\n//if timezone is null or empty string, use global.osTimeZone\n\nif (flow.get(\"setTimeZone\")) {\n    var thisTimezone = flow.get(\"setTimeZone\");\n    global.set(\"osTimeZone\", thisTimezone, \"config\");\n    console.log(\"Set osTimeZone from flow\");\n}\nelse {\n    var thisTimezone = global.get(\"osTimeZone\", \"config\");\n    console.log(\"Set osTimeZone from existing global\");\n}\n\nmsg.payload = thisTimezone;\nmsg.topic = 'Set system time zone';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1740,
        "wires": [
            [
                "504aa2fe928643b3",
                "33f201622a5a02cd"
            ]
        ]
    },
    {
        "id": "504aa2fe928643b3",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "command": "sudo raspi-config nonint do_change_timezone ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1160,
        "y": 1680,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c589aa9260a5f3a7",
        "type": "ui_toast",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1060,
        "y": 1780,
        "wires": []
    },
    {
        "id": "33f201622a5a02cd",
        "type": "ui_toast",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1060,
        "y": 1640,
        "wires": []
    },
    {
        "id": "ec0affbeb3a3cdb8",
        "type": "change",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(config)::osTimeZone",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 1740,
        "wires": [
            [
                "7f09ed91e3dfbe2f"
            ]
        ]
    },
    {
        "id": "32581c3d7d35b439",
        "type": "ui_ui_control",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 1640,
        "wires": [
            [
                "5e61626ef0f824f5"
            ]
        ]
    },
    {
        "id": "5e61626ef0f824f5",
        "type": "function",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "clear msg",
        "func": "msg = {};\n//initialize time fields as disabled\nmsg.payload = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1640,
        "wires": [
            [
                "1f33180305d5e203"
            ]
        ]
    },
    {
        "id": "b395ee7aa9dc2a44",
        "type": "exec",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "command": "sudo timedatectl set-ntp ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1090,
        "y": 1840,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "cf4a0c52e8465948",
        "type": "ui_switch",
        "z": "05fcb02c571dcfee",
        "g": "64c3f8c396d4445c",
        "name": "",
        "label": "Set NTP",
        "tooltip": "Enable/Disable Network Time Protocol (internet time sync)",
        "group": "f60635dac92356fd",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 600,
        "y": 1840,
        "wires": [
            [
                "b395ee7aa9dc2a44"
            ]
        ]
    },
    {
        "id": "e6461a7fdeef48a2",
        "type": "ui_form",
        "z": "fa9f914901f79645",
        "g": "b196e2c041c5a7f8",
        "name": "",
        "label": "Enter ThingsBoard Parameters",
        "group": "8570be913d017562",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Server Url",
                "value": "serverUrl",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Server Port",
                "value": "serverPort",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Access Token",
                "value": "accessToken",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "serverUrl": "",
            "serverPort": "",
            "accessToken": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 630,
        "y": 200,
        "wires": [
            [
                "f3b683b4b8176420",
                "f5797fb02606eda0",
                "cdc9b204ff81145c"
            ]
        ]
    },
    {
        "id": "f39673b54301cbb7",
        "type": "function",
        "z": "fa9f914901f79645",
        "g": "b196e2c041c5a7f8",
        "name": "read stored configuration",
        "func": "let storedServerUrl = global.get(\"serverUrl\", \"config\")\nlet serverUrl = storedServerUrl ? storedServerUrl : env.get(\"VAR_DEFAULT_TB_SERVER\");\nlet tbUrl = serverUrl ? serverUrl : \"http://tb.untower.online\"\n\nlet storedServerPort = global.get(\"serverPort\", \"config\")\nlet serverPort = storedServerPort ? storedServerPort : env.get(\"VAR_DEFAULT_TB_PORT\")\nlet tbPort = serverPort ? serverPort : \"80\";\n\nvar newMsg = { payload: { \n    // \"serverUrl\" : tbUrl,\n    // \"serverPort\": tbPort,\n    \"serverUrl\" : storedServerUrl,\n    \"serverPort\": storedServerPort,\n    \"accessToken\": global.get(\"accessToken\", \"config\"),\n} }\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar newMsg = { payload: { \"deviceName\": flow.get(\"deviceName\") } }\nreturn newMsg;",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "e6461a7fdeef48a2",
                "eade31a8864e53ee"
            ]
        ]
    },
    {
        "id": "b9331c0751fea046",
        "type": "ui_ui_control",
        "z": "fa9f914901f79645",
        "g": "b196e2c041c5a7f8",
        "name": "",
        "events": "all",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "f39673b54301cbb7"
            ]
        ]
    },
    {
        "id": "f3b683b4b8176420",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "b196e2c041c5a7f8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::serverUrl",
                "pt": "global",
                "to": "payload.serverUrl",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f5797fb02606eda0",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "b196e2c041c5a7f8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::serverPort",
                "pt": "global",
                "to": "payload.serverPort",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cdc9b204ff81145c",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "b196e2c041c5a7f8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::accessToken",
                "pt": "global",
                "to": "payload.accessToken",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "eade31a8864e53ee",
        "type": "ui_text",
        "z": "fa9f914901f79645",
        "g": "b196e2c041c5a7f8",
        "group": "8570be913d017562",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Customer/Contact Info may be updated at:",
        "format": "<a href=\"{{msg.payload.serverUrl}}/login\">{{msg.payload.serverUrl}}/login</a>",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 240,
        "wires": []
    },
    {
        "id": "a3be4e82e9888ae7",
        "type": "catch",
        "z": "fa9f914901f79645",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "b3dd88b1e86e01a6"
            ]
        ]
    },
    {
        "id": "b3dd88b1e86e01a6",
        "type": "debug",
        "z": "fa9f914901f79645",
        "name": "debug error, config tab",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "0efbf0059084d8d0",
        "type": "ui_form",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "location-form-details",
        "label": "",
        "group": "77966ee928726fbf",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Deployment Marker Name",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Latitude",
                "value": "lat",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Longtitude",
                "value": "lon",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Orientation (cardinal direction)",
                "value": "orientation",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Street Address",
                "value": "address",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Description / Conditions",
                "value": "description",
                "type": "multiline",
                "required": false,
                "rows": 3
            }
        ],
        "formValue": {
            "name": "",
            "lat": "",
            "lon": "",
            "orientation": "",
            "address": "",
            "description": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 540,
        "y": 460,
        "wires": [
            [
                "2adb206d0c356f8d"
            ]
        ]
    },
    {
        "id": "ce889b12a83c1fc2",
        "type": "worldmap in",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "location-deployment",
        "path": "/worldmap",
        "events": "connect,disconnect,point,draw,layer,bounds,files,other",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "c3629e05aa43359d"
            ]
        ]
    },
    {
        "id": "f56633a89481439a",
        "type": "ui_worldmap",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "group": "77966ee928726fbf",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "lat": "45.52",
        "lon": "-122.681944",
        "zoom": "11",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,RA,DN,HM",
        "maplist": "OSMG,OSMC,OSMH,EsriC,EsriS,EsriT,EsriDG,UKOS,HB",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1200,
        "y": 560,
        "wires": []
    },
    {
        "id": "c3629e05aa43359d",
        "type": "switch",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "payload.action",
        "property": "payload.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "point",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "move",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 200,
        "y": 460,
        "wires": [
            [
                "0efbf0059084d8d0",
                "abaf9c5d1eecfdf5"
            ],
            [
                "abaf9c5d1eecfdf5"
            ],
            [
                "581373a3d9ca8bbf"
            ]
        ]
    },
    {
        "id": "b1c37cc7992ec0b1",
        "type": "ui_template",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "group": "77966ee928726fbf",
        "name": "location-title",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<h3>Location Entry Details</h3>\n<p><em>Map will update the form and vice versa.</em></p>\n<p>Only the latest deployment location entry will be used for this device.</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 130,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b149610d4d0d1153",
        "type": "function",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "remove previous marker",
        "func": "//if payload marker is different from previous one, delete previous one\nconst newMarker = msg.payload;\n\n//delete the previous marker\nmsg.payload = {\n    name: flow.get(\"latestMarkerAllInfo.name\"),\n    deleted:true\n};\n\nflow.set(\"latestMarkerAllInfo\",newMarker);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 500,
        "wires": [
            [
                "f56633a89481439a",
                "2ce3c5bb0b42f8e3"
            ]
        ]
    },
    {
        "id": "83df59e62c9ebe4f",
        "type": "function",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "save flow.latestMarkerAllInfo",
        "func": "//combine all properties, as long as it's for the same marker\n// assume any input into here (payload) is the latest\n\nconst previousMarkerInfo = flow.get(\"latestMarkerAllInfo\");\n\n//update and override from payload\nvar newMarkerInfo = { ...previousMarkerInfo, ...msg.payload, draggable:true};\n\nflow.set(\"latestMarkerAllInfo\", newMarkerInfo)\n\nmsg.payload = newMarkerInfo;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [
                "0efbf0059084d8d0",
                "f56633a89481439a"
            ]
        ]
    },
    {
        "id": "0d5da21c913e2636",
        "type": "switch",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "check for previous marker match",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "latestMarkerAllInfo.name",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 380,
        "wires": [
            [
                "83df59e62c9ebe4f"
            ],
            [
                "b149610d4d0d1153"
            ]
        ]
    },
    {
        "id": "abaf9c5d1eecfdf5",
        "type": "switch",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "check for existing marker",
        "property": "latestMarkerAllInfo.name",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 400,
        "wires": [
            [
                "0d5da21c913e2636"
            ],
            [
                "bf7d55674655862b"
            ]
        ]
    },
    {
        "id": "bf7d55674655862b",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "latestMarkerAllInfo",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 420,
        "wires": [
            [
                "83df59e62c9ebe4f"
            ]
        ]
    },
    {
        "id": "2ce3c5bb0b42f8e3",
        "type": "function",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "reset form",
        "func": "msg.payload = flow.get(\"latestMarkerAllInfo\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 540,
        "wires": [
            [
                "0efbf0059084d8d0"
            ]
        ]
    },
    {
        "id": "581373a3d9ca8bbf",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "clear markers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "latestMarkerAllInfo",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 520,
        "wires": [
            [
                "0efbf0059084d8d0"
            ]
        ]
    },
    {
        "id": "4a34bf5fa29ebc93",
        "type": "sqlite",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 580,
        "y": 900,
        "wires": [
            [
                "9e029001fe1461ec"
            ]
        ]
    },
    {
        "id": "401038caabc5e91c",
        "type": "inject",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "create table deployment",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE IF NOT EXISTS deployment (id TEXT PRIMARY KEY, entryDateTime REAL, name TEXT, orientation TEXT, lat REAL, lon REAL, address TEXT, description TEXT, deviceName TEXT);",
        "x": 290,
        "y": 900,
        "wires": [
            [
                "4a34bf5fa29ebc93",
                "9da183e98b5eef83"
            ]
        ]
    },
    {
        "id": "8add1e75d35b3706",
        "type": "sqlite",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "prepared",
        "sql": "INSERT INTO deployment (id, entryDateTime, name, orientation, lat, lon, address, description, deviceName) \nVALUES ($id, $entryDateTime, $name, $orientation, $lat, $lon, $address, $description, $deviceName);",
        "name": "tmdb.deployment, Prepared Statement",
        "x": 850,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "e8e148afd22b2619",
        "type": "function",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "write params for deployment insert",
        "func": "//VALUES ($id, $entryDateTime, $name, $orientation, $latitude, $longitude, $address, $description, $deviceName)\n\nvar newMsg = {}\n\nnewMsg.id = msg.payload.id;\nnewMsg.entryDateTime = msg.payload.entryDateTime;\nnewMsg.name = msg.payload.name;\nnewMsg.lat = msg.payload.lat;\nnewMsg.lon = msg.payload.lon;\nnewMsg.orientation = msg.payload.orientation;\nnewMsg.address = msg.payload.address;\nnewMsg.description = msg.payload.description;\nnewMsg.deviceName = msg.payload.deviceName;\n\nconst obj = newMsg;\n\nconst keyedObj = Object.keys(obj).reduce((acc, key) => {\n    acc[`$${key}`] = obj[key];\n    return acc;\n}, {});\n\nmsg.params = keyedObj;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 800,
        "wires": [
            [
                "8add1e75d35b3706",
                "1257b05ec67b5a3e"
            ]
        ]
    },
    {
        "id": "31abfc5bcc49bb09",
        "type": "inject",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "select latest 5 rows from deployment",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM deployment ORDER BY entryDateTime DESC LIMIT 5;",
        "x": 260,
        "y": 940,
        "wires": [
            [
                "4a34bf5fa29ebc93",
                "9da183e98b5eef83"
            ]
        ]
    },
    {
        "id": "9e029001fe1461ec",
        "type": "debug",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "sqlite select last 5 msgs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 900,
        "wires": []
    },
    {
        "id": "b7103dfabfa35f67",
        "type": "sqlite",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "mydb": "2f60c1ab30a6fc8f",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 560,
        "y": 760,
        "wires": [
            [
                "b87d36e05fb323bf",
                "c12aee3936f24599"
            ]
        ]
    },
    {
        "id": "ae506b2fc999b8da",
        "type": "inject",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "select latest record from deployment",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "SELECT * FROM deployment ORDER BY entryDateTime DESC LIMIT 1;",
        "x": 270,
        "y": 760,
        "wires": [
            [
                "b7103dfabfa35f67"
            ]
        ]
    },
    {
        "id": "b87d36e05fb323bf",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "init deployment info",
        "rules": [
            {
                "t": "set",
                "p": "latestMarkerAllInfo",
                "pt": "flow",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "#:(config)::deployment",
                "pt": "global",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 720,
        "wires": [
            [
                "0efbf0059084d8d0",
                "f56633a89481439a"
            ]
        ]
    },
    {
        "id": "6f700f9167d834ca",
        "type": "inject",
        "z": "fa9f914901f79645",
        "d": true,
        "g": "6aafbb121cb8890b",
        "name": "drop table deployment",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DROP TABLE IF EXISTS deployment;",
        "x": 300,
        "y": 980,
        "wires": [
            [
                "4a34bf5fa29ebc93"
            ]
        ]
    },
    {
        "id": "5c2714054adf2be7",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "#:(config)::deployment",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "b4935c0d86d87137",
        "type": "link out",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "deployment submit link out",
        "mode": "link",
        "links": [
            "8a83d59ee0db1198",
            "8768b75dbfee3973"
        ],
        "x": 1155,
        "y": 660,
        "wires": []
    },
    {
        "id": "5181051bdcb0b370",
        "type": "ui_toast",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1220,
        "y": 700,
        "wires": []
    },
    {
        "id": "2adb206d0c356f8d",
        "type": "function",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "create full deployment payload",
        "func": "msg.topic = 'tm/deployment'\n\nmsg.payload.entryDateTime = new Date();\nmsg.payload.id = msg.payload.entryDateTime.getTime() + '-' + Math.floor(Math.random() * 0xFFFFFFFF).toString(16).padStart(8, '0') + '-d';\n\nmsg.payload.deviceName = global.get(\"rpiSN\", \"config\");\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 540,
        "wires": [
            [
                "e8e148afd22b2619",
                "5181051bdcb0b370",
                "b4935c0d86d87137",
                "5c2714054adf2be7",
                "abaf9c5d1eecfdf5"
            ]
        ]
    },
    {
        "id": "66594bbc3f3afe7d",
        "type": "ui_ui_control",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "",
        "events": "all",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "2dc53362436f912e"
            ]
        ]
    },
    {
        "id": "2dc53362436f912e",
        "type": "change",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#:(config)::deployment",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 600,
        "wires": [
            [
                "0efbf0059084d8d0",
                "f56633a89481439a"
            ]
        ]
    },
    {
        "id": "9da183e98b5eef83",
        "type": "sqlite",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 580,
        "y": 940,
        "wires": [
            [
                "6e00fe840927061b"
            ]
        ]
    },
    {
        "id": "6e00fe840927061b",
        "type": "debug",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "sqlite select last 5 msgs radar",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 940,
        "wires": []
    },
    {
        "id": "1257b05ec67b5a3e",
        "type": "sqlite",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "mydb": "1d8d8c9a28569355",
        "sqlquery": "prepared",
        "sql": "INSERT INTO deployment (id, entryDateTime, name, orientation, lat, lon, address, description, deviceName) \nVALUES ($id, $entryDateTime, $name, $orientation, $lat, $lon, $address, $description, $deviceName);",
        "name": "radar.deployment, Prepared Statement",
        "x": 850,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "c12aee3936f24599",
        "type": "debug",
        "z": "fa9f914901f79645",
        "g": "6aafbb121cb8890b",
        "name": "deployment latest record",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 760,
        "wires": []
    },
    {
        "id": "3d22adf20ea1089f",
        "type": "ui_template",
        "z": "fa9f914901f79645",
        "g": "f431ed51eb2b2a49",
        "group": "77966ee928726fbf",
        "name": "location-note-form",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<p><em>If form doesn't populate with most recent deployment, hit Refresh on your browser.</em></p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "9f2c4f1852402eb8",
        "type": "inject",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "time_ms_utc",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "040a9f02853598aa",
                "8c8c487fbf8e11a1",
                "ae7325dd07b1f3ba",
                "7b406e86282cd677",
                "674f21d2e645cc18",
                "ab9d774782f92e88",
                "720ee19c705f37d9",
                "c0078fa5b3946c05",
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "040a9f02853598aa",
        "type": "OS",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "x": 270,
        "y": 160,
        "wires": [
            [
                "e1d39852db4af08c"
            ]
        ]
    },
    {
        "id": "8c8c487fbf8e11a1",
        "type": "Drives",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "x": 270,
        "y": 240,
        "wires": [
            [
                "65e30edd475cad64"
            ]
        ]
    },
    {
        "id": "e1d39852db4af08c",
        "type": "change",
        "z": "f410f6aac9d1a3fc",
        "name": "OS",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_OS",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 160,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "65e30edd475cad64",
        "type": "change",
        "z": "f410f6aac9d1a3fc",
        "name": "Drives",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Drives",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 240,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "c497cfedf6aed533",
        "type": "join",
        "z": "f410f6aac9d1a3fc",
        "name": "Compose Metrics Msg",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 870,
        "y": 340,
        "wires": [
            [
                "6dca925fad91c100"
            ]
        ]
    },
    {
        "id": "ae7325dd07b1f3ba",
        "type": "Uptime",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "x": 280,
        "y": 300,
        "wires": [
            [
                "398089ca4a10bdc5"
            ]
        ]
    },
    {
        "id": "7b406e86282cd677",
        "type": "CPUs",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "x": 270,
        "y": 360,
        "wires": [
            [
                "882369d2082717a5"
            ]
        ]
    },
    {
        "id": "674f21d2e645cc18",
        "type": "Loadavg",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "x": 280,
        "y": 420,
        "wires": [
            [
                "b6b8a1a7c08eb0ac"
            ]
        ]
    },
    {
        "id": "ab9d774782f92e88",
        "type": "Memory",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "scale": "Byte",
        "x": 280,
        "y": 480,
        "wires": [
            [
                "976ec527b724bd3d"
            ]
        ]
    },
    {
        "id": "720ee19c705f37d9",
        "type": "NetworkIntf",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "6881f1dd8a4805af"
            ]
        ]
    },
    {
        "id": "398089ca4a10bdc5",
        "type": "change",
        "z": "f410f6aac9d1a3fc",
        "name": "Uptime",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Uptime",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 300,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "882369d2082717a5",
        "type": "change",
        "z": "f410f6aac9d1a3fc",
        "name": "CPUs",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_CPUx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "b6b8a1a7c08eb0ac",
        "type": "change",
        "z": "f410f6aac9d1a3fc",
        "name": "Loadavg",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Loadavg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 420,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "976ec527b724bd3d",
        "type": "change",
        "z": "f410f6aac9d1a3fc",
        "name": "Memory",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_Memory",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 480,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "6881f1dd8a4805af",
        "type": "change",
        "z": "f410f6aac9d1a3fc",
        "name": "NetworkIntf",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "metrics_NetworkIntf",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 540,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "c0078fa5b3946c05",
        "type": "exec",
        "z": "f410f6aac9d1a3fc",
        "command": "python3 ./traffic-monitor/utils/rpi5-nodered-telemetry.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Hardware metrics",
        "x": 310,
        "y": 600,
        "wires": [
            [
                "35a886e73a73f32e"
            ],
            [
                "cc4ab72bfb50feca"
            ],
            []
        ]
    },
    {
        "id": "35a886e73a73f32e",
        "type": "function",
        "z": "f410f6aac9d1a3fc",
        "name": "Hardware",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.topic = \"metrics_Hardware\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 600,
        "wires": [
            [
                "c497cfedf6aed533"
            ]
        ]
    },
    {
        "id": "6e88f30f09b49d22",
        "type": "comment",
        "z": "f410f6aac9d1a3fc",
        "name": "OS and Hardware Metrics Documentation",
        "info": "Send various operating system and hardware metrics to the ThingsBoard server as telemetry:\n - See [node-red-contrib-os](https://github.com/Argonne-National-Laboratory/node-red-contrib-os/blob/master/README.md) package for definition of operating system metrics\n - Most of the hardware metrics come from the [vcgencmd command line tool](https://elinux.org/RPI_vcgencmd_usage). Both that documenation and others that are available online seem to be out-of-date. See also [How to Benchmark a Raspberry Pi Using Vcgencmd](https://www.tomshardware.com/how-to/raspberry-pi-benchmark-vcgencmd).\n - hardware cpu_percent is obtained from [psutil](https://psutil.readthedocs.io/en/latest/).\n - hardware meminfo comes from 'cat /proc/meminfo'.",
        "x": 940,
        "y": 160,
        "wires": []
    },
    {
        "id": "cc4ab72bfb50feca",
        "type": "debug",
        "z": "f410f6aac9d1a3fc",
        "name": "Errors that occurred while getting Hardware metrics",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 640,
        "wires": []
    },
    {
        "id": "6dca925fad91c100",
        "type": "link out",
        "z": "f410f6aac9d1a3fc",
        "name": "system_metrics",
        "mode": "link",
        "links": [
            "24c1b5f3bff3834c"
        ],
        "x": 1085,
        "y": 340,
        "wires": []
    },
    {
        "id": "36703c045ec3d26f",
        "type": "catch",
        "z": "f410f6aac9d1a3fc",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "f68bd35ce57e8af8"
            ]
        ]
    },
    {
        "id": "f68bd35ce57e8af8",
        "type": "debug",
        "z": "f410f6aac9d1a3fc",
        "name": "metrics flow error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 40,
        "wires": []
    }
]